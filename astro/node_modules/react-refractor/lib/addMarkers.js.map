{"version":3,"file":"addMarkers.js","names":["filter","require","visit","NodeMap","lineNumberify","ast","context","arguments","length","undefined","lineNumber","reduce","result","node","lineStart","type","value","indexOf","lineEnd","nodes","push","lines","split","i","lineNum","concat","children","processed","firstChild","lastChild","unwrapLine","markerLine","tree","headMap","lineMap","tailMap","cloned","addCopy","map","ancestors","forEach","ancestor","has","set","Object","assign","get","child","leaf","some","clone","filtered","getChildren","rootNode","Math","max","merged","clear","wrapBatch","marker","options","className","tagName","component","properties","line","isMarker","wrapLines","treeNodes","markers","acc","wrapped","astIndex","m","batch","addMarkers","sort","nodeA","nodeB","numbered","module","exports"],"sources":["../src/addMarkers.js"],"sourcesContent":["const filter = require('unist-util-filter')\nconst visit = require('unist-util-visit-parents')\nconst NodeMap = require('./map')\n\nfunction lineNumberify(ast, context = {lineNumber: 1}) {\n  return ast.reduce(\n    (result, node) => {\n      const lineStart = context.lineNumber\n\n      if (node.type === 'text') {\n        if (node.value.indexOf('\\n') === -1) {\n          node.lineStart = lineStart\n          node.lineEnd = lineStart\n          result.nodes.push(node)\n          return result\n        }\n\n        const lines = node.value.split('\\n')\n        for (let i = 0; i < lines.length; i++) {\n          const lineNum = i === 0 ? context.lineNumber : ++context.lineNumber\n          result.nodes.push({\n            type: 'text',\n            value: i === lines.length - 1 ? lines[i] : `${lines[i]}\\n`,\n            lineStart: lineNum,\n            lineEnd: lineNum,\n          })\n        }\n\n        result.lineNumber = context.lineNumber\n        return result\n      }\n\n      if (node.children) {\n        const processed = lineNumberify(node.children, context)\n        const firstChild = processed.nodes[0]\n        const lastChild = processed.nodes[processed.nodes.length - 1]\n        node.lineStart = firstChild ? firstChild.lineStart : lineStart\n        node.lineEnd = lastChild ? lastChild.lineEnd : lineStart\n        node.children = processed.nodes\n        result.lineNumber = processed.lineNumber\n        result.nodes.push(node)\n        return result\n      }\n\n      result.nodes.push(node)\n      return result\n    },\n    {nodes: [], lineNumber: context.lineNumber}\n  )\n}\n\nfunction unwrapLine(markerLine, nodes) {\n  const tree = {type: 'root', children: nodes}\n\n  const headMap = new NodeMap()\n  const lineMap = new NodeMap()\n  const tailMap = new NodeMap()\n  const cloned = []\n\n  function addCopy(map, node, ancestors) {\n    cloned.push(node)\n\n    ancestors.forEach((ancestor) => {\n      if (!map.has(ancestor)) {\n        map.set(ancestor, Object.assign({}, ancestor, {children: []}))\n\n        if (ancestor !== tree) {\n          cloned.push(ancestor)\n        }\n      }\n    })\n\n    let i = ancestors.length\n    while (i--) {\n      const ancestor = map.get(ancestors[i])\n      const child = ancestors[i + 1]\n      const leaf = map.get(child) || node\n      if (ancestor.children.indexOf(leaf) === -1) {\n        ancestor.children.push(leaf)\n      }\n    }\n  }\n\n  visit(tree, (node, ancestors) => {\n    if (node.children) {\n      return\n    }\n\n    // These nodes are on previous lines, but nested within the same structure\n    if (node.lineStart < markerLine) {\n      addCopy(headMap, node, ancestors)\n      return\n    }\n\n    // These nodes are on the target line\n    if (node.lineStart === markerLine) {\n      addCopy(lineMap, node, ancestors)\n      return\n    }\n\n    // If we have shared ancestors with some of the cloned elements,\n    // create another tree of the remaining nodes\n    if (node.lineEnd > markerLine && cloned.some((clone) => ancestors.indexOf(clone) !== -1)) {\n      addCopy(tailMap, node, ancestors)\n    }\n  })\n\n  // Get the remaining nodes - the ones who were not part of the same tree\n  const filtered = filter(tree, (node) => cloned.indexOf(node) === -1)\n  const getChildren = (map) => {\n    const rootNode = map.get(tree)\n    if (!rootNode) {\n      return []\n    }\n\n    visit(rootNode, (leaf, ancestors) => {\n      if (leaf.children) {\n        leaf.lineStart = 0\n        leaf.lineEnd = 0\n        return\n      }\n\n      ancestors.forEach((ancestor) => {\n        ancestor.lineStart = Math.max(ancestor.lineStart, leaf.lineStart)\n        ancestor.lineEnd = Math.max(ancestor.lineEnd, leaf.lineEnd)\n      })\n    })\n\n    return rootNode.children\n  }\n\n  const merged = [].concat(\n    getChildren(headMap),\n    getChildren(lineMap),\n    getChildren(tailMap),\n    filtered ? filtered.children : []\n  )\n\n  headMap.clear()\n  lineMap.clear()\n  tailMap.clear()\n\n  return merged\n}\n\nfunction wrapBatch(children, marker, options) {\n  const className = marker.className || 'refractor-marker'\n  return {\n    type: 'element',\n    tagName: marker.component || 'div',\n    properties: marker.component ? Object.assign({}, options, {className}) : {className},\n    children,\n    lineStart: marker.line,\n    lineEnd: children[children.length - 1].lineEnd,\n    isMarker: true,\n  }\n}\n\nfunction wrapLines(treeNodes, markers, options) {\n  if (markers.length === 0 || treeNodes.length === 0) {\n    return treeNodes\n  }\n\n  const ast = markers.reduce((acc, marker) => unwrapLine(marker.line, acc), treeNodes)\n\n  // Container for the new AST\n  const wrapped = []\n\n  // Note: Markers are already sorted by line number (ascending)\n  let astIndex = 0\n  for (let m = 0; m < markers.length; m++) {\n    const marker = markers[m]\n\n    // Start by eating all AST nodes with line numbers up to the given marker\n    for (let node = ast[astIndex]; node && node.lineEnd < marker.line; node = ast[++astIndex]) {\n      wrapped.push(node)\n    }\n\n    // Now proceed to find all _contiguous_ nodes on the same line\n    const batch = []\n    for (let node = ast[astIndex]; node && node.lineEnd === marker.line; node = ast[++astIndex]) {\n      batch.push(node)\n    }\n\n    // Now add that batch, if we have anything\n    if (batch.length > 0) {\n      wrapped.push(wrapBatch(batch, marker, options))\n    }\n  }\n\n  // Now add the remaining AST nodes\n  while (astIndex < ast.length) {\n    wrapped.push(ast[astIndex++])\n  }\n\n  return wrapped\n}\n\nfunction addMarkers(ast, options) {\n  const markers = options.markers\n    .map((marker) => (marker.line ? marker : {line: marker}))\n    .sort((nodeA, nodeB) => nodeA.line - nodeB.line)\n\n  const numbered = lineNumberify(ast).nodes\n  return wrapLines(numbered, markers, options)\n}\n\nmodule.exports = addMarkers\n"],"mappings":"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","ignoreList":[]}