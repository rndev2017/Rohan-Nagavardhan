{"version":3,"file":"_commonjsHelpers.cjs","sources":["../../src/middleware/defaultOptionsProcessor.ts","../../src/middleware/defaultOptionsValidator.ts"],"sourcesContent":["import type {MiddlewareHooks, RequestOptions} from 'get-it'\n\nconst isReactNative = typeof navigator === 'undefined' ? false : navigator.product === 'ReactNative'\n\nconst defaultOptions = {timeout: isReactNative ? 60000 : 120000} satisfies Partial<RequestOptions>\n\n/** @public */\nexport const processOptions = function processOptions(opts) {\n  const options = {\n    ...defaultOptions,\n    ...(typeof opts === 'string' ? {url: opts} : opts),\n  } satisfies RequestOptions\n\n  // Normalize timeouts\n  options.timeout = normalizeTimeout(options.timeout)\n\n  // Shallow-merge (override) existing query params\n  if (options.query) {\n    const {url, searchParams} = splitUrl(options.url)\n\n    for (const [key, value] of Object.entries(options.query)) {\n      if (value !== undefined) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            searchParams.append(key, v as string)\n          }\n        } else {\n          searchParams.append(key, value as string)\n        }\n      }\n\n      // Merge back params into url\n      const search = searchParams.toString()\n      if (search) {\n        options.url = `${url}?${search}`\n      }\n    }\n  }\n\n  // Implicit POST if we have not specified a method but have a body\n  options.method =\n    options.body && !options.method ? 'POST' : (options.method || 'GET').toUpperCase()\n\n  return options\n} satisfies MiddlewareHooks['processOptions']\n\n/**\n * Given a string URL, extracts the query string and URL from each other, and returns them.\n * Note that we cannot use the `URL` constructor because of old React Native versions which are\n * majorly broken and returns incorrect results:\n *\n * (`new URL('http://foo/?a=b').toString()` == 'http://foo/?a=b/')\n */\nfunction splitUrl(url: string): {url: string; searchParams: URLSearchParams} {\n  const qIndex = url.indexOf('?')\n  if (qIndex === -1) {\n    return {url, searchParams: new URLSearchParams()}\n  }\n\n  const base = url.slice(0, qIndex)\n  const qs = url.slice(qIndex + 1)\n\n  // React Native's URL and URLSearchParams are broken, so passing a string to URLSearchParams\n  // does not work, leading to an empty query string. For other environments, this should be enough\n  if (!isReactNative) {\n    return {url: base, searchParams: new URLSearchParams(qs)}\n  }\n\n  // Sanity-check; we do not know of any environment where this is the case,\n  // but if it is, we should not proceed without giving a descriptive error\n  if (typeof decodeURIComponent !== 'function') {\n    throw new Error(\n      'Broken `URLSearchParams` implementation, and `decodeURIComponent` is not defined',\n    )\n  }\n\n  const params = new URLSearchParams()\n  for (const pair of qs.split('&')) {\n    const [key, value] = pair.split('=')\n    if (key) {\n      params.append(decodeQueryParam(key), decodeQueryParam(value || ''))\n    }\n  }\n\n  return {url: base, searchParams: params}\n}\n\nfunction decodeQueryParam(value: string): string {\n  return decodeURIComponent(value.replace(/\\+/g, ' '))\n}\n\nfunction normalizeTimeout(time: RequestOptions['timeout']) {\n  if (time === false || time === 0) {\n    return false\n  }\n\n  if (time.connect || time.socket) {\n    return time\n  }\n\n  const delay = Number(time)\n  if (isNaN(delay)) {\n    return normalizeTimeout(defaultOptions.timeout)\n  }\n\n  return {connect: delay, socket: delay}\n}\n","import type {MiddlewareHooks} from 'get-it'\n\nconst validUrl = /^https?:\\/\\//i\n\n/** @public */\nexport const validateOptions = function validateOptions(options) {\n  if (!validUrl.test(options.url)) {\n    throw new Error(`\"${options.url}\" is not a valid URL`)\n  }\n} satisfies MiddlewareHooks['validateOptions']\n"],"names":[],"mappings":";AAEA,MAAM,gBAAgB,OAAO,YAAc,MAAc,KAAQ,UAAU,YAAY,eAEjF,iBAAiB,EAAC,SAAS,gBAAgB,MAAQ,KAAM,GAGlD,iBAAiB,SAAwB,MAAM;AAC1D,QAAM,UAAU;AAAA,IACd,GAAG;AAAA,IACH,GAAI,OAAO,QAAS,WAAW,EAAC,KAAK,KAAQ,IAAA;AAAA,EAAA;AAO/C,MAHA,QAAQ,UAAU,iBAAiB,QAAQ,OAAO,GAG9C,QAAQ,OAAO;AACjB,UAAM,EAAC,KAAK,aAAA,IAAgB,SAAS,QAAQ,GAAG;AAErC,eAAA,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,QAAQ,KAAK,GAAG;AACxD,UAAI,UAAU;AACR,YAAA,MAAM,QAAQ,KAAK;AACrB,qBAAW,KAAK;AACD,yBAAA,OAAO,KAAK,CAAW;AAAA;AAGzB,uBAAA,OAAO,KAAK,KAAe;AAKtC,YAAA,SAAS,aAAa;AACxB,iBACF,QAAQ,MAAM,GAAG,GAAG,IAAI,MAAM;AAAA,IAElC;AAAA,EACF;AAGQ,SAAA,QAAA,SACN,QAAQ,QAAQ,CAAC,QAAQ,SAAS,UAAU,QAAQ,UAAU,OAAO,YAAA,GAEhE;AACT;AASA,SAAS,SAAS,KAA2D;AACrE,QAAA,SAAS,IAAI,QAAQ,GAAG;AAC9B,MAAI,WAAW;AACb,WAAO,EAAC,KAAK,cAAc,IAAI,gBAAiB,EAAA;AAG5C,QAAA,OAAO,IAAI,MAAM,GAAG,MAAM,GAC1B,KAAK,IAAI,MAAM,SAAS,CAAC;AAI/B,MAAI,CAAC;AACH,WAAO,EAAC,KAAK,MAAM,cAAc,IAAI,gBAAgB,EAAE;AAKzD,MAAI,OAAO,sBAAuB;AAChC,UAAM,IAAI;AAAA,MACR;AAAA,IAAA;AAIE,QAAA,SAAS,IAAI;AACnB,aAAW,QAAQ,GAAG,MAAM,GAAG,GAAG;AAChC,UAAM,CAAC,KAAK,KAAK,IAAI,KAAK,MAAM,GAAG;AAC/B,WACF,OAAO,OAAO,iBAAiB,GAAG,GAAG,iBAAiB,SAAS,EAAE,CAAC;AAAA,EAEtE;AAEA,SAAO,EAAC,KAAK,MAAM,cAAc,OAAM;AACzC;AAEA,SAAS,iBAAiB,OAAuB;AAC/C,SAAO,mBAAmB,MAAM,QAAQ,OAAO,GAAG,CAAC;AACrD;AAEA,SAAS,iBAAiB,MAAiC;AACrD,MAAA,SAAS,MAAS,SAAS;AACtB,WAAA;AAGL,MAAA,KAAK,WAAW,KAAK;AAChB,WAAA;AAGH,QAAA,QAAQ,OAAO,IAAI;AACrB,SAAA,MAAM,KAAK,IACN,iBAAiB,eAAe,OAAO,IAGzC,EAAC,SAAS,OAAO,QAAQ,MAAK;AACvC;ACxGA,MAAM,WAAW,iBAGJ,kBAAkB,SAAyB,SAAS;AAC/D,MAAI,CAAC,SAAS,KAAK,QAAQ,GAAG;AAC5B,UAAM,IAAI,MAAM,IAAI,QAAQ,GAAG,sBAAsB;AAEzD;;;;;;;"}