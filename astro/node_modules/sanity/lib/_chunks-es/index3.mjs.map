{"version":3,"file":"index3.mjs","sources":["../../src/structure/components/paneRouter/PaneRouterProvider.tsx","../../src/structure/structureResolvers/PaneResolutionError.ts","../../src/structure/structureResolvers/assignId.ts","../../src/structure/structureResolvers/createPaneResolver.ts","../../src/structure/structureResolvers/memoBind.ts","../../src/structure/structureResolvers/resolveIntent.ts","../../src/structure/structureResolvers/createResolvedPaneNodeStream.ts","../../src/structure/structureResolvers/useResolvedPanes.ts","../../src/structure/components/structureTool/intentResolver/utils.ts","../../src/structure/components/structureTool/intentResolver/IntentResolver.tsx","../../src/structure/components/structureTool/StructureError.tsx","../../src/structure/panes/unknown/UnknownPaneType.tsx","../../src/structure/panes/StructureToolPane.tsx","../../src/structure/components/structureTool/NoDocumentTypesScreen.tsx","../../src/structure/components/structureTool/StructureTitle.tsx","../../src/structure/components/structureTool/StructureTool.tsx","../../src/structure/components/structureTool/StructureToolBoundary.tsx"],"sourcesContent":["import {toString as pathToString} from '@sanity/util/paths'\nimport {omit} from 'lodash'\nimport {type ReactNode, useCallback, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from '../../types'\nimport {usePaneLayout} from '../pane/usePaneLayout'\nimport {BackLink} from './BackLink'\nimport {ChildLink} from './ChildLink'\nimport {ParameterizedLink} from './ParameterizedLink'\nimport {ReferenceChildLink} from './ReferenceChildLink'\nimport {type PaneRouterContextValue} from './types'\n\nconst emptyArray: never[] = []\n\n/**\n * @internal\n */\nexport function PaneRouterProvider(props: {\n  children: ReactNode\n  flatIndex: number\n  index: number\n  params: Record<string, string | undefined>\n  payload: unknown\n  siblingIndex: number\n}) {\n  const {children, flatIndex, index, params, payload, siblingIndex} = props\n  const {navigate, navigateIntent, resolvePathFromState} = useRouter()\n  const routerState = useRouterState()\n  const {panes, expand} = usePaneLayout()\n  const routerPaneGroups: RouterPaneGroup[] = useMemo(\n    () => (routerState?.panes || emptyArray) as RouterPanes,\n    [routerState?.panes],\n  )\n  const lastPane = useMemo(() => panes?.[panes.length - 2], [panes])\n\n  const groupIndex = index - 1\n\n  const createNextRouterState = useCallback(\n    (modifier: (siblings: RouterPaneGroup, item: RouterPaneSibling) => RouterPaneGroup) => {\n      const currentGroup = routerPaneGroups[groupIndex] || []\n      const currentItem = currentGroup[siblingIndex]\n      const nextGroup = modifier(currentGroup, currentItem)\n      const nextPanes = [\n        ...routerPaneGroups.slice(0, groupIndex),\n        nextGroup,\n        ...routerPaneGroups.slice(groupIndex + 1),\n      ]\n      const nextRouterState = {...(routerState || {}), panes: nextPanes}\n\n      return nextRouterState\n    },\n    [groupIndex, routerPaneGroups, routerState, siblingIndex],\n  )\n\n  const modifyCurrentGroup = useCallback(\n    (modifier: (siblings: RouterPaneGroup, item: RouterPaneSibling) => RouterPaneGroup) => {\n      const nextRouterState = createNextRouterState(modifier)\n      setTimeout(() => navigate(nextRouterState), 0)\n      return nextRouterState\n    },\n    [createNextRouterState, navigate],\n  )\n\n  const createPathWithParams: PaneRouterContextValue['createPathWithParams'] = useCallback(\n    (nextParams) => {\n      const nextRouterState = createNextRouterState((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, params: nextParams},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n\n      return resolvePathFromState(nextRouterState)\n    },\n    [createNextRouterState, resolvePathFromState, siblingIndex],\n  )\n\n  const setPayload: PaneRouterContextValue['setPayload'] = useCallback(\n    (nextPayload) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, payload: nextPayload},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex],\n  )\n\n  const setParams: PaneRouterContextValue['setParams'] = useCallback(\n    (nextParams) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, params: nextParams},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex],\n  )\n\n  const handleEditReference: PaneRouterContextValue['handleEditReference'] = useCallback(\n    ({id, parentRefPath, type, template}) => {\n      navigate({\n        panes: [\n          ...routerPaneGroups.slice(0, groupIndex + 1),\n          [\n            {\n              id,\n              params: {template: template.id, parentRefPath: pathToString(parentRefPath), type},\n              payload: template.params,\n            },\n          ],\n        ],\n      })\n    },\n    [groupIndex, navigate, routerPaneGroups],\n  )\n\n  const ctx: PaneRouterContextValue = useMemo(\n    () => ({\n      // Zero-based index (position) of pane, visually\n      index: flatIndex,\n\n      // Zero-based index of pane group (within URL structure)\n      groupIndex,\n\n      // Zero-based index of pane within sibling group\n      siblingIndex,\n\n      // Payload of the current pane\n      payload,\n\n      // Params of the current pane\n      params,\n\n      // Whether or not the pane has any siblings (within the same group)\n      hasGroupSiblings: routerPaneGroups[groupIndex]\n        ? routerPaneGroups[groupIndex].length > 1\n        : false,\n\n      // The length of the current group\n      groupLength: routerPaneGroups[groupIndex] ? routerPaneGroups[groupIndex].length : 0,\n\n      // Current router state for the \"panes\" property\n      routerPanesState: routerPaneGroups,\n\n      // Curried StateLink that passes the correct state automatically\n      ChildLink,\n\n      // Curried StateLink that pops off the last pane group\n      // Only pass if this is not the first pane\n      BackLink: flatIndex ? BackLink : undefined,\n\n      // A specialized `ChildLink` that takes in the needed props to open a\n      // referenced document to the right\n      ReferenceChildLink,\n\n      // Similar to `ReferenceChildLink` expect without the wrapping component\n      handleEditReference,\n\n      // Curried StateLink that passed the correct state, but merges params/payload\n      ParameterizedLink,\n\n      // Replaces the current pane with a new one\n      replaceCurrent: (opts = {}): void => {\n        modifyCurrentGroup(() => [\n          {id: opts.id || '', payload: opts.payload, params: opts.params || {}},\n        ])\n      },\n\n      // Removes the current pane from the group\n      closeCurrent: (): void => {\n        modifyCurrentGroup((siblings, item) =>\n          siblings.length > 1 ? siblings.filter((sibling) => sibling !== item) : siblings,\n        )\n      },\n\n      // Removes all panes to the right including current\n      closeCurrentAndAfter: (expandLast = true): void => {\n        if (expandLast && lastPane) {\n          expand(lastPane.element)\n        }\n        navigate(\n          {\n            panes: [...routerPaneGroups.slice(0, groupIndex)],\n          },\n          {replace: true},\n        )\n      },\n\n      // Duplicate the current pane, with optional overrides for payload, parameters\n      duplicateCurrent: (options): void => {\n        modifyCurrentGroup((siblings, item) => {\n          const duplicatedItem = {\n            ...item,\n            payload: options?.payload || item.payload,\n            params: options?.params || item.params,\n          }\n\n          return [\n            ...siblings.slice(0, siblingIndex),\n            duplicatedItem,\n            ...siblings.slice(siblingIndex),\n          ]\n        })\n      },\n\n      // Set the view for the current pane\n      setView: (viewId) => {\n        const restParams = omit(params, 'view')\n        return setParams(viewId ? {...restParams, view: viewId} : restParams)\n      },\n\n      // Set the parameters for the current pane\n      setParams,\n\n      // Set the payload for the current pane\n      setPayload,\n\n      // A function that returns a path with the given parameters\n      createPathWithParams,\n\n      // Proxied navigation to a given intent. Consider just exposing `router` instead?\n      navigateIntent,\n    }),\n    [\n      flatIndex,\n      groupIndex,\n      siblingIndex,\n      payload,\n      params,\n      routerPaneGroups,\n      handleEditReference,\n      setParams,\n      setPayload,\n      createPathWithParams,\n      navigateIntent,\n      modifyCurrentGroup,\n      lastPane,\n      navigate,\n      expand,\n    ],\n  )\n\n  return <PaneRouterContext.Provider value={ctx}>{children}</PaneRouterContext.Provider>\n}\n","import {type RouterPaneSiblingContext} from '../types'\n\nexport interface PaneResolutionErrorOptions {\n  message: string\n  context?: RouterPaneSiblingContext\n  helpId?: string\n  cause?: Error\n}\n\n/**\n * An error thrown during pane resolving. This error is meant to be bubbled up\n * through react and handled in an error boundary. It includes a `cause`\n * property which is the original error caught\n */\nexport class PaneResolutionError extends Error {\n  cause: Error | undefined\n  context: RouterPaneSiblingContext | undefined\n  helpId: string | undefined\n\n  constructor({message, context, helpId, cause}: PaneResolutionErrorOptions) {\n    super(message)\n    this.name = 'PaneResolutionError'\n    this.context = context\n    this.helpId = helpId\n    this.cause = cause\n  }\n}\n","import {nanoid} from 'nanoid'\n\n// `WeakMap`s require the first type param to extend `object`\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst randomIdCache = new WeakMap<object, string>()\n\n/**\n * given an object, this function randomly generates an ID and returns it. this\n * result is then saved in a WeakMap so subsequent requests for the same object\n * will receive the same ID\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function assignId(obj: object): string {\n  const cachedValue = randomIdCache.get(obj)\n  if (cachedValue) return cachedValue\n\n  const id = nanoid()\n  randomIdCache.set(obj, id)\n  return id\n}\n","import {from, isObservable, type Observable, of as observableOf} from 'rxjs'\nimport {publishReplay, refCount, switchMap} from 'rxjs/operators'\nimport {isRecord} from 'sanity'\n\nimport {type PaneNode, type RouterPaneSiblingContext, type UnresolvedPaneNode} from '../types'\nimport {PaneResolutionError} from './PaneResolutionError'\n\ninterface Serializable {\n  serialize: (...args: never[]) => unknown\n}\n\nconst isPromise = (thing: any): thing is PromiseLike<unknown> => {\n  return !!thing && typeof thing?.then === 'function'\n}\nconst isSerializable = (thing: unknown): thing is Serializable => {\n  if (!isRecord(thing)) return false\n  return typeof thing.serialize === 'function'\n}\n\n/**\n * The signature of the function used to take an `UnresolvedPaneNode` and turn\n * it into an `Observable<PaneNode>`.\n */\nexport type PaneResolver = (\n  unresolvedPane: UnresolvedPaneNode | undefined,\n  context: RouterPaneSiblingContext,\n  flatIndex: number,\n) => Observable<PaneNode>\n\nexport type PaneResolverMiddleware = (paneResolveFn: PaneResolver) => PaneResolver\n\nconst rethrowWithPaneResolutionErrors: PaneResolverMiddleware =\n  (next) => (unresolvedPane, context, flatIndex) => {\n    try {\n      return next(unresolvedPane, context, flatIndex)\n    } catch (e) {\n      // re-throw errors that are already `PaneResolutionError`s\n      if (e instanceof PaneResolutionError) {\n        throw e\n      }\n\n      // anything else, wrap with `PaneResolutionError` and set the underlying\n      // error as a the `cause`\n      throw new PaneResolutionError({\n        message: typeof e?.message === 'string' ? e.message : '',\n        context,\n        cause: e,\n      })\n    }\n  }\n\nconst wrapWithPublishReplay: PaneResolverMiddleware =\n  (next) =>\n  (...args) => {\n    return next(...args).pipe(\n      // need to add publishReplay + refCount to ensure new subscribers always\n      // get an emission. without this, memoized observables may get stuck\n      // waiting for their first emissions resulting in a loading pane\n      publishReplay(1),\n      refCount(),\n    )\n  }\n\nexport function createPaneResolver(middleware: PaneResolverMiddleware): PaneResolver {\n  // note: this API includes a middleware/wrapper function because the function\n  // is recursive. we want to call the wrapped version of the function always\n  // (even inside of nested calls) so the identifier invoked for the recursion\n  // should be the wrapped version\n  const resolvePane = rethrowWithPaneResolutionErrors(\n    wrapWithPublishReplay(\n      middleware((unresolvedPane, context, flatIndex) => {\n        if (!unresolvedPane) {\n          throw new PaneResolutionError({\n            message: 'Pane returned no child',\n            context,\n            helpId: 'structure-item-returned-no-child',\n          })\n        }\n\n        if (isPromise(unresolvedPane) || isObservable(unresolvedPane)) {\n          return from(unresolvedPane).pipe(\n            switchMap((result) => resolvePane(result, context, flatIndex)),\n          )\n        }\n\n        if (isSerializable(unresolvedPane)) {\n          return resolvePane(unresolvedPane.serialize(context), context, flatIndex)\n        }\n\n        if (typeof unresolvedPane === 'function') {\n          return resolvePane(unresolvedPane(context.id, context), context, flatIndex)\n        }\n\n        return observableOf(unresolvedPane)\n      }),\n    ),\n  )\n\n  return resolvePane\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n\n// `WeakMap`s require the first type param to extend `object`\nconst bindCache = new WeakMap<object, Map<string, Function>>()\n\n/**\n * An alternative to `obj.method.bind(obj)` that utilizes a weakmap to return\n * the same memory reference for sequent binds.\n */\nexport function memoBind<\n  T extends object,\n  K extends keyof {[P in keyof T]: T[P] extends Function ? T[P] : never},\n>(obj: T, methodKey: K): T[K]\nexport function memoBind(obj: Record<string, unknown>, methodKey: string): Function {\n  const boundMethods = bindCache.get(obj) || new Map<string, Function>()\n  if (boundMethods) {\n    const bound = boundMethods.get(methodKey)\n    if (bound) return bound\n  }\n\n  const method = obj[methodKey]\n\n  if (typeof method !== 'function') {\n    throw new Error(\n      `Expected property \\`${methodKey}\\` to be a function but got ${typeof method} instead.`,\n    )\n  }\n\n  const bound = method.bind(obj)\n  boundMethods.set(methodKey, bound)\n  bindCache.set(obj, boundMethods)\n\n  return bound\n}\n","import {omit} from 'lodash'\nimport {firstValueFrom, type Observable} from 'rxjs'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type PaneNode,\n  type RouterPanes,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {createPaneResolver, type PaneResolverMiddleware} from './createPaneResolver'\nimport {memoBind} from './memoBind'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await firstValueFrom(resolvePane(unresolvedPane, context, flatIndex))\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          }),\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {isEqual} from 'lodash'\nimport {concat, NEVER, type Observable, of as observableOf} from 'rxjs'\nimport {distinctUntilChanged, map, pairwise, scan, startWith, switchMap} from 'rxjs/operators'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type DocumentPaneNode,\n  type PaneNode,\n  type PaneNodeResolver,\n  type RouterPanes,\n  type RouterPaneSibling,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {\n  createPaneResolver,\n  type PaneResolver,\n  type PaneResolverMiddleware,\n} from './createPaneResolver'\nimport {memoBind} from './memoBind'\nimport {PaneResolutionError} from './PaneResolutionError'\n\n/**\n * the fallback editor child that is implicitly inserted into the structure tree\n * if the id starts with `__edit__`\n */\nconst fallbackEditorChild: PaneNodeResolver = (nodeId, context): DocumentPaneNode => {\n  const id = nodeId.replace(/^__edit__/, '')\n  const {\n    params,\n    payload,\n    structureContext: {resolveDocumentNode},\n  } = context\n  const {type, template} = params\n\n  if (!type) {\n    throw new Error(\n      `Document type for document with ID ${id} was not provided in the router params.`,\n    )\n  }\n\n  let defaultDocumentBuilder = resolveDocumentNode({schemaType: type, documentId: id}).id('editor')\n\n  if (template) {\n    defaultDocumentBuilder = defaultDocumentBuilder.initialValueTemplate(\n      template,\n      payload as {[key: string]: unknown},\n    )\n  }\n\n  return defaultDocumentBuilder.serialize() as DocumentPaneNode\n}\n\n/**\n * takes in a `RouterPaneSiblingContext` and returns a normalized string\n * representation that can be used for comparisons\n */\nfunction hashContext(context: RouterPaneSiblingContext): string {\n  return `contextHash(${JSON.stringify({\n    id: context.id,\n    parentId: parent && assignId(parent),\n    path: context.path,\n    index: context.index,\n    splitIndex: context.splitIndex,\n    serializeOptionsIndex: context.serializeOptions?.index,\n    serializeOptionsPath: context.serializeOptions?.path,\n  })})`\n}\n\n/**\n * takes in `ResolvedPaneMeta` and returns a normalized string representation\n * that can be used for comparisons\n */\nconst hashResolvedPaneMeta = (meta: ResolvedPaneMeta): string => {\n  const normalized = {\n    type: meta.type,\n    id: meta.routerPaneSibling.id,\n    params: meta.routerPaneSibling.params || {},\n    payload: meta.routerPaneSibling.payload || null,\n    flatIndex: meta.flatIndex,\n    groupIndex: meta.groupIndex,\n    siblingIndex: meta.siblingIndex,\n    path: meta.path,\n    paneNode: meta.type === 'resolvedMeta' ? assignId(meta.paneNode) : null,\n  }\n\n  return `metaHash(${JSON.stringify(normalized)})`\n}\n\n/**\n * Represents one flattened \"router pane\", including the source group and\n * sibling indexes.\n *\n * @see RouterPanes\n */\ninterface FlattenedRouterPane {\n  routerPaneSibling: RouterPaneSibling\n  flatIndex: number\n  groupIndex: number\n  siblingIndex: number\n}\n\n/**\n * The state of the accumulator used to store and manage memo cache state\n */\ninterface CacheState {\n  /**\n   * Holds the memoization results keyed by a combination of `assignId` and a\n   * context hash.\n   */\n  resolvedPaneCache: Map<string, Observable<PaneNode>>\n  /**\n   * Acts as a dictionary that stores cache keys by their flat index. This is\n   * used to clean up the cache between different branches in the pane\n   * structure.\n   *\n   * @see createResolvedPaneNodeStream look inside the `scan` where `wrapFn` is\n   * defined\n   */\n  cacheKeysByFlatIndex: Array<Set<string>>\n  /**\n   * The resulting memoized `PaneResolver` function. This function closes over\n   * the `resolvedPaneCache`.\n   */\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n}\n\nexport interface CreateResolvedPaneNodeStreamOptions {\n  /**\n   * an input stream of `RouterPanes`\n   * @see RouterPanes\n   */\n  routerPanesStream: Observable<RouterPanes>\n  /**\n   * any `UnresolvedPaneNode` (could be an observable, promise, pane resolver etc)\n   */\n  rootPaneNode: UnresolvedPaneNode\n  /** used primarily for testing */\n  initialCacheState?: CacheState\n\n  structureContext: StructureContext\n}\n\n/**\n * The result of pane resolving\n */\nexport type ResolvedPaneMeta = {\n  groupIndex: number\n  siblingIndex: number\n  flatIndex: number\n  routerPaneSibling: RouterPaneSibling\n  path: string[]\n} & ({type: 'loading'; paneNode: null} | {type: 'resolvedMeta'; paneNode: PaneNode})\n\ninterface ResolvePaneTreeOptions {\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n  unresolvedPane: UnresolvedPaneNode | undefined\n  parent: PaneNode | null\n  path: string[]\n  structureContext: StructureContext\n}\n\n/**\n * A recursive pane resolving function. Starts at one unresolved pane node and\n * continues until there is no more flattened router panes that can be used as\n * input to the unresolved panes.\n */\nfunction resolvePaneTree({\n  unresolvedPane,\n  flattenedRouterPanes,\n  parent,\n  path,\n  resolvePane,\n  structureContext,\n}: ResolvePaneTreeOptions): Observable<ResolvedPaneMeta[]> {\n  const [current, ...rest] = flattenedRouterPanes\n  const next = rest[0] as FlattenedRouterPane | undefined\n\n  const context: RouterPaneSiblingContext = {\n    id: current.routerPaneSibling.id,\n    splitIndex: current.siblingIndex,\n    parent,\n    path: [...path, current.routerPaneSibling.id],\n    index: current.flatIndex,\n    params: current.routerPaneSibling.params || {},\n    payload: current.routerPaneSibling.payload,\n    structureContext,\n  }\n\n  try {\n    return resolvePane(unresolvedPane, context, current.flatIndex).pipe(\n      // this switch map receives a resolved pane\n      switchMap((paneNode) => {\n        // we can create a `resolvedMeta` type using it\n        const resolvedPaneMeta: ResolvedPaneMeta = {\n          type: 'resolvedMeta',\n          ...current,\n          paneNode: paneNode,\n          path: context.path,\n        }\n\n        // for the other unresolved panes, we can create \"loading panes\"\n        const loadingPanes = rest.map((i, restIndex) => {\n          const loadingPanePath = [\n            ...context.path,\n            ...rest.slice(restIndex).map((_, currentIndex) => `[${i.flatIndex + currentIndex}]`),\n          ]\n\n          const loadingPane: ResolvedPaneMeta = {\n            type: 'loading',\n            path: loadingPanePath,\n            paneNode: null,\n            ...i,\n          }\n\n          return loadingPane\n        })\n\n        if (!rest.length) {\n          return observableOf([resolvedPaneMeta])\n        }\n\n        let nextStream\n\n        if (\n          // the fallback editor case\n          next?.routerPaneSibling.id.startsWith('__edit__')\n        ) {\n          nextStream = resolvePaneTree({\n            unresolvedPane: fallbackEditorChild,\n            flattenedRouterPanes: rest,\n            parent,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        } else if (current.groupIndex === next?.groupIndex) {\n          // if the next flattened router pane has the same group index as the\n          // current flattened router pane, then the next flattened router pane\n          // belongs to the same group (i.e. it is a split pane)\n          nextStream = resolvePaneTree({\n            unresolvedPane,\n            flattenedRouterPanes: rest,\n            parent,\n            path,\n            resolvePane,\n            structureContext,\n          })\n        } else {\n          // normal children resolving\n          nextStream = resolvePaneTree({\n            unresolvedPane:\n              typeof paneNode.child === 'function'\n                ? (memoBind(paneNode, 'child') as PaneNodeResolver)\n                : paneNode.child,\n            flattenedRouterPanes: rest,\n            parent: paneNode,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        }\n\n        return concat(\n          // we emit the loading panes first in a concat (this emits immediately)\n          observableOf([resolvedPaneMeta, ...loadingPanes]),\n          // then whenever the next stream is done, the results will be combined.\n          nextStream.pipe(map((nextResolvedPanes) => [resolvedPaneMeta, ...nextResolvedPanes])),\n        )\n      }),\n    )\n  } catch (e) {\n    if (e instanceof PaneResolutionError) {\n      if (e.context) {\n        console.warn(\n          `Pane resolution error at index ${e.context.index}${\n            e.context.splitIndex > 0 ? ` for split pane index ${e.context.splitIndex}` : ''\n          }: ${e.message}${e.helpId ? ` - see ${generateHelpUrl(e.helpId)}` : ''}`,\n          e,\n        )\n      }\n\n      if (e.helpId === 'structure-item-returned-no-child') {\n        // returning an observable of an empty array will remove loading panes\n        // note: this one intentionally does not throw\n        return observableOf([])\n      }\n    }\n\n    throw e\n  }\n}\n\n/**\n * Takes in a stream of `RouterPanes` and an unresolved root pane and returns\n * a stream of `ResolvedPaneMeta`\n */\nexport function createResolvedPaneNodeStream({\n  routerPanesStream,\n  rootPaneNode,\n  initialCacheState = {\n    cacheKeysByFlatIndex: [],\n    flattenedRouterPanes: [],\n    resolvedPaneCache: new Map(),\n    resolvePane: () => NEVER,\n  },\n  structureContext,\n}: CreateResolvedPaneNodeStreamOptions): Observable<ResolvedPaneMeta[]> {\n  const resolvedPanes$ = routerPanesStream.pipe(\n    // add in implicit \"root\" router pane\n    map((rawRouterPanes) => [[{id: 'root'}], ...rawRouterPanes]),\n    // create flattened router panes\n    map((routerPanes) => {\n      const flattenedRouterPanes: FlattenedRouterPane[] = routerPanes\n        .flatMap((routerPaneGroup, groupIndex) =>\n          routerPaneGroup.map((routerPaneSibling, siblingIndex) => ({\n            routerPaneSibling,\n            groupIndex,\n            siblingIndex,\n          })),\n        )\n        // add in the flat index\n        .map((i, index) => ({...i, flatIndex: index}))\n\n      return flattenedRouterPanes\n    }),\n    // calculate a \"diffIndex\" used for clearing the memo cache\n    startWith([] as FlattenedRouterPane[]),\n    pairwise(),\n    map(([prev, curr]) => {\n      for (let i = 0; i < curr.length; i++) {\n        const prevValue = prev[i]\n        const currValue = curr[i]\n\n        if (!isEqual(prevValue, currValue)) {\n          return {\n            flattenedRouterPanes: curr,\n            diffIndex: i,\n          }\n        }\n      }\n\n      return {\n        flattenedRouterPanes: curr,\n        diffIndex: curr.length,\n      }\n    }),\n    // create the memoized `resolvePane` function and manage the memo cache\n    scan((acc, next) => {\n      const {cacheKeysByFlatIndex, resolvedPaneCache} = acc\n      const {flattenedRouterPanes, diffIndex} = next\n\n      // use the `cacheKeysByFlatIndex` like a dictionary to find cache keys to\n      // and cache keys to delete\n      const beforeDiffIndex = cacheKeysByFlatIndex.slice(0, diffIndex + 1)\n      const afterDiffIndex = cacheKeysByFlatIndex.slice(diffIndex + 1)\n\n      const keysToKeep = new Set(beforeDiffIndex.flatMap((keySet) => Array.from(keySet)))\n      const keysToDelete = afterDiffIndex\n        .flatMap((keySet) => Array.from(keySet))\n        .filter((key) => !keysToKeep.has(key))\n\n      for (const key of keysToDelete) {\n        resolvedPaneCache.delete(key)\n      }\n\n      // create a memoizing pane resolver middleware that utilizes the cache\n      // maintained above. this keeps the cache from growing indefinitely\n      const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n        const key = unresolvedPane && `${assignId(unresolvedPane)}-${hashContext(context)}`\n        const cachedResolvedPane = key && resolvedPaneCache.get(key)\n        if (cachedResolvedPane) return cachedResolvedPane\n\n        const result = nextFn(unresolvedPane, context, flatIndex)\n        if (!key) return result\n\n        const cacheKeySet = cacheKeysByFlatIndex[flatIndex] || new Set()\n        cacheKeySet.add(key)\n        cacheKeysByFlatIndex[flatIndex] = cacheKeySet\n        resolvedPaneCache.set(key, result)\n        return result\n      }\n\n      return {\n        flattenedRouterPanes,\n        cacheKeysByFlatIndex,\n        resolvedPaneCache,\n        resolvePane: createPaneResolver(memoize),\n      }\n    }, initialCacheState),\n    // run the memoized, recursive resolving\n    switchMap(({flattenedRouterPanes, resolvePane}) =>\n      resolvePaneTree({\n        unresolvedPane: rootPaneNode,\n        flattenedRouterPanes,\n        parent: null,\n        path: [],\n        resolvePane,\n        structureContext,\n      }),\n    ),\n  )\n\n  // after we've created a stream of `ResolvedPaneMeta[]`, we need to clean up\n  // the results to remove unwanted loading panes and prevent unnecessary\n  // emissions\n  return resolvedPanes$.pipe(\n    // this diffs the previous emission with the current one. if there is a new\n    // loading pane at the same position where a previous pane already had a\n    // resolved value (looking at the IDs to compare), then return the previous\n    // pane instead of the loading pane\n    scan(\n      (prev, next) =>\n        next.map((nextPane, index) => {\n          const prevPane = prev[index] as ResolvedPaneMeta | undefined\n          if (!prevPane) return nextPane\n          if (nextPane.type !== 'loading') return nextPane\n\n          if (prevPane.routerPaneSibling.id === nextPane.routerPaneSibling.id) {\n            return prevPane\n          }\n          return nextPane\n        }),\n      [] as ResolvedPaneMeta[],\n    ),\n    // this prevents duplicate emissions\n    distinctUntilChanged((prev, next) => {\n      if (prev.length !== next.length) return false\n\n      for (let i = 0; i < next.length; i++) {\n        const prevValue = prev[i]\n        const nextValue = next[i]\n        if (hashResolvedPaneMeta(prevValue) !== hashResolvedPaneMeta(nextValue)) {\n          return false\n        }\n      }\n\n      return true\n    }),\n  )\n}\n","import {useEffect, useMemo, useState} from 'react'\nimport {ReplaySubject} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {type RouterState, useRouter} from 'sanity/router'\n\nimport {LOADING_PANE} from '../constants'\nimport {type PaneNode, type RouterPaneGroup, type RouterPanes} from '../types'\nimport {useStructureTool} from '../useStructureTool'\nimport {createResolvedPaneNodeStream} from './createResolvedPaneNodeStream'\n\ninterface PaneData {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  key: string\n  pane: PaneNode | typeof LOADING_PANE\n  params: Record<string, string | undefined>\n  path: string\n  payload: unknown\n  selected: boolean\n  siblingIndex: number\n}\n\nexport interface Panes {\n  paneDataItems: PaneData[]\n  routerPanes: RouterPanes\n  resolvedPanes: (PaneNode | typeof LOADING_PANE)[]\n}\n\nfunction useRouterPanesStream() {\n  const routerStateSubject = useMemo(() => new ReplaySubject<RouterState>(1), [])\n  const routerPanes$ = useMemo(\n    () =>\n      routerStateSubject\n        .asObservable()\n        .pipe(map((_routerState) => (_routerState?.panes || []) as RouterPanes)),\n    [routerStateSubject],\n  )\n  const {state: routerState} = useRouter()\n  useEffect(() => {\n    routerStateSubject.next(routerState)\n  }, [routerState, routerStateSubject])\n\n  return routerPanes$\n}\n\nexport function useResolvedPanes(): Panes {\n  // used to propagate errors from async effect. throwing inside of the render\n  // will bubble the error to react where it can be picked up by standard error\n  // boundaries\n  const [error, setError] = useState<unknown>()\n  if (error) throw error\n\n  const {structureContext, rootPaneNode} = useStructureTool()\n\n  const [data, setData] = useState<Panes>({\n    paneDataItems: [],\n    resolvedPanes: [],\n    routerPanes: [],\n  })\n\n  const routerPanesStream = useRouterPanesStream()\n\n  useEffect(() => {\n    const resolvedPanes$ = createResolvedPaneNodeStream({\n      rootPaneNode,\n      routerPanesStream,\n      structureContext,\n    }).pipe(\n      map((resolvedPanes) => {\n        const routerPanes = resolvedPanes.reduce<RouterPanes>((acc, next) => {\n          const currentGroup = acc[next.groupIndex] || []\n          currentGroup[next.siblingIndex] = next.routerPaneSibling\n          acc[next.groupIndex] = currentGroup\n          return acc\n        }, [])\n\n        const groupsLen = routerPanes.length\n\n        const paneDataItems = resolvedPanes.map((pane) => {\n          const {groupIndex, flatIndex, siblingIndex, routerPaneSibling, path} = pane\n          const itemId = routerPaneSibling.id\n          const nextGroup = routerPanes[groupIndex + 1] as RouterPaneGroup | undefined\n\n          const paneDataItem: PaneData = {\n            active: groupIndex === groupsLen - 2,\n            childItemId: nextGroup?.[0].id ?? null,\n            index: flatIndex,\n            itemId: routerPaneSibling.id,\n            groupIndex,\n            key: `${\n              pane.type === 'loading' ? 'unknown' : pane.paneNode.id\n            }-${itemId}-${siblingIndex}`,\n            pane: pane.type === 'loading' ? LOADING_PANE : pane.paneNode,\n            params: routerPaneSibling.params || {},\n            path: path.join(';'),\n            payload: routerPaneSibling.payload,\n            selected: flatIndex === resolvedPanes.length - 1,\n            siblingIndex,\n          }\n\n          return paneDataItem\n        })\n\n        return {\n          paneDataItems,\n          routerPanes,\n          resolvedPanes: paneDataItems.map((pane) => pane.pane),\n        }\n      }),\n    )\n\n    const subscription = resolvedPanes$.subscribe({\n      next: (result) => setData(result),\n      error: (e) => setError(e),\n    })\n\n    return () => subscription.unsubscribe()\n  }, [rootPaneNode, routerPanesStream, structureContext])\n\n  return data\n}\n","import {uuid} from '@sanity/uuid'\nimport {firstValueFrom, type Observable} from 'rxjs'\nimport {type DocumentStore, getPublishedId} from 'sanity'\n\nimport {PaneResolutionError} from '../../../structureResolvers'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId,\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined,\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await firstValueFrom(\n      documentStore.resolveTypeForDocument(id) as Observable<string>,\n    )\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n","import {memo, useCallback, useEffect, useState} from 'react'\nimport {isRecord, useDocumentStore} from 'sanity'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {resolveIntent} from '../../../structureResolvers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {ensureDocumentIdAndType} from './utils'\n\nconst EMPTY_RECORD: Record<string, unknown> = {}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport const IntentResolver = memo(function IntentResolver() {\n  const {navigate} = useRouter()\n  const maybeIntent = useRouterState(\n    useCallback((routerState) => {\n      const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n      return intentName\n        ? {\n            intent: intentName,\n            params: isRecord(routerState.params) ? routerState.params : EMPTY_RECORD,\n            payload: routerState.payload,\n          }\n        : undefined\n    }, []),\n  )\n  const {rootPaneNode, structureContext} = useStructureTool()\n  const documentStore = useDocumentStore()\n  const [error, setError] = useState<unknown>(null)\n\n  // this re-throws errors so that parent ErrorBoundary's can handle them properly\n  if (error) throw error\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (maybeIntent) {\n      const {intent, params, payload} = maybeIntent\n\n      let cancelled = false\n      // eslint-disable-next-line no-inner-declarations\n      async function effect() {\n        const {id, type} = await ensureDocumentIdAndType(\n          documentStore,\n          typeof params.id === 'string' ? params.id : undefined,\n          typeof params.type === 'string' ? params.type : undefined,\n        )\n\n        if (cancelled) return\n\n        const panes = await resolveIntent({\n          intent,\n          params: {...params, id, type},\n          payload,\n          rootPaneNode,\n          structureContext,\n        })\n\n        if (cancelled) return\n\n        navigate({panes}, {replace: true})\n      }\n\n      effect().catch(setError)\n\n      return () => {\n        cancelled = true\n      }\n    }\n  }, [documentStore, maybeIntent, navigate, rootPaneNode, structureContext])\n\n  return null\n})\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {SyncIcon} from '@sanity/icons'\nimport {Box, Card, Code, Container, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {SerializeError} from '../../structureBuilder'\nimport {PaneResolutionError} from '../../structureResolvers'\n\nconst PathSegment = styled.span`\n  &:not(:last-child)::after {\n    content: ' ➝ ';\n    opacity: 0.5;\n  }\n`\n\nfunction formatStack(stack: string) {\n  return (\n    stack\n      // Prettify builder functions\n      .replace(/\\(\\.\\.\\.\\)\\./g, '(...)\\n  .')\n      // Remove webpack cruft from function names\n      .replace(/__WEBPACK_IMPORTED_MODULE_\\d+_+/g, '')\n      // Remove default export postfix from function names\n      .replace(/___default\\./g, '.')\n      // Replace full host path, leave only path to JS-file\n      .replace(new RegExp(` \\\\(https?:\\\\/\\\\/${window.location.host}`, 'g'), ' (')\n  )\n}\n\ninterface StructureErrorProps {\n  error: unknown\n}\n\nexport function StructureError({error}: StructureErrorProps) {\n  if (!(error instanceof PaneResolutionError)) {\n    throw error\n  }\n  const {cause} = error\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  // Serialize errors are well-formatted and should be readable, in these cases a stack trace is\n  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage\n  // instead of an actual error message, so make sure we show the message in these cases as well\n  const stack = cause?.stack || error.stack\n  const showStack =\n    stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:')\n\n  const path = cause instanceof SerializeError ? cause.path : []\n  const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId\n\n  const handleReload = useCallback(() => {\n    window.location.reload()\n  }, [])\n\n  return (\n    <Card height=\"fill\" overflow=\"auto\" padding={4} sizing=\"border\" tone=\"critical\">\n      <Container>\n        <Heading as=\"h2\">{t('structure-error.header.text')}</Heading>\n\n        <Card marginTop={4} padding={4} radius={2} overflow=\"auto\" shadow={1} tone=\"inherit\">\n          {path.length > 0 && (\n            <Stack space={2}>\n              <Text size={1} weight=\"medium\">\n                {t('structure-error.structure-path.label')}\n              </Text>\n              <Code>\n                {/* TODO: it seems like the path is off by one and includes */}\n                {/* `root` twice  */}\n                {path.slice(1).map((segment, i) => (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <PathSegment key={`${segment}-${i}`}>{segment}</PathSegment>\n                ))}\n              </Code>\n            </Stack>\n          )}\n\n          <Stack marginTop={4} space={2}>\n            <Text size={1} weight=\"medium\">\n              {t('structure-error.error.label')}\n            </Text>\n            <Code>{showStack ? formatStack(stack) : error.message}</Code>\n          </Stack>\n\n          {helpId && (\n            <Box marginTop={4}>\n              <Text>\n                <a href={generateHelpUrl(helpId)} rel=\"noopener noreferrer\" target=\"_blank\">\n                  {t('structure-error.docs-link.text')}\n                </a>\n              </Text>\n            </Box>\n          )}\n\n          <Box marginTop={4}>\n            <Button\n              text={t('structure-error.reload-button.text')}\n              icon={SyncIcon}\n              tone=\"primary\"\n              onClick={handleReload}\n            />\n          </Box>\n        </Card>\n      </Container>\n    </Card>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {isRecord, Translate, useTranslation} from 'sanity'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface UnknownPaneProps {\n  isSelected: boolean\n  pane: unknown\n  paneKey: string\n}\n\n/**\n * @internal\n */\nexport function UnknownPane(props: UnknownPaneProps) {\n  const {isSelected, pane, paneKey} = props\n  const type = (isRecord(pane) && pane.type) || null\n  const {t} = useTranslation(structureLocaleNamespace)\n  return (\n    <Pane id={paneKey} selected={isSelected}>\n      <PaneHeader title={t('panes.unknown-pane-type.title')} />\n      <PaneContent>\n        <Box padding={4}>\n          {typeof type === 'string' ? (\n            <Text as=\"p\" muted>\n              <Translate\n                t={t}\n                i18nKey=\"panes.unknown-pane-type.unknown-type.text\"\n                values={{type}}\n              />\n            </Text>\n          ) : (\n            <Text as=\"p\" muted>\n              <Translate t={t} i18nKey=\"panes.unknown-pane-type.missing-type.text\" />\n            </Text>\n          )}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {isEqual} from 'lodash'\nimport {lazy, memo, Suspense} from 'react'\n\nimport {PaneRouterProvider} from '../components/paneRouter'\nimport {type PaneNode} from '../types'\nimport {LoadingPane} from './loading'\nimport {UnknownPane} from './unknown'\n\ninterface StructureToolPaneProps {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  pane: PaneNode\n  paneKey: string\n  params: Record<string, string | undefined>\n  payload: unknown\n  path: string\n  selected: boolean\n  siblingIndex: number\n}\n\n// TODO: audit this creates separate chunks\nconst paneMap = {\n  component: lazy(() => import('./userComponent')),\n  document: lazy(() => import('./document/pane')),\n  documentList: lazy(() => import('./documentList/pane')),\n  list: lazy(() => import('./list')),\n}\n\n/**\n * NOTE: The same pane might appear multiple times (split pane), so use index as tiebreaker\n *\n * @internal\n */\nexport const StructureToolPane = memo(\n  function StructureToolPane(props: StructureToolPaneProps) {\n    const {\n      active,\n      childItemId,\n      groupIndex,\n      index,\n      itemId,\n      pane,\n      paneKey,\n      params,\n      payload,\n      path,\n      selected,\n      siblingIndex,\n    } = props\n\n    const PaneComponent = paneMap[pane.type] || UnknownPane\n\n    return (\n      <PaneRouterProvider\n        flatIndex={index}\n        index={groupIndex}\n        params={params}\n        payload={payload}\n        siblingIndex={siblingIndex}\n      >\n        <Suspense fallback={<LoadingPane paneKey={paneKey} path={path} selected={selected} />}>\n          <PaneComponent\n            childItemId={childItemId || ''}\n            index={index}\n            itemId={itemId}\n            isActive={active}\n            isSelected={selected}\n            paneKey={paneKey}\n            // @ts-expect-error TS doesn't know how to handle this intersection\n            pane={pane}\n          />\n        </Suspense>\n      </PaneRouterProvider>\n    )\n  },\n  (\n    {params: prevParams = {}, payload: prevPayload = null, ...prev},\n    {params: nextParams = {}, payload: nextPayload = null, ...next},\n  ) => {\n    // deeply compare these objects (it's okay, they're small)\n    if (!isEqual(prevParams, nextParams)) return false\n    if (!isEqual(prevPayload, nextPayload)) return false\n\n    const keys = new Set([...Object.keys(prev), ...Object.keys(next)]) as Set<\n      keyof typeof next | keyof typeof prev\n    >\n\n    // then shallow equal the rest\n    for (const key of keys) {\n      if (prev[key] !== next[key]) return false\n    }\n\n    return true\n  },\n)\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Container, Flex, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport function NoDocumentTypesScreen() {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Card height=\"fill\">\n      <Flex align=\"center\" height=\"fill\" justify=\"center\" padding={4} sizing=\"border\">\n        <Container width={0}>\n          <Card padding={4} radius={2} shadow={1} tone=\"caution\">\n            <Flex>\n              <Box>\n                <Text size={1}>\n                  <WarningOutlineIcon />\n                </Text>\n              </Box>\n              <Stack flex={1} marginLeft={3} space={3}>\n                <Text as=\"h1\" size={1} weight=\"medium\">\n                  {t('no-document-types-screen.title')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  {t('no-document-types-screen.subtitle')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  <a\n                    href=\"https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {t('no-document-types-screen.link-text')}\n                  </a>\n                </Text>\n              </Stack>\n            </Flex>\n          </Card>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {useEffect} from 'react'\nimport {\n  unstable_useValuePreview as useValuePreview,\n  useEditState,\n  useSchema,\n  useTranslation,\n} from 'sanity'\n\nimport {LOADING_PANE} from '../../constants'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type Panes} from '../../structureResolvers'\nimport {type DocumentPaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface StructureTitleProps {\n  resolvedPanes: Panes['resolvedPanes']\n}\n\nconst DocumentTitle = (props: {documentId: string; documentType: string}) => {\n  const {documentId, documentType} = props\n  const editState = useEditState(documentId, documentType)\n  const schema = useSchema()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isNewDocument = !editState?.published && !editState?.draft\n  const documentValue = editState?.draft || editState?.published\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n\n  const {value, isLoading: previewValueIsLoading} = useValuePreview({\n    enabled: true,\n    schemaType,\n    value: documentValue,\n  })\n\n  const documentTitle = isNewDocument\n    ? t('browser-document-title.new-document', {\n        schemaType: schemaType?.title || schemaType?.name,\n      })\n    : value?.title || t('browser-document-title.untitled-document')\n\n  const settled = editState.ready && !previewValueIsLoading\n  const newTitle = useConstructDocumentTitle(documentTitle)\n  useEffect(() => {\n    if (!settled) return\n    // Set the title as the document title\n    document.title = newTitle\n  }, [documentTitle, settled, newTitle])\n\n  return null\n}\n\nconst PassthroughTitle = (props: {title?: string}) => {\n  const {title} = props\n  const newTitle = useConstructDocumentTitle(title)\n  useEffect(() => {\n    // Set the title as the document title\n    document.title = newTitle\n  }, [newTitle, title])\n  return null\n}\n\nexport const StructureTitle = (props: StructureTitleProps) => {\n  const {resolvedPanes} = props\n\n  if (!resolvedPanes?.length) return null\n\n  const lastPane = resolvedPanes[resolvedPanes.length - 1]\n\n  // If the last pane is loading, display the structure tool title only\n  if (isLoadingPane(lastPane)) {\n    return <PassthroughTitle />\n  }\n\n  // If the last pane is a document\n  if (isDocumentPane(lastPane)) {\n    // Passthrough the document pane's title, which may be defined in structure builder\n    if (lastPane?.title) {\n      return <PassthroughTitle title={lastPane.title} />\n    }\n\n    // Otherwise, display a `document.title` containing the resolved Sanity document title\n    return <DocumentTitle documentId={lastPane.options.id} documentType={lastPane.options.type} />\n  }\n\n  // Otherwise, display the last pane's title (if present)\n  return <PassthroughTitle title={lastPane?.title} />\n}\n\n/**\n * Construct a pipe delimited title containing `activeTitle` (if applicable) and the base structure title.\n *\n * @param activeTitle - Title of the first segment\n *\n * @returns A pipe delimited title in the format `${activeTitle} | %BASE_STRUCTURE_TITLE%`\n * or simply `%BASE_STRUCTURE_TITLE` if `activeTitle` is undefined.\n */\nfunction useConstructDocumentTitle(activeTitle?: string) {\n  const structureToolBaseTitle = useStructureTool().structureContext.title\n  return [activeTitle, structureToolBaseTitle].filter((title) => title).join(' | ')\n}\n\n// Type guards\nfunction isDocumentPane(pane: Panes['resolvedPanes'][number]): pane is DocumentPaneNode {\n  return pane !== LOADING_PANE && pane.type === 'document'\n}\n\nfunction isLoadingPane(pane: Panes['resolvedPanes'][number]): pane is typeof LOADING_PANE {\n  return pane === LOADING_PANE\n}\n","import {PortalProvider, useTheme, useToast} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {Fragment, memo, useCallback, useEffect, useState} from 'react'\nimport {_isCustomDocumentTypeDefinition, useSchema} from 'sanity'\nimport {useRouterState} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {LOADING_PANE} from '../../constants'\nimport {LoadingPane, StructureToolPane} from '../../panes'\nimport {useResolvedPanes} from '../../structureResolvers'\nimport {type PaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {PaneLayout} from '../pane'\nimport {NoDocumentTypesScreen} from './NoDocumentTypesScreen'\nimport {StructureTitle} from './StructureTitle'\n\ninterface StructureToolProps {\n  onPaneChange: (panes: Array<PaneNode | typeof LOADING_PANE>) => void\n}\n\nconst StyledPaneLayout = styled(PaneLayout)`\n  min-height: 100%;\n  min-width: 320px;\n`\n\nconst isSaveHotkey = isHotkey('mod+s')\n\n/**\n * @internal\n */\nexport const StructureTool = memo(function StructureTool({onPaneChange}: StructureToolProps) {\n  const {push: pushToast} = useToast()\n  const schema = useSchema()\n  const {layoutCollapsed, setLayoutCollapsed} = useStructureTool()\n  const {paneDataItems, resolvedPanes} = useResolvedPanes()\n  // Intent resolving is processed by the sibling `<IntentResolver />` but it doesn't have a UI for indicating progress.\n  // We handle that here, so if there are only 1 pane (the root structure), and there's an intent state in the router, we need to show a placeholder LoadingPane until\n  // the structure is resolved and we know what panes to load/display\n  const isResolvingIntent = useRouterState(\n    useCallback((routerState) => typeof routerState.intent === 'string', []),\n  )\n  const {\n    sanity: {media},\n  } = useTheme()\n\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n\n  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed])\n  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed])\n\n  useEffect(() => {\n    // we check for length before emitting here to skip the initial empty array\n    // state from the `useResolvedPanes` hook. there should always be a root\n    // pane emitted on subsequent emissions\n    if (resolvedPanes.length) {\n      onPaneChange(resolvedPanes)\n    }\n  }, [onPaneChange, resolvedPanes])\n\n  useEffect(() => {\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      // Prevent `Cmd+S`\n      if (isSaveHotkey(event)) {\n        event.preventDefault()\n\n        pushToast({\n          closable: true,\n          id: 'auto-save-message',\n          status: 'info',\n          title: 'Your work is automatically saved!',\n          duration: 4000,\n        })\n      }\n    }\n\n    window.addEventListener('keydown', handleGlobalKeyDown)\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown)\n  }, [pushToast])\n\n  const hasDefinedDocumentTypes = schema._original?.types.some(_isCustomDocumentTypeDefinition)\n\n  if (!hasDefinedDocumentTypes) {\n    return <NoDocumentTypesScreen />\n  }\n\n  return (\n    <PortalProvider element={portalElement || null}>\n      <StyledPaneLayout\n        flex={1}\n        height={layoutCollapsed ? undefined : 'fill'}\n        minWidth={media[1]}\n        onCollapse={handleRootCollapse}\n        onExpand={handleRootExpand}\n      >\n        {paneDataItems.map(\n          ({\n            active,\n            childItemId,\n            groupIndex,\n            itemId,\n            key: paneKey,\n            pane,\n            index: paneIndex,\n            params: paneParams,\n            path,\n            payload,\n            siblingIndex,\n            selected,\n          }) => (\n            <Fragment key={`${pane === LOADING_PANE ? 'loading' : pane.type}-${paneIndex}`}>\n              {pane === LOADING_PANE ? (\n                <LoadingPane paneKey={paneKey} path={path} selected={selected} />\n              ) : (\n                <StructureToolPane\n                  active={active}\n                  groupIndex={groupIndex}\n                  index={paneIndex}\n                  pane={pane}\n                  childItemId={childItemId}\n                  itemId={itemId}\n                  paneKey={paneKey}\n                  params={paneParams}\n                  payload={payload}\n                  path={path}\n                  selected={selected}\n                  siblingIndex={siblingIndex}\n                />\n              )}\n            </Fragment>\n          ),\n        )}\n        {/* If there's just 1 pane (the root), or less, and we're resolving an intent then it's necessary to show */}\n        {/* a loading indicator as the intent resolving is async, could take a while and can also be interrupted/redirected */}\n        {paneDataItems.length <= 1 && isResolvingIntent && (\n          <LoadingPane paneKey=\"intent-resolver\" />\n        )}\n      </StyledPaneLayout>\n      <StructureTitle resolvedPanes={resolvedPanes} />\n      <div data-portal=\"\" ref={setPortalElement} />\n    </PortalProvider>\n  )\n})\n","import {ErrorBoundary} from '@sanity/ui'\nimport {useEffect, useState} from 'react'\nimport {SourceProvider, type Tool, useWorkspace} from 'sanity'\n\nimport {setActivePanes} from '../../getIntentState'\nimport {StructureToolProvider} from '../../StructureToolProvider'\nimport {type StructureToolOptions} from '../../types'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {StructureTool} from './StructureTool'\n\ninterface StructureToolBoundaryProps {\n  tool: Tool<StructureToolOptions>\n}\n\nexport function StructureToolBoundary({tool: {options}}: StructureToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <StructureToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          <StructureTool onPaneChange={setActivePanes} />\n          <IntentResolver />\n        </StructureToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],"names":["pathToString","observableOf","bound","parent","useValuePreview"],"mappings":";;;;;;;;;;;;;;;;;;AAcA,MAAM,aAAsB,CAAA;AAKrB,SAAS,mBAAmB,OAOhC;AACK,QAAA,EAAC,UAAU,WAAW,OAAO,QAAQ,SAAS,iBAAgB,OAC9D,EAAC,UAAU,gBAAgB,qBAAwB,IAAA,UACnD,GAAA,cAAc,kBACd,EAAC,OAAO,WAAU,iBAClB,mBAAsC;AAAA,IAC1C,OAAO,2CAAa,UAAS;AAAA,IAC7B,CAAC,2CAAa,KAAK;AAAA,EAAA,GAEf,WAAW,QAAQ,MAAM,+BAAQ,MAAM,SAAS,CAAI,GAAA,CAAC,KAAK,CAAC,GAE3D,aAAa,QAAQ,GAErB,wBAAwB;AAAA,IAC5B,CAAC,aAAsF;AACrF,YAAM,eAAe,iBAAiB,UAAU,KAAK,CAAA,GAC/C,cAAc,aAAa,YAAY,GACvC,YAAY,SAAS,cAAc,WAAW,GAC9C,YAAY;AAAA,QAChB,GAAG,iBAAiB,MAAM,GAAG,UAAU;AAAA,QACvC;AAAA,QACA,GAAG,iBAAiB,MAAM,aAAa,CAAC;AAAA,MAAA;AAI1C,aAFwB,EAAC,GAAI,eAAe,CAAC,GAAI,OAAO,UAAS;AAAA,IAGnE;AAAA,IACA,CAAC,YAAY,kBAAkB,aAAa,YAAY;AAAA,KAGpD,qBAAqB;AAAA,IACzB,CAAC,aAAsF;AAC/E,YAAA,kBAAkB,sBAAsB,QAAQ;AACtD,aAAA,WAAW,MAAM,SAAS,eAAe,GAAG,CAAC,GACtC;AAAA,IACT;AAAA,IACA,CAAC,uBAAuB,QAAQ;AAAA,KAG5B,uBAAuE;AAAA,IAC3E,CAAC,eAAe;AACd,YAAM,kBAAkB,sBAAsB,CAAC,UAAU,SAAS;AAAA,QAChE,GAAG,SAAS,MAAM,GAAG,YAAY;AAAA,QACjC,EAAC,GAAG,MAAM,QAAQ,WAAU;AAAA,QAC5B,GAAG,SAAS,MAAM,eAAe,CAAC;AAAA,MAAA,CACnC;AAED,aAAO,qBAAqB,eAAe;AAAA,IAC7C;AAAA,IACA,CAAC,uBAAuB,sBAAsB,YAAY;AAAA,KAGtD,aAAmD;AAAA,IACvD,CAAC,gBAAgB;AACI,yBAAA,CAAC,UAAU,SAAS;AAAA,QACrC,GAAG,SAAS,MAAM,GAAG,YAAY;AAAA,QACjC,EAAC,GAAG,MAAM,SAAS,YAAW;AAAA,QAC9B,GAAG,SAAS,MAAM,eAAe,CAAC;AAAA,MAAA,CACnC;AAAA,IACH;AAAA,IACA,CAAC,oBAAoB,YAAY;AAAA,KAG7B,YAAiD;AAAA,IACrD,CAAC,eAAe;AACK,yBAAA,CAAC,UAAU,SAAS;AAAA,QACrC,GAAG,SAAS,MAAM,GAAG,YAAY;AAAA,QACjC,EAAC,GAAG,MAAM,QAAQ,WAAU;AAAA,QAC5B,GAAG,SAAS,MAAM,eAAe,CAAC;AAAA,MAAA,CACnC;AAAA,IACH;AAAA,IACA,CAAC,oBAAoB,YAAY;AAAA,KAG7B,sBAAqE;AAAA,IACzE,CAAC,EAAC,IAAI,eAAe,MAAM,eAAc;AAC9B,eAAA;AAAA,QACP,OAAO;AAAA,UACL,GAAG,iBAAiB,MAAM,GAAG,aAAa,CAAC;AAAA,UAC3C;AAAA,YACE;AAAA,cACE;AAAA,cACA,QAAQ,EAAC,UAAU,SAAS,IAAI,eAAeA,SAAa,aAAa,GAAG,KAAI;AAAA,cAChF,SAAS,SAAS;AAAA,YACpB;AAAA,UACF;AAAA,QACF;AAAA,MAAA,CACD;AAAA,IACH;AAAA,IACA,CAAC,YAAY,UAAU,gBAAgB;AAAA,KAGnC,MAA8B;AAAA,IAClC,OAAO;AAAA;AAAA,MAEL,OAAO;AAAA;AAAA,MAGP;AAAA;AAAA,MAGA;AAAA;AAAA,MAGA;AAAA;AAAA,MAGA;AAAA;AAAA,MAGA,kBAAkB,iBAAiB,UAAU,IACzC,iBAAiB,UAAU,EAAE,SAAS,IACtC;AAAA;AAAA,MAGJ,aAAa,iBAAiB,UAAU,IAAI,iBAAiB,UAAU,EAAE,SAAS;AAAA;AAAA,MAGlF,kBAAkB;AAAA;AAAA,MAGlB;AAAA;AAAA;AAAA,MAIA,UAAU,YAAY,WAAW;AAAA;AAAA;AAAA,MAIjC;AAAA;AAAA,MAGA;AAAA;AAAA,MAGA;AAAA;AAAA,MAGA,gBAAgB,CAAC,OAAO,OAAa;AACnC,2BAAmB,MAAM;AAAA,UACvB,EAAC,IAAI,KAAK,MAAM,IAAI,SAAS,KAAK,SAAS,QAAQ,KAAK,UAAU,CAAA,EAAE;AAAA,QAAA,CACrE;AAAA,MACH;AAAA;AAAA,MAGA,cAAc,MAAY;AACxB;AAAA,UAAmB,CAAC,UAAU,SAC5B,SAAS,SAAS,IAAI,SAAS,OAAO,CAAC,YAAY,YAAY,IAAI,IAAI;AAAA,QAAA;AAAA,MAE3E;AAAA;AAAA,MAGA,sBAAsB,CAAC,aAAa,OAAe;AAC7C,sBAAc,YAChB,OAAO,SAAS,OAAO,GAEzB;AAAA,UACE;AAAA,YACE,OAAO,CAAC,GAAG,iBAAiB,MAAM,GAAG,UAAU,CAAC;AAAA,UAClD;AAAA,UACA,EAAC,SAAS,GAAI;AAAA,QAAA;AAAA,MAElB;AAAA;AAAA,MAGA,kBAAkB,CAAC,YAAkB;AAChB,2BAAA,CAAC,UAAU,SAAS;AACrC,gBAAM,iBAAiB;AAAA,YACrB,GAAG;AAAA,YACH,UAAS,WAAS,OAAA,SAAA,QAAA,YAAW,KAAK;AAAA,YAClC,SAAQ,WAAS,OAAA,SAAA,QAAA,WAAU,KAAK;AAAA,UAAA;AAG3B,iBAAA;AAAA,YACL,GAAG,SAAS,MAAM,GAAG,YAAY;AAAA,YACjC;AAAA,YACA,GAAG,SAAS,MAAM,YAAY;AAAA,UAAA;AAAA,QAChC,CACD;AAAA,MACH;AAAA;AAAA,MAGA,SAAS,CAAC,WAAW;AACb,cAAA,aAAa,KAAK,QAAQ,MAAM;AAC/B,eAAA,UAAU,SAAS,EAAC,GAAG,YAAY,MAAM,OAAA,IAAU,UAAU;AAAA,MACtE;AAAA;AAAA,MAGA;AAAA;AAAA,MAGA;AAAA;AAAA,MAGA;AAAA;AAAA,MAGA;AAAA,IAAA;AAAA,IAEF;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAGF,6BAAQ,kBAAkB,UAAlB,EAA2B,OAAO,KAAM,SAAS,CAAA;AAC3D;;ACvOO,MAAM,4BAA4B,MAAM;AAAA,EAK7C,YAAY,EAAC,SAAS,SAAS,QAAQ,SAAoC;AACzE,UAAM,OAAO,GALf,cAAA,MAAA,OAAA,GACA,cAAA,MAAA,SAAA,GACA,cAAA,MAAA,QAAA,GAIO,KAAA,OAAO,uBACZ,KAAK,UAAU,SACf,KAAK,SAAS,QACd,KAAK,QAAQ;AAAA,EACf;AACF;ACtBA,MAAM,oCAAoB;AAQnB,SAAS,SAAS,KAAqB;AACtC,QAAA,cAAc,cAAc,IAAI,GAAG;AACzC,MAAI,YAAoB,QAAA;AAExB,QAAM,KAAK;AACG,SAAA,cAAA,IAAI,KAAK,EAAE,GAClB;AACT;ACRA,MAAM,YAAY,CAAC,UACV,CAAC,CAAC,SAAS,QAAO,SAAO,OAAA,SAAA,MAAA,SAAS,YAErC,iBAAiB,CAAC,UACjB,SAAS,KAAK,IACZ,OAAO,MAAM,aAAc,aADL,IAgBzB,kCACJ,CAAC,SAAS,CAAC,gBAAgB,SAAS,cAAc;AAC5C,MAAA;AACK,WAAA,KAAK,gBAAgB,SAAS,SAAS;AAAA,WACvC,GAAG;AAEV,UAAI,aAAa,sBACT,IAKF,IAAI,oBAAoB;AAAA,MAC5B,SAAS,QAAO,KAAA,OAAA,SAAA,EAAG,YAAY,WAAW,EAAE,UAAU;AAAA,MACtD;AAAA,MACA,OAAO;AAAA,IAAA,CACR;AAAA,EACH;AACF,GAEI,wBACJ,CAAC,SACD,IAAI,SACK,KAAK,GAAG,IAAI,EAAE;AAAA;AAAA;AAAA;AAAA,EAInB,cAAc,CAAC;AAAA,EACf,SAAS;AACX;AAGG,SAAS,mBAAmB,YAAkD;AAKnF,QAAM,cAAc;AAAA,IAClB;AAAA,MACE,WAAW,CAAC,gBAAgB,SAAS,cAAc;AACjD,YAAI,CAAC;AACH,gBAAM,IAAI,oBAAoB;AAAA,YAC5B,SAAS;AAAA,YACT;AAAA,YACA,QAAQ;AAAA,UAAA,CACT;AAGC,eAAA,UAAU,cAAc,KAAK,aAAa,cAAc,IACnD,KAAK,cAAc,EAAE;AAAA,UAC1B,UAAU,CAAC,WAAW,YAAY,QAAQ,SAAS,SAAS,CAAC;AAAA,QAC/D,IAGE,eAAe,cAAc,IACxB,YAAY,eAAe,UAAU,OAAO,GAAG,SAAS,SAAS,IAGtE,OAAO,kBAAmB,aACrB,YAAY,eAAe,QAAQ,IAAI,OAAO,GAAG,SAAS,SAAS,IAGrEC,GAAa,cAAc;AAAA,MAAA,CACnC;AAAA,IACH;AAAA,EAAA;AAGK,SAAA;AACT;AChGA,MAAM,gCAAgB;AAUN,SAAA,SAAS,KAA8B,WAA6B;AAClF,QAAM,eAAe,UAAU,IAAI,GAAG,yBAAS;AAC/C,MAAI,cAAc;AACVC,UAAAA,SAAQ,aAAa,IAAI,SAAS;AACxC,QAAIA,OAAcA,QAAAA;AAAAA,EACpB;AAEM,QAAA,SAAS,IAAI,SAAS;AAE5B,MAAI,OAAO,UAAW;AACpB,UAAM,IAAI;AAAA,MACR,uBAAuB,SAAS,+BAA+B,OAAO,MAAM;AAAA,IAAA;AAI1E,QAAA,QAAQ,OAAO,KAAK,GAAG;AAChB,SAAA,aAAA,IAAI,WAAW,KAAK,GACjC,UAAU,IAAI,KAAK,YAAY,GAExB;AACT;ACeA,eAAsB,cAAc,SAAqD;AACjF,QAAA,oBAAwB,oBAAA,IAaxB,GAAA,cAAc,mBAVoB,CAAC,WAAW,CAAC,gBAAgB,SAAS,cAAc;AAC1F,UAAM,MAAM,kBAAkB,GAAG,SAAS,cAAc,CAAC,IAAI,QAAQ,KAAK,KAAK,IAAI,CAAC,IAC9E,qBAAqB,OAAO,kBAAkB,IAAI,GAAG;AAC3D,QAAI,mBAA2B,QAAA;AAE/B,UAAM,SAAS,OAAO,gBAAgB,SAAS,SAAS;AACxD,WAAI,OAAK,kBAAkB,IAAI,KAAK,MAAM,GACnC;AAAA,EAGqC,CAAA,GAExC,sBAAmC;AAAA,IACvC;AAAA,MACE;AAAA,QACE,IAAI,WAAW,QAAQ,OAAO,EAAE;AAAA,QAChC,QAAQ,EAAC,GAAG,KAAK,QAAQ,QAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,QAAQ,OAAO,KAAI;AAAA,QACnE,SAAS,QAAQ;AAAA,MACnB;AAAA,IACF;AAAA,EAAA;AAGF,iBAAe,SAAS;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAAC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,GAGA;AAvFJ,QAAA;AAwFQ,QAAA,CAAC,eAAgB,QAAO;AAE5B,UAAM,EAAC,IAAI,UAAU,MAAM,gBAAgB,GAAG,gBAAe,QAWvD,eAAe,MAAM,eAAe,YAAY,gBAVZ;AAAA,MACxC,IAAI;AAAA,MACJ,YAAY;AAAA,MACZ,QAAAA;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,QAAQ,CAAC;AAAA,MACT,SAAS;AAAA,MACT;AAAA,IAAA,GAE6E,SAAS,CAAC;AAIzF,WAAI,aAAa,SAAS,cAAc,aAAa,OAAO,WACnD;AAAA,MACL;AAAA,QACE,OAAO;AAAA,UACL,GAAG,KAAK,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,CAAA,CAAC;AAAA,UACtD,CAAC,EAAC,IAAI,UAAU,QAAQ,aAAa,SAAQ;AAAA,QAC/C;AAAA,QACA,YAAY,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA;AAAA,OAOA,KAAa,aAAA,oBAAb,QAA+B,GAAA,KAAA,cAAA,QAAQ,QAAQ;AAAA,QAC7C,MAAM;AAAA,QACN,OAAO;AAAA,MAAA,CACT;AAAA;AAAA,MAGC,aAAa,SAAS;AAAA,MAErB,aAAa,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhC,aAAa,QAAQ,WAAW,mBAE3B;AAAA,QACL;AAAA,UACE,OAAO;AAAA;AAAA,YAEL,GAAG,KAAK,IAAI,CAAC,OAAO,CAAC,EAAC,GAAE,CAAC,CAAC;AAAA;AAAA,YAE1B,CAAC,EAAC,IAAI,OAAO,IAAI,QAAQ,aAAa,SAAQ;AAAA,UAChD;AAAA,UACA,YAAY,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MAAA,IAIA,aAAa,SAAS,UAAU,aAAa,SAAS,aAAa,SAEnE,MAAM,QAAQ;AAAA,QACZ,aAAa,MAAM,IAAI,CAAC,MAAM,mBACxB,KAAK,SAAS,YAAkB,QAAQ,QAAQ,CAAE,CAAA,IAE/C,SAAS;AAAA,UACd,WAAW,KAAK,OAAO,KAAK;AAAA,UAC5B,WAAW,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,UACA,QAAQ;AAAA,UACR,MAAM,CAAC,GAAG,MAAM,KAAK,EAAE;AAAA,UACvB;AAAA,UACA,gBACE,OAAO,aAAa,SAAU,aAC1B,SAAS,cAAc,OAAO,IAC9B,aAAa;AAAA,UACnB,YAAY;AAAA,UACZ;AAAA,QAAA,CACD,CACF;AAAA,MAAA,GAEH,KAAK,IAGF,CAAC;AAAA;AAAA,EACV;AAeM,QAAA,qBAbgB,MAAM,SAAS;AAAA,IACnC,WAAW;AAAA,IACX,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,QAAQ,QAAQ;AAAA,IAChB,QAAQ,QAAQ;AAAA,IAChB,QAAQ;AAAA,IACR,MAAM,CAAC;AAAA,IACP,SAAS,QAAQ;AAAA,IACjB,gBAAgB,QAAQ;AAAA,IACxB,kBAAkB,QAAQ;AAAA,EAAA,CAC3B,GAEuC,KAAK,CAAC,GAAG,MAE3C,EAAE,eAAe,EAAE,aAAmB,EAAE,aAAa,EAAE,aACpD,EAAE,aAAa,EAAE,UACzB,EAAE,CAAC;AAEA,SAAA,oBACK,kBAAkB,QAGpB;AACT;ACjLA,MAAM,sBAAwC,CAAC,QAAQ,YAA8B;AACnF,QAAM,KAAK,OAAO,QAAQ,aAAa,EAAE,GACnC;AAAA,IACJ;AAAA,IACA;AAAA,IACA,kBAAkB,EAAC,oBAAmB;AAAA,EACpC,IAAA,SACE,EAAC,MAAM,aAAY;AAEzB,MAAI,CAAC;AACH,UAAM,IAAI;AAAA,MACR,sCAAsC,EAAE;AAAA,IAAA;AAIxC,MAAA,yBAAyB,oBAAoB,EAAC,YAAY,MAAM,YAAY,IAAG,EAAE,GAAG,QAAQ;AAE5F,SAAA,aACF,yBAAyB,uBAAuB;AAAA,IAC9C;AAAA,IACA;AAAA,EAAA,IAIG,uBAAuB;AAChC;AAMA,SAAS,YAAY,SAA2C;AA3DhE,MAAA,IAAA;AA4DS,SAAA,eAAe,KAAK,UAAU;AAAA,IACnC,IAAI,QAAQ;AAAA,IACZ,UAAU,UAAU,SAAS,MAAM;AAAA,IACnC,MAAM,QAAQ;AAAA,IACd,OAAO,QAAQ;AAAA,IACf,YAAY,QAAQ;AAAA,IACpB,wBAAuB,KAAQ,QAAA,qBAAR,OAA0B,SAAA,GAAA;AAAA,IACjD,uBAAsB,KAAQ,QAAA,qBAAR,OAA0B,SAAA,GAAA;AAAA,EAAA,CACjD,CAAC;AACJ;AAMA,MAAM,uBAAuB,CAAC,SAAmC;AAC/D,QAAM,aAAa;AAAA,IACjB,MAAM,KAAK;AAAA,IACX,IAAI,KAAK,kBAAkB;AAAA,IAC3B,QAAQ,KAAK,kBAAkB,UAAU,CAAC;AAAA,IAC1C,SAAS,KAAK,kBAAkB,WAAW;AAAA,IAC3C,WAAW,KAAK;AAAA,IAChB,YAAY,KAAK;AAAA,IACjB,cAAc,KAAK;AAAA,IACnB,MAAM,KAAK;AAAA,IACX,UAAU,KAAK,SAAS,iBAAiB,SAAS,KAAK,QAAQ,IAAI;AAAA,EAAA;AAGrE,SAAO,YAAY,KAAK,UAAU,UAAU,CAAC;AAC/C;AAkFA,SAAS,gBAAgB;AAAA,EACvB;AAAA,EACA;AAAA,EACA,QAAAA;AAAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAA2D;AACnD,QAAA,CAAC,SAAS,GAAG,IAAI,IAAI,sBACrB,OAAO,KAAK,CAAC,GAEb,UAAoC;AAAA,IACxC,IAAI,QAAQ,kBAAkB;AAAA,IAC9B,YAAY,QAAQ;AAAA,IACpB,QAAAA;AAAAA,IACA,MAAM,CAAC,GAAG,MAAM,QAAQ,kBAAkB,EAAE;AAAA,IAC5C,OAAO,QAAQ;AAAA,IACf,QAAQ,QAAQ,kBAAkB,UAAU,CAAC;AAAA,IAC7C,SAAS,QAAQ,kBAAkB;AAAA,IACnC;AAAA,EAAA;AAGE,MAAA;AACF,WAAO,YAAY,gBAAgB,SAAS,QAAQ,SAAS,EAAE;AAAA;AAAA,MAE7D,UAAU,CAAC,aAAa;AAEtB,cAAM,mBAAqC;AAAA,UACzC,MAAM;AAAA,UACN,GAAG;AAAA,UACH;AAAA,UACA,MAAM,QAAQ;AAAA,WAIV,eAAe,KAAK,IAAI,CAAC,GAAG,eAMM;AAAA,UACpC,MAAM;AAAA,UACN,MAPsB;AAAA,YACtB,GAAG,QAAQ;AAAA,YACX,GAAG,KAAK,MAAM,SAAS,EAAE,IAAI,CAAC,GAAG,iBAAiB,IAAI,EAAE,YAAY,YAAY,GAAG;AAAA,UACrF;AAAA,UAKE,UAAU;AAAA,UACV,GAAG;AAAA,QAIN,EAAA;AAED,YAAI,CAAC,KAAK;AACD,iBAAAF,GAAa,CAAC,gBAAgB,CAAC;AAGpC,YAAA;AAEJ;AAAA;AAAA,UAEE,qBAAM,kBAAkB,GAAG,WAAW,UAAA,IAEtC,aAAa,gBAAgB;AAAA,YAC3B,gBAAgB;AAAA,YAChB,sBAAsB;AAAA,YACtB,QAAAE;AAAAA,YACA,MAAM,QAAQ;AAAA,YACd;AAAA,YACA;AAAA,UACD,CAAA,IACQ,QAAQ,gBAAe,QAAM,OAAA,SAAA,KAAA,cAItC,aAAa,gBAAgB;AAAA,YAC3B;AAAA,YACA,sBAAsB;AAAA,YACtB,QAAAA;AAAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UAAA,CACD,IAGD,aAAa,gBAAgB;AAAA,YAC3B,gBACE,OAAO,SAAS,SAAU,aACrB,SAAS,UAAU,OAAO,IAC3B,SAAS;AAAA,YACf,sBAAsB;AAAA,YACtB,QAAQ;AAAA,YACR,MAAM,QAAQ;AAAA,YACd;AAAA,YACA;AAAA,UACD,CAAA,GAGI;AAAA;AAAA,YAELF,GAAa,CAAC,kBAAkB,GAAG,YAAY,CAAC;AAAA;AAAA,YAEhD,WAAW,KAAK,IAAI,CAAC,sBAAsB,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,CAAC;AAAA,UAAA;AAAA;AAAA,MACtF,CACD;AAAA,IAAA;AAAA,WAEI,GAAG;AACV,QAAI,aAAa,wBACX,EAAE,WACJ,QAAQ;AAAA,MACN,kCAAkC,EAAE,QAAQ,KAAK,GAC/C,EAAE,QAAQ,aAAa,IAAI,yBAAyB,EAAE,QAAQ,UAAU,KAAK,EAC/E,KAAK,EAAE,OAAO,GAAG,EAAE,SAAS,UAAU,gBAAgB,EAAE,MAAM,CAAC,KAAK,EAAE;AAAA,MACtE;AAAA,IAAA,GAIA,EAAE,WAAW;AAGR,aAAAA,GAAa,CAAA,CAAE;AAIpB,UAAA;AAAA,EACR;AACF;AAMO,SAAS,6BAA6B;AAAA,EAC3C;AAAA,EACA;AAAA,EACA,oBAAoB;AAAA,IAClB,sBAAsB,CAAC;AAAA,IACvB,sBAAsB,CAAC;AAAA,IACvB,uCAAuB,IAAI;AAAA,IAC3B,aAAa,MAAM;AAAA,EACrB;AAAA,EACA;AACF,GAAwE;AAmGtE,SAlGuB,kBAAkB;AAAA;AAAA,IAEvC,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAC,IAAI,OAAO,CAAA,GAAG,GAAG,cAAc,CAAC;AAAA;AAAA,IAE3D,IAAI,CAAC,gBACiD,YACjD;AAAA,MAAQ,CAAC,iBAAiB,eACzB,gBAAgB,IAAI,CAAC,mBAAmB,kBAAkB;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,MAAA,EACA;AAAA,IAAA,EAGH,IAAI,CAAC,GAAG,WAAW,EAAC,GAAG,GAAG,WAAW,MAAK,EAAE,CAGhD;AAAA;AAAA,IAED,UAAU,CAAA,CAA2B;AAAA,IACrC,SAAS;AAAA,IACT,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM;AACpB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,cAAM,YAAY,KAAK,CAAC,GAClB,YAAY,KAAK,CAAC;AAEpB,YAAA,CAAC,QAAQ,WAAW,SAAS;AACxB,iBAAA;AAAA,YACL,sBAAsB;AAAA,YACtB,WAAW;AAAA,UAAA;AAAA,MAGjB;AAEO,aAAA;AAAA,QACL,sBAAsB;AAAA,QACtB,WAAW,KAAK;AAAA,MAAA;AAAA,IAClB,CACD;AAAA;AAAA,IAED,KAAK,CAAC,KAAK,SAAS;AACZ,YAAA,EAAC,sBAAsB,kBAAqB,IAAA,KAC5C,EAAC,sBAAsB,cAAa,MAIpC,kBAAkB,qBAAqB,MAAM,GAAG,YAAY,CAAC,GAC7D,iBAAiB,qBAAqB,MAAM,YAAY,CAAC,GAEzD,aAAa,IAAI,IAAI,gBAAgB,QAAQ,CAAC,WAAW,MAAM,KAAK,MAAM,CAAC,CAAC,GAC5E,eAAe,eAClB,QAAQ,CAAC,WAAW,MAAM,KAAK,MAAM,CAAC,EACtC,OAAO,CAAC,QAAQ,CAAC,WAAW,IAAI,GAAG,CAAC;AAEvC,iBAAW,OAAO;AAChB,0BAAkB,OAAO,GAAG;AAoBvB,aAAA;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA,aAAa,mBAnByB,CAAC,WAAW,CAAC,gBAAgB,SAAS,cAAc;AAC1F,gBAAM,MAAM,kBAAkB,GAAG,SAAS,cAAc,CAAC,IAAI,YAAY,OAAO,CAAC,IAC3E,qBAAqB,OAAO,kBAAkB,IAAI,GAAG;AAC3D,cAAI,mBAA2B,QAAA;AAE/B,gBAAM,SAAS,OAAO,gBAAgB,SAAS,SAAS;AACpD,cAAA,CAAC,IAAY,QAAA;AAEjB,gBAAM,cAAc,qBAAqB,SAAS,yBAAS,IAAI;AACnD,iBAAA,YAAA,IAAI,GAAG,GACnB,qBAAqB,SAAS,IAAI,aAClC,kBAAkB,IAAI,KAAK,MAAM,GAC1B;AAAA,QAAA,CAOgC;AAAA,MAAA;AAAA,OAExC,iBAAiB;AAAA;AAAA,IAEpB;AAAA,MAAU,CAAC,EAAC,sBAAsB,kBAChC,gBAAgB;AAAA,QACd,gBAAgB;AAAA,QAChB;AAAA,QACA,QAAQ;AAAA,QACR,MAAM,CAAC;AAAA,QACP;AAAA,QACA;AAAA,MAAA,CACD;AAAA,IACH;AAAA,EAAA,EAMoB;AAAA;AAAA;AAAA;AAAA;AAAA,IAKpB;AAAA,MACE,CAAC,MAAM,SACL,KAAK,IAAI,CAAC,UAAU,UAAU;AACtB,cAAA,WAAW,KAAK,KAAK;AAE3B,eADI,CAAC,YACD,SAAS,SAAS,YAAkB,WAEpC,SAAS,kBAAkB,OAAO,SAAS,kBAAkB,KACxD,WAEF;AAAA,MAAA,CACR;AAAA,MACH,CAAC;AAAA,IACH;AAAA;AAAA,IAEA,qBAAqB,CAAC,MAAM,SAAS;AACnC,UAAI,KAAK,WAAW,KAAK,OAAe,QAAA;AAExC,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,cAAM,YAAY,KAAK,CAAC,GAClB,YAAY,KAAK,CAAC;AACxB,YAAI,qBAAqB,SAAS,MAAM,qBAAqB,SAAS;AAC7D,iBAAA;AAAA,MAEX;AAEO,aAAA;AAAA,IAAA,CACR;AAAA,EAAA;AAEL;AC7ZA,SAAS,uBAAuB;AACxB,QAAA,qBAAqB,QAAQ,MAAM,IAAI,cAA2B,CAAC,GAAG,CAAA,CAAE,GACxE,eAAe;AAAA,IACnB,MACE,mBACG,aAAa,EACb,KAAK,IAAI,CAAC,kBAAkB,gBAAc,OAAA,SAAA,aAAA,UAAS,CAAkB,CAAA,CAAC;AAAA,IAC3E,CAAC,kBAAkB;AAAA,EAEf,GAAA,EAAC,OAAO,gBAAe,UAAU;AACvC,SAAA,UAAU,MAAM;AACd,uBAAmB,KAAK,WAAW;AAAA,EAClC,GAAA,CAAC,aAAa,kBAAkB,CAAC,GAE7B;AACT;AAEO,SAAS,mBAA0B;AAIxC,QAAM,CAAC,OAAO,QAAQ,IAAI,SAAkB;AAC5C,MAAI,MAAa,OAAA;AAEX,QAAA,EAAC,kBAAkB,iBAAgB,oBAEnC,CAAC,MAAM,OAAO,IAAI,SAAgB;AAAA,IACtC,eAAe,CAAC;AAAA,IAChB,eAAe,CAAC;AAAA,IAChB,aAAa,CAAC;AAAA,EAAA,CACf,GAEK,oBAAoB;AAE1B,SAAA,UAAU,MAAM;AAiDd,UAAM,eAhDiB,6BAA6B;AAAA,MAClD;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAA,EAAE;AAAA,MACD,IAAI,CAAC,kBAAkB;AACrB,cAAM,cAAc,cAAc,OAAoB,CAAC,KAAK,SAAS;AACnE,gBAAM,eAAe,IAAI,KAAK,UAAU,KAAK,CAAA;AAChC,iBAAA,aAAA,KAAK,YAAY,IAAI,KAAK,mBACvC,IAAI,KAAK,UAAU,IAAI,cAChB;AAAA,QAAA,GACN,CAAE,CAAA,GAEC,YAAY,YAAY,QAExB,gBAAgB,cAAc,IAAI,CAAC,SAAS;AAjF1D,cAAA;AAkFU,gBAAM,EAAC,YAAY,WAAW,cAAc,mBAAmB,KAAI,IAAI,MACjE,SAAS,kBAAkB,IAC3B,YAAY,YAAY,aAAa,CAAC;AAEb,iBAAA;AAAA,YAC7B,QAAQ,eAAe,YAAY;AAAA,YACnC,cAAa,KAAA,aAAA,OAAA,SAAA,UAAY,CAAG,EAAA,OAAf,OAAqB,KAAA;AAAA,YAClC,OAAO;AAAA,YACP,QAAQ,kBAAkB;AAAA,YAC1B;AAAA,YACA,KAAK,GACH,KAAK,SAAS,YAAY,YAAY,KAAK,SAAS,EACtD,IAAI,MAAM,IAAI,YAAY;AAAA,YAC1B,MAAM,KAAK,SAAS,YAAY,eAAe,KAAK;AAAA,YACpD,QAAQ,kBAAkB,UAAU,CAAC;AAAA,YACrC,MAAM,KAAK,KAAK,GAAG;AAAA,YACnB,SAAS,kBAAkB;AAAA,YAC3B,UAAU,cAAc,cAAc,SAAS;AAAA,YAC/C;AAAA,UAAA;AAAA,QACF,CAGD;AAEM,eAAA;AAAA,UACL;AAAA,UACA;AAAA,UACA,eAAe,cAAc,IAAI,CAAC,SAAS,KAAK,IAAI;AAAA,QAAA;AAAA,MACtD,CACD;AAAA,MAGiC,UAAU;AAAA,MAC5C,MAAM,CAAC,WAAW,QAAQ,MAAM;AAAA,MAChC,OAAO,CAAC,MAAM,SAAS,CAAC;AAAA,IAAA,CACzB;AAEM,WAAA,MAAM,aAAa;KACzB,CAAC,cAAc,mBAAmB,gBAAgB,CAAC,GAE/C;AACT;ACvGsB,eAAA,wBACpB,eACA,IACA,MACqC;AACrC,MAAI,MAAM,KAAa,QAAA,EAAC,IAAI,KAAI;AAC5B,MAAA,CAAC,MAAM,KAAM,QAAO,EAAC,IAAI,KAAA,GAAQ;AACjC,MAAA,MAAM,CAAC,MAAM;AACf,UAAM,eAAe,MAAM;AAAA,MACzB,cAAc,uBAAuB,EAAE;AAAA,IAAA;AAGlC,WAAA,EAAC,IAAI,MAAM;EACpB;AAEA,QAAM,IAAI,oBAAoB;AAAA,IAC5B,SAAS;AAAA,EAAA,CACV;AACH;AC9BA,MAAM,eAAwC,CAAA,GAMjC,iBAAiB,KAAK,WAA0B;AAC3D,QAAM,EAAC,SAAY,IAAA,aACb,cAAc;AAAA,IAClB,YAAY,CAAC,gBAAgB;AAC3B,YAAM,aAAa,OAAO,YAAY,UAAW,WAAW,YAAY,SAAS;AACjF,aAAO,aACH;AAAA,QACE,QAAQ;AAAA,QACR,QAAQ,SAAS,YAAY,MAAM,IAAI,YAAY,SAAS;AAAA,QAC5D,SAAS,YAAY;AAAA,MAEvB,IAAA;AAAA,IACN,GAAG,EAAE;AAAA,EAED,GAAA,EAAC,cAAc,qBAAoB,iBAAiB,GACpD,gBAAgB,oBAChB,CAAC,OAAO,QAAQ,IAAI,SAAkB,IAAI;AAGhD,MAAI,MAAa,OAAA;AAGjB,SAAA,UAAU,MAAM;AACd,QAAI,aAAa;AACf,YAAM,EAAC,QAAQ,QAAQ,QAAA,IAAW;AAElC,UAAI,YAAY;AAEhB,qBAAe,SAAS;AACtB,cAAM,EAAC,IAAI,KAAI,IAAI,MAAM;AAAA,UACvB;AAAA,UACA,OAAO,OAAO,MAAO,WAAW,OAAO,KAAK;AAAA,UAC5C,OAAO,OAAO,QAAS,WAAW,OAAO,OAAO;AAAA,QAAA;AAGlD,YAAI,UAAW;AAET,cAAA,QAAQ,MAAM,cAAc;AAAA,UAChC;AAAA,UACA,QAAQ,EAAC,GAAG,QAAQ,IAAI,KAAI;AAAA,UAC5B;AAAA,UACA;AAAA,UACA;AAAA,QAAA,CACD;AAEG,qBAEJ,SAAS,EAAC,MAAA,GAAQ,EAAC,SAAS,IAAK;AAAA,MACnC;AAEA,aAAA,OAAS,EAAA,MAAM,QAAQ,GAEhB,MAAM;AACC,oBAAA;AAAA,MAAA;AAAA,IAEhB;AAAA,EAAA,GACC,CAAC,eAAe,aAAa,UAAU,cAAc,gBAAgB,CAAC,GAElE;AACT,CAAC,GC7DK,cAAc,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAO3B,SAAS,YAAY,OAAe;AAEhC,SAAA,MAEG,QAAQ,iBAAiB;AAAA,IAAY,EAErC,QAAQ,oCAAoC,EAAE,EAE9C,QAAQ,iBAAiB,GAAG,EAE5B,QAAQ,IAAI,OAAO,oBAAoB,OAAO,SAAS,IAAI,IAAI,GAAG,GAAG,IAAI;AAEhF;AAMgB,SAAA,eAAe,EAAC,SAA6B;AAC3D,MAAI,EAAE,iBAAiB;AACf,UAAA;AAER,QAAM,EAAC,UAAS,OACV,EAAC,MAAK,eAAe,wBAAwB,GAK7C,SAAQ,SAAA,OAAA,SAAA,MAAO,UAAS,MAAM,OAC9B,YACJ,SAAS,EAAE,iBAAiB,mBAAmB,CAAC,MAAM,QAAQ,SAAS,sBAAsB,GAEzF,OAAO,iBAAiB,iBAAiB,MAAM,OAAO,IACtD,SAAU,iBAAiB,kBAAkB,MAAM,UAAW,MAAM,QAEpE,eAAe,YAAY,MAAM;AACrC,WAAO,SAAS;EAClB,GAAG,CAAE,CAAA;AAEL,SACG,oBAAA,MAAA,EAAK,QAAO,QAAO,UAAS,QAAO,SAAS,GAAG,QAAO,UAAS,MAAK,YACnE,+BAAC,WACC,EAAA,UAAA;AAAA,IAAA,oBAAC,SAAQ,EAAA,IAAG,MAAM,UAAA,EAAE,6BAA6B,GAAE;AAAA,IAElD,qBAAA,MAAA,EAAK,WAAW,GAAG,SAAS,GAAG,QAAQ,GAAG,UAAS,QAAO,QAAQ,GAAG,MAAK,WACxE,UAAA;AAAA,MAAA,KAAK,SAAS,KACZ,qBAAA,OAAA,EAAM,OAAO,GACZ,UAAA;AAAA,QAAA,oBAAC,QAAK,MAAM,GAAG,QAAO,UACnB,UAAA,EAAE,sCAAsC,GAC3C;AAAA,QACA,oBAAC,QAGE,UAAK,KAAA,MAAM,CAAC,EAAE,IAAI,CAAC,SAAS;AAAA;AAAA,8BAE1B,aAAqC,EAAA,UAAA,QAAA,GAApB,GAAG,OAAO,IAAI,CAAC,EAAa;AAAA,SAC/C,GACH;AAAA,MAAA,GACF;AAAA,MAGD,qBAAA,OAAA,EAAM,WAAW,GAAG,OAAO,GAC1B,UAAA;AAAA,QAAA,oBAAC,QAAK,MAAM,GAAG,QAAO,UACnB,UAAA,EAAE,6BAA6B,GAClC;AAAA,4BACC,MAAM,EAAA,UAAA,YAAY,YAAY,KAAK,IAAI,MAAM,SAAQ;AAAA,MAAA,GACxD;AAAA,MAEC,8BACE,KAAI,EAAA,WAAW,GACd,UAAC,oBAAA,MAAA,EACC,8BAAC,KAAE,EAAA,MAAM,gBAAgB,MAAM,GAAG,KAAI,uBAAsB,QAAO,UAChE,UAAE,EAAA,gCAAgC,GACrC,EAAA,CACF,EACF,CAAA;AAAA,MAGF,oBAAC,KAAI,EAAA,WAAW,GACd,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAM,EAAE,oCAAoC;AAAA,UAC5C,MAAM;AAAA,UACN,MAAK;AAAA,UACL,SAAS;AAAA,QAAA;AAAA,MAAA,GAEb;AAAA,IAAA,GACF;AAAA,EAAA,EACF,CAAA,EACF,CAAA;AAEJ;AC9FO,SAAS,YAAY,OAAyB;AACnD,QAAM,EAAC,YAAY,MAAM,QAAO,IAAI,OAC9B,OAAQ,SAAS,IAAI,KAAK,KAAK,QAAS,MACxC,EAAC,EAAC,IAAI,eAAe,wBAAwB;AACnD,SACG,qBAAA,MAAA,EAAK,IAAI,SAAS,UAAU,YAC3B,UAAA;AAAA,IAAA,oBAAC,YAAW,EAAA,OAAO,EAAE,+BAA+B,EAAG,CAAA;AAAA,IACtD,oBAAA,aAAA,EACC,UAAC,oBAAA,KAAA,EAAI,SAAS,GACX,UAAA,OAAO,QAAS,WACd,oBAAA,MAAA,EAAK,IAAG,KAAI,OAAK,IAChB,UAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QACA,SAAQ;AAAA,QACR,QAAQ,EAAC,KAAI;AAAA,MAAA;AAAA,IAAA,GAEjB,IAEC,oBAAA,MAAA,EAAK,IAAG,KAAI,OAAK,IAChB,UAAA,oBAAC,aAAU,GAAM,SAAQ,4CAA4C,CAAA,EACvE,CAAA,EAEJ,CAAA,GACF;AAAA,EACF,EAAA,CAAA;AAEJ;ACjBA,MAAM,UAAU;AAAA,EACd,WAAW,KAAK,MAAM,OAAO,aAAiB,CAAC;AAAA,EAC/C,UAAU,KAAK,MAAM,OAAO,YAAiB;;IAAC;AAAA,EAC9C,cAAc,KAAK,MAAM,OAAO,YAAqB;;IAAC;AAAA,EACtD,MAAM,KAAK,MAAM,OAAO,cAAQ,CAAC;AACnC,GAOa,oBAAoB;AAAA,EAC/B,SAA2B,OAA+B;AAClD,UAAA;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,IACE,OAEE,gBAAgB,QAAQ,KAAK,IAAI,KAAK;AAG1C,WAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAW;AAAA,QACX,OAAO;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,QAEA,UAAA,oBAAC,YAAS,UAAU,oBAAC,eAAY,SAAkB,MAAY,UAAoB,GACjF,UAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,aAAa,eAAe;AAAA,YAC5B;AAAA,YACA;AAAA,YACA,UAAU;AAAA,YACV,YAAY;AAAA,YACZ;AAAA,YAEA;AAAA,UAAA;AAAA,QAAA,GAEJ;AAAA,MAAA;AAAA,IAAA;AAAA,EAGN;AAAA,EACA,CACE,EAAC,QAAQ,aAAa,CAAA,GAAI,SAAS,cAAc,MAAM,GAAG,KAAA,GAC1D,EAAC,QAAQ,aAAa,IAAI,SAAS,cAAc,MAAM,GAAG,WACvD;AAEC,QAAA,CAAC,QAAQ,YAAY,UAAU,KAC/B,CAAC,QAAQ,aAAa,WAAW,EAAU,QAAA;AAE/C,UAAM,OAAO,oBAAI,IAAI,CAAC,GAAG,OAAO,KAAK,IAAI,GAAG,GAAG,OAAO,KAAK,IAAI,CAAC,CAAC;AAKjE,eAAW,OAAO;AAChB,UAAI,KAAK,GAAG,MAAM,KAAK,GAAG,EAAU,QAAA;AAG/B,WAAA;AAAA,EACT;AACF;AC3FO,SAAS,wBAAwB;AACtC,QAAM,EAAC,EAAA,IAAK,eAAe,wBAAwB;AAEnD,SACG,oBAAA,MAAA,EAAK,QAAO,QACX,UAAC,oBAAA,MAAA,EAAK,OAAM,UAAS,QAAO,QAAO,SAAQ,UAAS,SAAS,GAAG,QAAO,UACrE,UAAA,oBAAC,WAAU,EAAA,OAAO,GAChB,UAAA,oBAAC,QAAK,SAAS,GAAG,QAAQ,GAAG,QAAQ,GAAG,MAAK,WAC3C,+BAAC,MACC,EAAA,UAAA;AAAA,IAAC,oBAAA,KAAA,EACC,8BAAC,MAAK,EAAA,MAAM,GACV,UAAC,oBAAA,oBAAA,CAAA,CAAmB,GACtB,EACF,CAAA;AAAA,yBACC,OAAM,EAAA,MAAM,GAAG,YAAY,GAAG,OAAO,GACpC,UAAA;AAAA,MAAC,oBAAA,MAAA,EAAK,IAAG,MAAK,MAAM,GAAG,QAAO,UAC3B,UAAE,EAAA,gCAAgC,EACrC,CAAA;AAAA,MACA,oBAAC,MAAK,EAAA,IAAG,KAAI,OAAK,IAAC,MAAM,GACtB,UAAE,EAAA,mCAAmC,EACxC,CAAA;AAAA,0BACC,MAAK,EAAA,IAAG,KAAI,OAAK,IAAC,MAAM,GACvB,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAK;AAAA,UACL,QAAO;AAAA,UACP,KAAI;AAAA,UAEH,YAAE,oCAAoC;AAAA,QAAA;AAAA,MAAA,GAE3C;AAAA,IAAA,GACF;AAAA,EACF,EAAA,CAAA,EAAA,CACF,EACF,CAAA,EACF,CAAA,EACF,CAAA;AAEJ;ACxBA,MAAM,gBAAgB,CAAC,UAAsD;AAC3E,QAAM,EAAC,YAAY,iBAAgB,OAC7B,YAAY,aAAa,YAAY,YAAY,GACjD,SAAS,UACT,GAAA,EAAC,MAAK,eAAe,wBAAwB,GAC7C,gBAAgB,EAAC,aAAA,QAAA,UAAW,cAAa,EAAC,aAAA,QAAA,UAAW,QACrD,iBAAgB,aAAA,OAAA,SAAA,UAAW,WAAS,aAAW,OAAA,SAAA,UAAA,YAC/C,aAAa,OAAO,IAAI,YAAY,GAEpC,EAAC,OAAO,WAAW,sBAAA,IAAyBG,yBAAgB;AAAA,IAChE,SAAS;AAAA,IACT;AAAA,IACA,OAAO;AAAA,EACR,CAAA,GAEK,gBAAgB,gBAClB,EAAE,uCAAuC;AAAA,IACvC,aAAY,cAAY,OAAA,SAAA,WAAA,WAAS,cAAY,OAAA,SAAA,WAAA;AAAA,EAAA,CAC9C,KACD,SAAO,OAAA,SAAA,MAAA,UAAS,EAAE,0CAA0C,GAE1D,UAAU,UAAU,SAAS,CAAC,uBAC9B,WAAW,0BAA0B,aAAa;AACxD,SAAA,UAAU,MAAM;AACT,gBAEL,SAAS,QAAQ;AAAA,KAChB,CAAC,eAAe,SAAS,QAAQ,CAAC,GAE9B;AACT,GAEM,mBAAmB,CAAC,UAA4B;AACpD,QAAM,EAAC,MAAK,IAAI,OACV,WAAW,0BAA0B,KAAK;AAChD,SAAA,UAAU,MAAM;AAEd,aAAS,QAAQ;AAAA,EAChB,GAAA,CAAC,UAAU,KAAK,CAAC,GACb;AACT,GAEa,iBAAiB,CAAC,UAA+B;AACtD,QAAA,EAAC,cAAiB,IAAA;AAEpB,MAAA,EAAC,iBAAe,QAAA,cAAA,QAAe,QAAA;AAEnC,QAAM,WAAW,cAAc,cAAc,SAAS,CAAC;AAGvD,SAAI,cAAc,QAAQ,IACjB,oBAAC,oBAAiB,IAIvB,eAAe,QAAQ,IAErB,YAAU,QAAA,SAAA,QACJ,oBAAA,kBAAA,EAAiB,OAAO,SAAS,MAAA,CAAO,IAI3C,oBAAC,eAAc,EAAA,YAAY,SAAS,QAAQ,IAAI,cAAc,SAAS,QAAQ,KAAM,CAAA,IAIvF,oBAAC,kBAAiB,EAAA,OAAO,qCAAU,MAAO,CAAA;AACnD;AAUA,SAAS,0BAA0B,aAAsB;AACjD,QAAA,yBAAyB,mBAAmB,iBAAiB;AAC5D,SAAA,CAAC,aAAa,sBAAsB,EAAE,OAAO,CAAC,UAAU,KAAK,EAAE,KAAK,KAAK;AAClF;AAGA,SAAS,eAAe,MAAgE;AAC/E,SAAA,SAAS,gBAAgB,KAAK,SAAS;AAChD;AAEA,SAAS,cAAc,MAAmE;AACxF,SAAO,SAAS;AAClB;ACxFA,MAAM,mBAAmB,OAAO,UAAU;AAAA;AAAA;AAAA,GAKpC,eAAe,SAAS,OAAO,GAKxB,gBAAgB,KAAK,SAAuB,EAAC,gBAAmC;AA9B7F,MAAA;AA+BQ,QAAA,EAAC,MAAM,UAAS,IAAI,YACpB,SAAS,aACT,EAAC,iBAAiB,uBAAsB,iBACxC,GAAA,EAAC,eAAe,cAAa,IAAI,iBAAiB,GAIlD,oBAAoB;AAAA,IACxB,YAAY,CAAC,gBAAgB,OAAO,YAAY,UAAW,UAAU,EAAE;AAAA,EAAA,GAEnE;AAAA,IACJ,QAAQ,EAAC,MAAK;AAAA,EACZ,IAAA,SAEE,GAAA,CAAC,eAAe,gBAAgB,IAAI,SAAgC,IAAI,GAExE,qBAAqB,YAAY,MAAM,mBAAmB,EAAI,GAAG,CAAC,kBAAkB,CAAC,GACrF,mBAAmB,YAAY,MAAM,mBAAmB,EAAK,GAAG,CAAC,kBAAkB,CAAC;AAiC1F,SA/BA,UAAU,MAAM;AAIV,kBAAc,UAChB,aAAa,aAAa;AAAA,KAE3B,CAAC,cAAc,aAAa,CAAC,GAEhC,UAAU,MAAM;AACR,UAAA,sBAAsB,CAAC,UAAyB;AAEhD,mBAAa,KAAK,MACpB,MAAM,eAAA,GAEN,UAAU;AAAA,QACR,UAAU;AAAA,QACV,IAAI;AAAA,QACJ,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,UAAU;AAAA,MACX,CAAA;AAAA,IAAA;AAIE,WAAA,OAAA,iBAAiB,WAAW,mBAAmB,GAC/C,MAAM,OAAO,oBAAoB,WAAW,mBAAmB;AAAA,EAAA,GACrE,CAAC,SAAS,CAAC,IAEkB,KAAO,OAAA,cAAP,QAAkB,GAAA,MAAM,KAAK,+BAO3D,IAAA,qBAAC,gBAAe,EAAA,SAAS,iBAAiB,MACxC,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,MAAM;AAAA,QACN,QAAQ,kBAAkB,SAAY;AAAA,QACtC,UAAU,MAAM,CAAC;AAAA,QACjB,YAAY;AAAA,QACZ,UAAU;AAAA,QAET,UAAA;AAAA,UAAc,cAAA;AAAA,YACb,CAAC;AAAA,cACC;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA,KAAK;AAAA,cACL;AAAA,cACA,OAAO;AAAA,cACP,QAAQ;AAAA,cACR;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF,MACG,oBAAA,UAAA,EACE,UAAS,SAAA,mCACP,aAAY,EAAA,SAAkB,MAAY,SAAA,CAAoB,IAE/D;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC;AAAA,gBACA;AAAA,gBACA,OAAO;AAAA,gBACP;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA,QAAQ;AAAA,gBACR;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cAAA;AAAA,YAAA,KAhBS,GAAG,SAAS,eAAe,YAAY,KAAK,IAAI,IAAI,SAAS,EAmB5E;AAAA,UAEJ;AAAA,UAGC,cAAc,UAAU,KAAK,qBAC3B,oBAAA,aAAA,EAAY,SAAQ,mBAAkB;AAAA,QAAA;AAAA,MAAA;AAAA,IAE3C;AAAA,IACA,oBAAC,kBAAe,eAA8B;AAAA,IAC7C,oBAAA,OAAA,EAAI,eAAY,IAAG,KAAK,kBAAkB;AAAA,EAC7C,EAAA,CAAA,wBAzDQ,uBAAsB,CAAA,CAAA;AA2DlC,CAAC;AC9HM,SAAS,sBAAsB,EAAC,MAAM,EAAC,aAAuC;AACnF,QAAM,EAAC,kBAAkB,QAAW,IAAA,aAAA,GAC9B,CAAC,WAAW,IAAI,SAChB,EAAC,QAAQ,qBAAqB,UAAS,IAAI,WAAW,CAAA;AAGlD,YAAA,OACR,eAAe,EAAE,GACV,MAAM,eAAe,CAAE,CAAA,IAC7B,CAAA,CAAE;AAEC,QAAA,CAAC,EAAC,MAAA,GAAQ,QAAQ,IAAI,SAA2B,EAAC,OAAO,KAAA,CAAK;AAEpE,SAAI,QAAe,oBAAA,gBAAA,EAAe,MAAc,CAAA,IAG9C,oBAAC,iBAAc,SAAS,UACtB,UAAC,oBAAA,gBAAA,EAAe,MAAM,UAAU,YAAY,MAC1C,UAAC,qBAAA,uBAAA,EAAsB,qBAA0C,WAC/D,UAAA;AAAA,IAAC,oBAAA,eAAA,EAAc,cAAc,eAAgB,CAAA;AAAA,wBAC5C,gBAAe,EAAA;AAAA,EAAA,GAClB,GACF,EACF,CAAA;AAEJ;"}