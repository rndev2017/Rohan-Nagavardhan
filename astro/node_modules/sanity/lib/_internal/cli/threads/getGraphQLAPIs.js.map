{"version":3,"file":"getGraphQLAPIs.js","sources":["../../../../src/_internal/cli/threads/getGraphQLAPIs.ts"],"sourcesContent":["import {isMainThread, type MessagePort, parentPort, workerData} from 'node:worker_threads'\n\nimport {type CliV3CommandContext, type GraphQLAPIConfig} from '@sanity/cli'\nimport {type Schema} from '@sanity/types'\nimport {isPlainObject} from 'lodash'\nimport oneline from 'oneline'\nimport {type Workspace} from 'sanity'\n\nimport {type SchemaDefinitionish, type TypeResolvedGraphQLAPI} from '../actions/graphql/types'\nimport {getStudioWorkspaces} from '../util/getStudioWorkspaces'\n\nif (isMainThread || !parentPort) {\n  throw new Error('This module must be run as a worker thread')\n}\n\ngetGraphQLAPIsForked(parentPort)\n\nasync function getGraphQLAPIsForked(parent: MessagePort): Promise<void> {\n  const {cliConfig, cliConfigPath, workDir} = workerData\n  const resolved = await resolveGraphQLApis({cliConfig, cliConfigPath, workDir})\n  parent.postMessage(resolved)\n}\n\nasync function resolveGraphQLApis({\n  cliConfig,\n  cliConfigPath,\n  workDir,\n}: Pick<CliV3CommandContext, 'cliConfig' | 'cliConfigPath' | 'workDir'>): Promise<\n  TypeResolvedGraphQLAPI[]\n> {\n  const workspaces = await getStudioWorkspaces({basePath: workDir})\n  const numSources = workspaces.reduce(\n    (count, workspace) => count + workspace.unstable_sources.length,\n    0,\n  )\n  const multiSource = numSources > 1\n  const multiWorkspace = workspaces.length > 1\n  const hasGraphQLConfig = Boolean(cliConfig?.graphql)\n\n  if (workspaces.length === 0) {\n    throw new Error('No studio configuration found')\n  }\n\n  if (numSources === 0) {\n    throw new Error('No sources (project ID / dataset) configured')\n  }\n\n  // We can only automatically configure if there is a single workspace + source in play\n  if ((multiWorkspace || multiSource) && !hasGraphQLConfig) {\n    throw new Error(oneline`\n      Multiple workspaces/sources configured.\n      You must define an array of GraphQL APIs in ${cliConfigPath || 'sanity.cli.js'}\n      and specify which workspace/source to use.\n    `)\n  }\n\n  // No config is defined, but we have a single workspace + source, so use that\n  if (!hasGraphQLConfig) {\n    const {projectId, dataset, schema} = workspaces[0].unstable_sources[0]\n    return [{schemaTypes: getStrippedSchemaTypes(schema), projectId, dataset}]\n  }\n\n  // Explicity defined config\n  const apiDefs = validateCliConfig(cliConfig?.graphql || [])\n  return resolveGraphQLAPIsFromConfig(apiDefs, workspaces)\n}\n\nfunction resolveGraphQLAPIsFromConfig(\n  apiDefs: GraphQLAPIConfig[],\n  workspaces: Workspace[],\n): TypeResolvedGraphQLAPI[] {\n  const resolvedApis: TypeResolvedGraphQLAPI[] = []\n\n  for (const apiDef of apiDefs) {\n    const {workspace: workspaceName, source: sourceName} = apiDef\n    if (!workspaceName && workspaces.length > 1) {\n      throw new Error(\n        'Must define `workspace` name in GraphQL API config when multiple workspaces are defined',\n      )\n    }\n\n    // If we only have a single workspace defined, we can assume that is the intended one,\n    // even if no `workspace` is defined for the GraphQL API\n    const workspace =\n      !workspaceName && workspaces.length === 1\n        ? workspaces[0]\n        : workspaces.find((space) => space.name === (workspaceName || 'default'))\n\n    if (!workspace) {\n      throw new Error(`Workspace \"${workspaceName || 'default'}\" not found`)\n    }\n\n    // If we only have a single source defined, we can assume that is the intended one,\n    // even if no `source` is defined for the GraphQL API\n    const source =\n      !sourceName && workspace.unstable_sources.length === 1\n        ? workspace.unstable_sources[0]\n        : workspace.unstable_sources.find((src) => src.name === (sourceName || 'default'))\n\n    if (!source) {\n      throw new Error(\n        `Source \"${sourceName || 'default'}\" not found in workspace \"${\n          workspaceName || 'default'\n        }\"`,\n      )\n    }\n\n    resolvedApis.push({\n      ...apiDef,\n      dataset: source.dataset,\n      projectId: source.projectId,\n      schemaTypes: getStrippedSchemaTypes(source.schema),\n    })\n  }\n\n  return resolvedApis\n}\n\nfunction validateCliConfig(\n  config: GraphQLAPIConfig[],\n  configPath = 'sanity.cli.js',\n): GraphQLAPIConfig[] {\n  if (!Array.isArray(config)) {\n    throw new Error(`\"graphql\" key in \"${configPath}\" must be an array if defined`)\n  }\n\n  if (config.length === 0) {\n    throw new Error(`No GraphQL APIs defined in \"${configPath}\"`)\n  }\n\n  return config\n}\n\nfunction getStrippedSchemaTypes(schema: Schema): SchemaDefinitionish[] {\n  const schemaDef = schema._original || {types: []}\n  return schemaDef.types.map((type) => stripType(type))\n}\n\nfunction stripType(input: unknown): SchemaDefinitionish {\n  return strip(input) as SchemaDefinitionish\n}\n\nfunction strip(input: unknown): unknown {\n  if (Array.isArray(input)) {\n    return input.map((item) => strip(item)).filter((item) => typeof item !== 'undefined')\n  }\n\n  if (isPlainishObject(input)) {\n    return Object.keys(input).reduce(\n      (stripped, key) => {\n        stripped[key] = strip(input[key])\n        return stripped\n      },\n      {} as Record<string, unknown>,\n    )\n  }\n\n  return isBasicType(input) ? input : undefined\n}\n\nfunction isPlainishObject(input: unknown): input is Record<string, unknown> {\n  return isPlainObject(input)\n}\n\nfunction isBasicType(input: unknown): boolean {\n  const type = typeof input\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return true\n  }\n\n  if (type !== 'object') {\n    return false\n  }\n\n  return Array.isArray(input) || input === null || isPlainishObject(input)\n}\n"],"names":["isMainThread","parentPort","workerData","getStudioWorkspaces","oneline","isPlainObject"],"mappings":"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"}