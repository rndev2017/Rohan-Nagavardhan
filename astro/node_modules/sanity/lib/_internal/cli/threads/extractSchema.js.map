{"version":3,"file":"extractSchema.js","sources":["../../../../src/_internal/cli/threads/extractSchema.ts"],"sourcesContent":["import {isMainThread, parentPort, workerData as _workerData} from 'node:worker_threads'\n\nimport {extractSchema} from '@sanity/schema/_internal'\nimport {type Workspace} from 'sanity'\n\nimport {getStudioWorkspaces} from '../util/getStudioWorkspaces'\nimport {mockBrowserEnvironment} from '../util/mockBrowserEnvironment'\n\n/** @internal */\nexport interface ExtractSchemaWorkerData {\n  workDir: string\n  workspaceName?: string\n  enforceRequiredFields?: boolean\n  format: 'groq-type-nodes' | string\n}\n\n/** @internal */\nexport interface ExtractSchemaWorkerResult {\n  schema: ReturnType<typeof extractSchema>\n}\n\nif (isMainThread || !parentPort) {\n  throw new Error('This module must be run as a worker thread')\n}\n\nconst opts = _workerData as ExtractSchemaWorkerData\nconst cleanup = mockBrowserEnvironment(opts.workDir)\n\nasync function main() {\n  try {\n    if (opts.format !== 'groq-type-nodes') {\n      throw new Error(`Unsupported format: \"${opts.format}\"`)\n    }\n\n    const workspaces = await getStudioWorkspaces({basePath: opts.workDir})\n\n    const workspace = getWorkspace({workspaces, workspaceName: opts.workspaceName})\n\n    const schema = extractSchema(workspace.schema, {\n      enforceRequiredFields: opts.enforceRequiredFields,\n    })\n\n    parentPort?.postMessage({\n      schema,\n    } satisfies ExtractSchemaWorkerResult)\n  } finally {\n    cleanup()\n  }\n}\n\nmain()\n\nfunction getWorkspace({\n  workspaces,\n  workspaceName,\n}: {\n  workspaces: Workspace[]\n  workspaceName?: string\n}): Workspace {\n  if (workspaces.length === 0) {\n    throw new Error('No studio configuration found')\n  }\n\n  if (workspaces.length === 1) {\n    return workspaces[0]\n  }\n\n  if (workspaceName === undefined) {\n    throw new Error(\n      `Multiple workspaces found. Please specify which workspace to use with '--workspace'.`,\n    )\n  }\n  const workspace = workspaces.find((w) => w.name === workspaceName)\n  if (!workspace) {\n    throw new Error(`Could not find workspace \"${workspaceName}\"`)\n  }\n  return workspace\n}\n"],"names":["isMainThread","parentPort","_workerData","mockBrowserEnvironment","getStudioWorkspaces","extractSchema"],"mappings":";;AAqBA,IAAIA,oBAAAA,gBAAgB,CAACC,oBAAA;AACb,QAAA,IAAI,MAAM,4CAA4C;AAG9D,MAAM,OAAOC,oBAAA,YACP,UAAUC,uBAAA,uBAAuB,KAAK,OAAO;AAEnD,eAAe,OAAO;AAChB,MAAA;AACF,QAAI,KAAK,WAAW;AAClB,YAAM,IAAI,MAAM,wBAAwB,KAAK,MAAM,GAAG;AAGlD,UAAA,aAAa,MAAMC,oBAAAA,oBAAoB,EAAC,UAAU,KAAK,QAAA,CAAQ,GAE/D,YAAY,aAAa,EAAC,YAAY,eAAe,KAAK,cAAA,CAAc,GAExE,SAASC,UAAAA,cAAc,UAAU,QAAQ;AAAA,MAC7C,uBAAuB,KAAK;AAAA,IAAA,CAC7B;AAEDJ,wBAAAA,YAAY,YAAY;AAAA,MACtB;AAAA,IAAA,CACmC;AAAA,EAAA,UACrC;AACQ;EACV;AACF;AAEA;AAEA,SAAS,aAAa;AAAA,EACpB;AAAA,EACA;AACF,GAGc;AACZ,MAAI,WAAW,WAAW;AAClB,UAAA,IAAI,MAAM,+BAA+B;AAGjD,MAAI,WAAW,WAAW;AACxB,WAAO,WAAW,CAAC;AAGrB,MAAI,kBAAkB;AACpB,UAAM,IAAI;AAAA,MACR;AAAA,IAAA;AAGJ,QAAM,YAAY,WAAW,KAAK,CAAC,MAAM,EAAE,SAAS,aAAa;AACjE,MAAI,CAAC;AACH,UAAM,IAAI,MAAM,6BAA6B,aAAa,GAAG;AAExD,SAAA;AACT;"}