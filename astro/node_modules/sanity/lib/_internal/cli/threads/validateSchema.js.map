{"version":3,"file":"validateSchema.js","sources":["../../../../src/_internal/cli/threads/validateSchema.ts"],"sourcesContent":["import {isMainThread, parentPort, workerData as _workerData} from 'node:worker_threads'\n\nimport {groupProblems, validateSchema} from '@sanity/schema/_internal'\nimport {type SchemaValidationProblem, type SchemaValidationProblemGroup} from '@sanity/types'\nimport {resolveSchemaTypes} from 'sanity'\n\nimport {getStudioConfig} from '../util/getStudioWorkspaces'\nimport {mockBrowserEnvironment} from '../util/mockBrowserEnvironment'\n\n/** @internal */\nexport interface ValidateSchemaWorkerData {\n  workDir: string\n  workspace?: string\n  level?: SchemaValidationProblem['severity']\n}\n\n/** @internal */\nexport interface ValidateSchemaWorkerResult {\n  validation: SchemaValidationProblemGroup[]\n}\n\nconst {\n  workDir,\n  workspace: workspaceName,\n  level = 'warning',\n} = _workerData as ValidateSchemaWorkerData\n\nif (isMainThread || !parentPort) {\n  throw new Error('This module must be run as a worker thread')\n}\n\nconst cleanup = mockBrowserEnvironment(workDir)\n\ntry {\n  const workspaces = getStudioConfig({basePath: workDir})\n\n  if (!workspaces.length) {\n    throw new Error(`Configuration did not return any workspaces.`)\n  }\n\n  let workspace\n  if (workspaceName) {\n    workspace = workspaces.find((w) => w.name === workspaceName)\n    if (!workspace) {\n      throw new Error(`Could not find any workspaces with name \\`${workspaceName}\\``)\n    }\n  } else {\n    if (workspaces.length !== 1) {\n      throw new Error(\n        \"Multiple workspaces found. Please specify which workspace to use with '--workspace'.\",\n      )\n    }\n    workspace = workspaces[0]\n  }\n\n  const schemaTypes = resolveSchemaTypes({\n    config: workspace,\n    context: {dataset: workspace.dataset, projectId: workspace.projectId},\n  })\n\n  const validation = groupProblems(validateSchema(schemaTypes).getTypes())\n\n  const result: ValidateSchemaWorkerResult = {\n    validation: validation\n      .map((group) => ({\n        ...group,\n        problems: group.problems.filter((problem) =>\n          level === 'error' ? problem.severity === 'error' : true,\n        ),\n      }))\n      .filter((group) => group.problems.length),\n  }\n\n  parentPort?.postMessage(result)\n} finally {\n  cleanup()\n}\n"],"names":["_workerData","isMainThread","parentPort","mockBrowserEnvironment","getStudioConfig","resolveSchemaTypes","groupProblems","validateSchema"],"mappings":";;AAqBA,MAAM;AAAA,EACJ;AAAA,EACA,WAAW;AAAA,EACX,QAAQ;AACV,IAAIA;AAEJ,IAAIC,oBAAAA,gBAAgB,CAACC,oBAAA;AACb,QAAA,IAAI,MAAM,4CAA4C;AAG9D,MAAM,UAAUC,uBAAAA,uBAAuB,OAAO;AAE9C,IAAI;AACF,QAAM,aAAaC,oBAAA,gBAAgB,EAAC,UAAU,QAAQ,CAAA;AAEtD,MAAI,CAAC,WAAW;AACR,UAAA,IAAI,MAAM,8CAA8C;AAG5D,MAAA;AACA,MAAA;AACF,QAAA,YAAY,WAAW,KAAK,CAAC,MAAM,EAAE,SAAS,aAAa,GACvD,CAAC;AACH,YAAM,IAAI,MAAM,6CAA6C,aAAa,IAAI;AAAA,SAE3E;AACL,QAAI,WAAW,WAAW;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MAAA;AAGJ,gBAAY,WAAW,CAAC;AAAA,EAC1B;AAEA,QAAM,cAAcC,OAAAA,mBAAmB;AAAA,IACrC,QAAQ;AAAA,IACR,SAAS,EAAC,SAAS,UAAU,SAAS,WAAW,UAAU,UAAS;AAAA,EACrE,CAAA,GAIK,SAAqC;AAAA,IACzC,YAHiBC,UAAAA,cAAcC,UAAAA,eAAe,WAAW,EAAE,UAAU,EAIlE,IAAI,CAAC,WAAW;AAAA,MACf,GAAG;AAAA,MACH,UAAU,MAAM,SAAS;AAAA,QAAO,CAAC,YAC/B,UAAU,UAAU,QAAQ,aAAa,UAAU;AAAA,MACrD;AAAA,IAAA,EACA,EACD,OAAO,CAAC,UAAU,MAAM,SAAS,MAAM;AAAA,EAAA;AAG5CL,kCAAY,YAAY,MAAM;AAChC,UAAE;AACQ;AACV;"}