{"version":3,"file":"previewServer.js","sources":["../../src/_internal/cli/server/buildStaticFiles.ts","../../src/_internal/cli/server/vite/plugin-sanity-basepath-redirect.ts","../../src/_internal/cli/server/previewServer.ts"],"sourcesContent":["import {constants as fsConstants} from 'node:fs'\nimport fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type UserViteConfig} from '@sanity/cli'\nimport readPkgUp from 'read-pkg-up'\nimport {build} from 'vite'\n\nimport {debug as serverDebug} from './debug'\nimport {extendViteConfigWithUserConfig, finalizeViteConfig, getViteConfig} from './getViteConfig'\nimport {writeSanityRuntime} from './runtime'\nimport {generateWebManifest} from './webManifest'\n\nconst debug = serverDebug.extend('static')\n\nexport interface ChunkModule {\n  name: string\n  originalLength: number\n  renderedLength: number\n}\n\nexport interface ChunkStats {\n  name: string\n  modules: ChunkModule[]\n}\n\nexport interface StaticBuildOptions {\n  cwd: string\n  basePath: string\n  outputDir: string\n  minify?: boolean\n  profile?: boolean\n  sourceMap?: boolean\n\n  vite?: UserViteConfig\n}\n\nexport async function buildStaticFiles(\n  options: StaticBuildOptions,\n): Promise<{chunks: ChunkStats[]}> {\n  const {\n    cwd,\n    outputDir,\n    sourceMap = false,\n    minify = true,\n    basePath,\n    vite: extendViteConfig,\n  } = options\n\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode: false, watch: false, basePath})\n\n  debug('Resolving vite config')\n  const mode = 'production'\n  let viteConfig = await getViteConfig({\n    cwd,\n    basePath,\n    outputDir,\n    minify,\n    sourceMap,\n    mode,\n  })\n\n  // Extend Vite configuration with user-provided config\n  if (extendViteConfig) {\n    viteConfig = await extendViteConfigWithUserConfig(\n      {command: 'build', mode},\n      viteConfig,\n      extendViteConfig,\n    )\n    viteConfig = finalizeViteConfig(viteConfig)\n  }\n\n  // Copy files placed in /static to the built /static\n  debug('Copying static files from /static to output dir')\n  const staticPath = path.join(outputDir, 'static')\n  await copyDir(path.join(cwd, 'static'), staticPath)\n\n  // Write favicons, not overwriting ones that already exist, to static folder\n  debug('Writing favicons to output dir')\n  const faviconBasePath = `${basePath.replace(/\\/+$/, '')}/static`\n  await writeFavicons(faviconBasePath, staticPath)\n\n  debug('Bundling using vite')\n  const bundle = await build(viteConfig)\n  debug('Bundling complete')\n\n  // For typescript only - this shouldn't ever be the case given we're not watching\n  if (Array.isArray(bundle) || !('output' in bundle)) {\n    return {chunks: []}\n  }\n\n  const stats: ChunkStats[] = []\n  bundle.output.forEach((chunk) => {\n    if (chunk.type !== 'chunk') {\n      return\n    }\n\n    stats.push({\n      name: chunk.name,\n      modules: Object.entries(chunk.modules).map(([rawFilePath, chunkModule]) => {\n        const filePath = rawFilePath.startsWith('\\x00')\n          ? rawFilePath.slice('\\x00'.length)\n          : rawFilePath\n\n        return {\n          name: path.isAbsolute(filePath) ? path.relative(cwd, filePath) : filePath,\n          originalLength: chunkModule.originalLength,\n          renderedLength: chunkModule.renderedLength,\n        }\n      }),\n    })\n  })\n\n  return {chunks: stats}\n}\n\nasync function copyDir(srcDir: string, destDir: string, skipExisting?: boolean): Promise<void> {\n  await fs.mkdir(destDir, {recursive: true})\n\n  for (const file of await tryReadDir(srcDir)) {\n    const srcFile = path.resolve(srcDir, file)\n    if (srcFile === destDir) {\n      continue\n    }\n\n    const destFile = path.resolve(destDir, file)\n    const stat = await fs.stat(srcFile)\n\n    if (stat.isDirectory()) {\n      await copyDir(srcFile, destFile, skipExisting)\n    } else if (skipExisting) {\n      await fs.copyFile(srcFile, destFile, fsConstants.COPYFILE_EXCL).catch(skipIfExistsError)\n    } else {\n      await fs.copyFile(srcFile, destFile)\n    }\n  }\n}\n\nasync function tryReadDir(dir: string): Promise<string[]> {\n  try {\n    const content = await fs.readdir(dir)\n    return content\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return []\n    }\n\n    throw err\n  }\n}\n\nfunction skipIfExistsError(err: Error & {code: string}) {\n  if (err.code === 'EEXIST') {\n    return\n  }\n\n  throw err\n}\n\nasync function writeFavicons(basePath: string, destDir: string): Promise<void> {\n  const sanityPkgPath = (await readPkgUp({cwd: __dirname}))?.path\n  const faviconsPath = sanityPkgPath\n    ? path.join(path.dirname(sanityPkgPath), 'static', 'favicons')\n    : undefined\n\n  if (!faviconsPath) {\n    throw new Error('Unable to resolve `sanity` module root')\n  }\n\n  await fs.mkdir(destDir, {recursive: true})\n  await copyDir(faviconsPath, destDir, true)\n  await writeWebManifest(basePath, destDir)\n\n  // Copy the /static/favicon.ico to /favicon.ico as well, because some tools/browsers\n  // blindly expects it to be there before requesting the HTML containing the actual path\n  await fs.copyFile(path.join(destDir, 'favicon.ico'), path.join(destDir, '..', 'favicon.ico'))\n}\n\nasync function writeWebManifest(basePath: string, destDir: string): Promise<void> {\n  const content = JSON.stringify(generateWebManifest(basePath), null, 2)\n  await fs\n    .writeFile(path.join(destDir, 'manifest.webmanifest'), content, 'utf8')\n    .catch(skipIfExistsError)\n}\n","import {type Plugin} from 'vite'\n\nexport function sanityBasePathRedirectPlugin(basePath: string | undefined): Plugin {\n  return {\n    name: 'sanity/server/sanity-base-path-redirect',\n    apply: 'serve',\n    configurePreviewServer(vitePreviewServer) {\n      return () => {\n        if (!basePath) {\n          return\n        }\n\n        vitePreviewServer.middlewares.use((req, res, next) => {\n          if (req.url !== '/') {\n            next()\n            return\n          }\n\n          res.writeHead(302, {Location: basePath})\n          res.end()\n        })\n      }\n    },\n  }\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type UserViteConfig} from '@sanity/cli'\nimport chalk from 'chalk'\nimport {type InlineConfig, preview} from 'vite'\n\nimport {debug as serverDebug} from './debug'\nimport {extendViteConfigWithUserConfig} from './getViteConfig'\nimport {sanityBasePathRedirectPlugin} from './vite/plugin-sanity-basepath-redirect'\n\nconst debug = serverDebug.extend('preview')\n\nexport interface PreviewServer {\n  urls: {local: string[]; network: string[]}\n  close(): Promise<void>\n}\n\nexport interface PreviewServerOptions {\n  root: string\n  cwd: string\n\n  httpPort: number\n  httpHost?: string\n\n  vite?: UserViteConfig\n}\n\nexport async function startPreviewServer(options: PreviewServerOptions): Promise<PreviewServer> {\n  const {httpPort, httpHost, root, vite: extendViteConfig} = options\n  const startTime = Date.now()\n\n  const indexPath = path.join(root, 'index.html')\n  let basePath: string | undefined\n  try {\n    const index = await fs.readFile(indexPath, 'utf8')\n    basePath = tryResolveBasePathFromIndex(index)\n  } catch (err) {\n    if (err.code !== 'ENOENT') {\n      throw err\n    }\n\n    const error = new Error(\n      `Could not find a production build in the '${root}' directory.\\nTry building your studio app with 'sanity build' before starting the preview server.`,\n    )\n    error.name = 'BUILD_NOT_FOUND'\n    throw error\n  }\n\n  const mode = 'production'\n  let previewConfig: InlineConfig = {\n    root,\n    base: basePath || '/',\n    plugins: [sanityBasePathRedirectPlugin(basePath)],\n    configFile: false,\n    preview: {\n      port: httpPort,\n      host: httpHost,\n      strictPort: true,\n    },\n    // Needed for vite to not serve `root/dist`\n    build: {\n      outDir: root,\n    },\n    mode,\n  }\n\n  // Extend Vite configuration with user-provided config\n  if (extendViteConfig) {\n    previewConfig = await extendViteConfigWithUserConfig(\n      {command: 'serve', mode},\n      previewConfig,\n      extendViteConfig,\n    )\n  }\n\n  debug('Creating vite server')\n  const server = await preview(previewConfig)\n  const warn = server.config.logger.warn\n  const info = server.config.logger.info\n  const url = server.resolvedUrls.local[0]\n\n  if (typeof basePath === 'undefined') {\n    warn('Could not determine base path from index.html, using \"/\" as default')\n  } else if (basePath && basePath !== '/') {\n    info(`Using resolved base path from static build: ${chalk.cyan(basePath)}`)\n  }\n\n  const startupDuration = Date.now() - startTime\n\n  info(\n    `Sanity Studio ` +\n      `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n      `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n      `and running at ${chalk.cyan(url)} (production preview mode)`,\n  )\n\n  return {\n    urls: server.resolvedUrls,\n    close: () =>\n      new Promise((resolve, reject) =>\n        server.httpServer.close((err) => (err ? reject(err) : resolve())),\n      ),\n  }\n}\n\nfunction tryResolveBasePathFromIndex(index: string): string | undefined {\n  // <script ... src=\"/some-base-path/static/sanity-a3cc3d86.js\"></script>\n  const basePath = index.match(/<script[^>]+src=\"(.*?)\\/static\\/sanity-/)?.[1]\n\n  // We _expect_ to be able to find the base path. If we can't, we should warn.\n  // Note that we're checking for `undefined` here, since an empty string is a\n  // valid base path.\n  if (typeof basePath === 'undefined') {\n    return undefined\n  }\n\n  // In the case of an empty base path, we still want to return `/` to indicate\n  // that we _found_ the basepath - it just happens to be empty. Eg:\n  // <script ... src = \"/static/sanity-a3cc3d86.js\"></script>\n  // Which differs from not being able to find the script tag at all, in which\n  // case we'll want to show a warning to indicate that it is an abnormality.\n  return basePath === '' ? '/' : basePath\n}\n"],"names":["debug","serverDebug","writeSanityRuntime","getViteConfig","extendViteConfigWithUserConfig","finalizeViteConfig","path","build","fs","fsConstants","readPkgUp","generateWebManifest","preview","chalk"],"mappings":"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"}