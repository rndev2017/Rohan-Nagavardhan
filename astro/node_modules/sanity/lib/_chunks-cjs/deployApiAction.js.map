{"version":3,"file":"deployApiAction.js","sources":["../../src/_internal/cli/util/getUrlHeaders.ts","../../src/_internal/cli/actions/graphql/helpUrls.ts","../../src/_internal/cli/actions/graphql/SchemaError.ts","../../src/_internal/cli/actions/graphql/extractFromSanitySchema.ts","../../src/_internal/cli/actions/graphql/helpers.ts","../../src/_internal/cli/actions/graphql/gen1/generateTypeFilters.ts","../../src/_internal/cli/actions/graphql/gen1/generateTypeQueries.ts","../../src/_internal/cli/actions/graphql/gen1/index.ts","../../src/_internal/cli/actions/graphql/gen2/filters/booleanFilters.ts","../../src/_internal/cli/actions/graphql/gen2/filters/dateFilters.ts","../../src/_internal/cli/actions/graphql/gen2/filters/dateTimeFilters.ts","../../src/_internal/cli/actions/graphql/gen2/filters/documentFilters.ts","../../src/_internal/cli/actions/graphql/gen2/filters/floatFilters.ts","../../src/_internal/cli/actions/graphql/gen2/filters/idFilters.ts","../../src/_internal/cli/actions/graphql/gen2/filters/integerFilters.ts","../../src/_internal/cli/actions/graphql/gen2/filters/stringFilters.ts","../../src/_internal/cli/actions/graphql/gen2/generateTypeFilters.ts","../../src/_internal/cli/actions/graphql/gen2/generateTypeQueries.ts","../../src/_internal/cli/actions/graphql/gen2/generateTypeSortings.ts","../../src/_internal/cli/actions/graphql/gen2/index.ts","../../src/_internal/cli/actions/graphql/gen3/filters/documentFilters.ts","../../src/_internal/cli/actions/graphql/gen3/utils.ts","../../src/_internal/cli/actions/graphql/gen3/generateTypeFilters.ts","../../src/_internal/cli/actions/graphql/gen3/generateTypeQueries.ts","../../src/_internal/cli/actions/graphql/gen3/generateTypeSortings.ts","../../src/_internal/cli/actions/graphql/gen3/index.ts","../../src/_internal/cli/actions/graphql/deployApiAction.ts"],"sourcesContent":["import {getIt} from 'get-it'\n// eslint-disable-next-line import/extensions\nimport {promise} from 'get-it/middleware'\n\nconst request = getIt([promise()])\n\nexport class HttpError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'HttpError'\n  }\n\n  statusCode?: number\n}\n\nexport async function getUrlHeaders(url: string, headers = {}): Promise<Record<string, string>> {\n  const response = await request({\n    url,\n    stream: true,\n    maxRedirects: 0,\n    method: 'HEAD',\n    headers,\n  })\n\n  if (response.statusCode >= 400) {\n    const error = new HttpError(`Request returned HTTP ${response.statusCode}`)\n    error.statusCode = response.statusCode\n    throw error\n  }\n\n  response.body.resume()\n  return response.headers\n}\n","export const SCHEMA_LIFT_ANONYMOUS_OBJECT_TYPE = 'schema-lift-anonymous-object-type'\n","import {type CliOutputter} from '@sanity/cli'\nimport {generateHelpUrl} from '@sanity/generate-help-url'\nimport {type SchemaValidationProblemGroup} from '@sanity/types'\nimport {upperFirst} from 'lodash'\nimport logSymbols from 'log-symbols'\n\n// eslint-disable-next-line no-console\nconst consoleOutputter = {error: (...args: unknown[]) => console.error(...args)}\n\nexport class SchemaError extends Error {\n  problemGroups: SchemaValidationProblemGroup[]\n\n  constructor(problemGroups: SchemaValidationProblemGroup[]) {\n    super('Schema errors encountered')\n    this.name = 'SchemaError'\n    this.problemGroups = problemGroups\n  }\n\n  print(output: CliOutputter): void {\n    const logger = output || consoleOutputter\n    logger.error('Uh oh… found errors in schema:\\n')\n\n    this.problemGroups.forEach((group) => {\n      group.problems.forEach((problem) => {\n        const icon = logSymbols[problem.severity] || logSymbols.info\n        output.error(`  ${icon} ${upperFirst(problem.severity)}: ${getPath(group.path)}`)\n        output.error(`  ${problem.message}`)\n        if (problem.helpId) {\n          output.error(`  See ${generateHelpUrl(problem.helpId)}`)\n        }\n        output.error('')\n      })\n    })\n  }\n}\n\nfunction getPath(path: SchemaValidationProblemGroup['path']) {\n  return path\n    .map((segment) => {\n      if (segment.kind === 'type' && segment.name && segment.type) {\n        return `${segment.name} - (${segment.type})`\n      }\n      if (segment.kind === 'property' && segment.name) {\n        return segment.name\n      }\n      return null\n    })\n    .filter(Boolean)\n    .join(' / ')\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {Schema} from '@sanity/schema'\nimport {\n  type ArraySchemaType,\n  type CrossDatasetReferenceSchemaType,\n  type IntrinsicTypeName,\n  isDeprecationConfiguration,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type ReferenceSchemaType,\n  type Schema as CompiledSchema,\n  type SchemaType,\n} from '@sanity/types'\nimport {startCase, uniqBy} from 'lodash'\nimport oneline from 'oneline'\n\nimport * as helpUrls from './helpUrls'\nimport {SchemaError} from './SchemaError'\nimport {\n  type ApiSpecification,\n  type ConvertedFieldDefinition,\n  type ConvertedInterface,\n  type ConvertedType,\n  type ConvertedUnion,\n  type Deprecation,\n} from './types'\n\nconst skipTypes = ['document', 'reference']\nconst allowedJsonTypes = ['object', 'array']\nconst disallowedCustomizedMembers = ['object', 'array', 'image', 'file', 'block']\nconst disabledBlockFields = ['markDefs']\nconst scalars = ['string', 'number', 'boolean']\n\n/**\n * Data required elsewhere in the API specification generation process, but that should not be\n * included in the generated API specification.\n */\nexport const internal = Symbol('internal')\n\nfunction getBaseType(baseSchema: CompiledSchema, typeName: IntrinsicTypeName): SchemaType {\n  if (typeName === 'crossDatasetReference') {\n    return Schema.compile({\n      types: (baseSchema._original?.types || []).concat([\n        {\n          name: `__placeholder__`,\n          type: 'crossDatasetReference',\n          // Just needs _something_ to refer to, doesn't matter what\n          to: [{type: 'sanity.imageAsset'}],\n        },\n      ]),\n    }).get('__placeholder__')\n  }\n\n  return Schema.compile({\n    types: (baseSchema._original?.types || []).concat([\n      {name: `__placeholder__`, type: typeName, options: {hotspot: true}},\n    ]),\n  }).get('__placeholder__')\n}\n\nfunction getTypeName(str: string): string {\n  const name = startCase(str).replace(/\\s+/g, '')\n  return name === 'Number' ? 'Float' : name\n}\n\nfunction isBaseType(type: SchemaType): boolean {\n  return (\n    type.name !== type.jsonType &&\n    allowedJsonTypes.includes(type.jsonType) &&\n    !skipTypes.includes(type.name) &&\n    !isReference(type)\n  )\n}\n\nfunction isBlockType(typeDef: SchemaType | ObjectField): boolean {\n  if (typeDef.name === 'block') {\n    return true\n  }\n\n  if (typeDef.type) {\n    return isBlockType(typeDef.type)\n  }\n\n  return false\n}\n\nfunction hasBlockParent(typeDef: SchemaType): boolean {\n  if (typeDef.type && typeDef.type.name === 'block' && !typeDef.type.type) {\n    return true\n  }\n\n  return Boolean(typeDef.type && hasBlockParent(typeDef.type))\n}\n\nfunction isArrayOfBlocks(typeDef: SchemaType | ObjectField): boolean {\n  const type = typeDef.type || typeDef\n  if (!('jsonType' in type) || type.jsonType !== 'array') {\n    return false\n  }\n\n  return (type.of || []).some(hasBlockParent)\n}\n\nfunction isType(typeDef: SchemaType | ObjectField | ObjectFieldType, typeName: string): boolean {\n  let type: SchemaType | ObjectField | ObjectFieldType | undefined = typeDef\n  while (type) {\n    if (type.name === typeName || (type.type && type.type.name === typeName)) {\n      return true\n    }\n\n    type = type.type\n  }\n  return false\n}\n\nfunction isReference(\n  typeDef: SchemaType | ObjectField | ObjectFieldType,\n): typeDef is ReferenceSchemaType {\n  return isType(typeDef, 'reference')\n}\n\nfunction isCrossDatasetReference(\n  typeDef: SchemaType | ObjectField | ObjectFieldType | CrossDatasetReferenceSchemaType,\n) {\n  return isType(typeDef, 'crossDatasetReference')\n}\n\nfunction getCrossDatasetReferenceMetadata(\n  typeDef: SchemaType | ObjectField | ObjectFieldType | CrossDatasetReferenceSchemaType,\n) {\n  if (!isCrossDatasetReference(typeDef)) return undefined\n\n  function getTypeNames(\n    type: SchemaType | ObjectField | ObjectFieldType | CrossDatasetReferenceSchemaType | undefined,\n  ) {\n    if (!type) return undefined\n    if (!('to' in type)) return getTypeNames(type.type)\n    return type.to.map((t) => t.type).filter((t): t is string => typeof t === 'string')\n  }\n\n  function getDataset(\n    type: SchemaType | ObjectField | ObjectFieldType | CrossDatasetReferenceSchemaType | undefined,\n  ) {\n    if (!type) return undefined\n    if ('dataset' in type && typeof type.dataset === 'string') return type.dataset\n    if (type.type) return getDataset(type.type)\n    return undefined\n  }\n\n  const typeNames = getTypeNames(typeDef)\n  if (!typeNames) return undefined\n\n  const dataset = getDataset(typeDef)\n  if (typeof dataset !== 'string') return undefined\n\n  return {typeNames, dataset}\n}\n\nexport function extractFromSanitySchema(\n  sanitySchema: CompiledSchema,\n  extractOptions: {nonNullDocumentFields?: boolean; withUnionCache?: boolean} = {},\n): ApiSpecification {\n  const {nonNullDocumentFields, withUnionCache} = extractOptions\n  const unionRecursionGuards = new Set<string>()\n  const unionDefinitionCache = new Map<string, any>()\n  const hasErrors =\n    sanitySchema._validation &&\n    sanitySchema._validation.some((group) =>\n      group.problems.some((problem) => problem.severity === 'error'),\n    )\n\n  if (hasErrors && Array.isArray(sanitySchema._validation)) {\n    throw new SchemaError(sanitySchema._validation)\n  }\n\n  const sanityTypes = sanitySchema._original?.types || []\n  const typeNames = sanitySchema.getTypeNames()\n  const unionTypes: ConvertedUnion[] = []\n  const types: ConvertedType[] = []\n\n  for (const typeName of typeNames) {\n    const schemaType = sanitySchema.get(typeName)\n    if (schemaType === undefined) {\n      continue\n    }\n    if (!isBaseType(schemaType)) {\n      continue\n    }\n\n    const convertedType = convertType(schemaType)\n    types.push(convertedType)\n  }\n\n  const withUnions = [...types, ...unionTypes]\n  return {types: withUnions, interfaces: [getDocumentInterfaceDefinition()]}\n\n  function isTopLevelType(typeName: string): boolean {\n    return typeNames.includes(typeName)\n  }\n\n  function mapFieldType(field: SchemaType | ObjectField | ObjectFieldType): string {\n    if (!field.type) {\n      throw new Error('Field has no type!')\n    }\n\n    const jsonType = 'jsonType' in field ? field.jsonType : ''\n    const isScalar = scalars.includes(jsonType)\n    if (isScalar && jsonType === 'number') {\n      return hasValidationFlag(field, 'integer') ? 'Int' : 'Float'\n    } else if (isScalar) {\n      return getTypeName(jsonType)\n    }\n\n    const type = field.type.type || field.type\n\n    // In the case of nested scalars, recurse (markdown -> longText -> text -> string)\n    if (type.type) {\n      return mapFieldType(type)\n    }\n\n    switch (type.name) {\n      case 'number':\n        return hasValidationFlag(field, 'integer') ? 'Int' : 'Float'\n      default:\n        return getTypeName(type.name)\n    }\n  }\n\n  function isArrayType(type: SchemaType | ObjectField): type is ArraySchemaType {\n    return Boolean(\n      ('jsonType' in type && type.jsonType === 'array') ||\n        (type.type && type.type.jsonType === 'array'),\n    )\n  }\n\n  function _convertType(\n    type: SchemaType | ObjectField,\n    parent: string,\n    options: {isField?: boolean},\n  ): ConvertedType {\n    let name: string | undefined\n    if (type.type) {\n      name = type.type.name\n    } else if ('jsonType' in type) {\n      name = type.jsonType\n    }\n\n    if (isReference(type)) {\n      return getReferenceDefinition(type, parent)\n    }\n\n    if (isArrayType(type)) {\n      return getArrayDefinition(type, parent, options)\n    }\n\n    if (name === 'document') {\n      return getDocumentDefinition(type as ObjectSchemaType)\n    }\n\n    if (name === 'block' || name === 'object') {\n      return getObjectDefinition(type, parent)\n    }\n\n    if (hasFields(type)) {\n      return getObjectDefinition(type, parent)\n    }\n\n    return {\n      type: mapFieldType(type),\n      description: getDescription(type),\n    } as any\n  }\n\n  function convertType(\n    type: SchemaType | ObjectField,\n    parent?: string,\n    props: {fieldName?: string} & Partial<Deprecation> = {},\n  ): ConvertedType {\n    const mapped = _convertType(type, parent || '', {isField: Boolean(props.fieldName)})\n    const gqlName = props.fieldName || mapped.name\n    const originalName = type.name\n    const original = gqlName === originalName ? {} : {originalName: originalName}\n    const crossDatasetReferenceMetadata = getCrossDatasetReferenceMetadata(type)\n\n    return {\n      ...getDeprecation(type.type),\n      ...props,\n      ...mapped,\n      ...original,\n      ...(crossDatasetReferenceMetadata && {crossDatasetReferenceMetadata}),\n    }\n  }\n\n  function isField(def: SchemaType | ObjectField): def is ObjectField {\n    return !('jsonType' in def) || !def.jsonType\n  }\n\n  // eslint-disable-next-line complexity\n  function getObjectDefinition(def: SchemaType | ObjectField, parent?: string): ConvertedType {\n    const isInline = isField(def)\n    const isDocument = def.type ? def.type.name === 'document' : false\n    const actualType = isInline ? def.type : def\n\n    if (typeNeedsHoisting(actualType)) {\n      throw createLiftTypeError(def.name, parent || '', actualType.name)\n    }\n\n    if (isInline && parent && def.type.name === 'object') {\n      throw createLiftTypeError(def.name, parent)\n    }\n\n    if (parent && def.type && isTopLevelType(def.type.name)) {\n      return {type: getTypeName(def.type.name)} as any\n    }\n\n    const name = `${parent || ''}${getTypeName(def.name)}`\n    const fields = collectFields(def)\n    const firstUnprefixed = Math.max(\n      0,\n      fields.findIndex((field) => field.name[0] !== '_'),\n    )\n\n    const keyField = createStringField('_key')\n\n    fields.splice(firstUnprefixed, 0, keyField)\n\n    if (!isDocument) {\n      fields.splice(firstUnprefixed + 1, 0, createStringField('_type'))\n    }\n\n    const objectIsBlock = isBlockType(def)\n    const objectFields = objectIsBlock\n      ? fields.filter((field) => !disabledBlockFields.includes(field.name))\n      : fields\n\n    return {\n      kind: 'Type',\n      name,\n      type: 'Object',\n      description: getDescription(def),\n      fields: objectFields.map((field) =>\n        isArrayOfBlocks(field)\n          ? buildRawField(field, name)\n          : (convertType(field, name, {\n              fieldName: field.name,\n              ...getDeprecation(def),\n            }) as any),\n      ),\n      [internal]: {\n        ...getDeprecation(def),\n      },\n    }\n  }\n\n  function buildRawField(field: ObjectField, parentName: string) {\n    return {\n      ...convertType(field, parentName, {fieldName: `${field.name}Raw`}),\n      type: 'JSON',\n      isRawAlias: true,\n    }\n  }\n\n  function createStringField(name: string): ObjectField {\n    return {\n      name,\n      type: {\n        jsonType: 'string',\n        name: 'string',\n        type: {name: 'string', type: undefined, jsonType: 'string'},\n      },\n    }\n  }\n\n  function collectFields(def: SchemaType | ObjectField) {\n    const fields = gatherAllFields(def)\n    if (fields.length > 0) {\n      return fields\n    }\n\n    const extended = getBaseType(sanitySchema, def.name as IntrinsicTypeName)\n    return gatherAllFields(extended)\n  }\n\n  function getReferenceDefinition(def: SchemaType, parent: string): any {\n    const base = {description: getDescription(def), isReference: true}\n    const candidates = arrayify(gatherAllReferenceCandidates(def))\n    if (candidates.length === 0) {\n      throw new Error('No candidates for reference')\n    }\n\n    if (candidates.length === 1) {\n      return {type: getTypeName(candidates[0].type.name), ...base}\n    }\n\n    const unionDefinition = getUnionDefinition(candidates, def, {grandParent: parent})\n    return {...unionDefinition, ...base}\n  }\n\n  function getArrayDefinition(\n    def: ArraySchemaType,\n    parent: string,\n    options: {isField?: boolean} = {},\n  ): any {\n    const base = {description: getDescription(def), kind: 'List'}\n    const name = !options.isField && def.name ? {name: getTypeName(def.name)} : {}\n    const candidates = def.type?.type && 'of' in def.type ? arrayify(def.type.of) : def.of\n\n    return candidates.length === 1\n      ? {\n          children: getArrayChildDefinition(candidates[0], def),\n          ...base,\n          ...name,\n        }\n      : {\n          children: getUnionDefinition(candidates, def, {grandParent: parent}),\n          ...base,\n          ...name,\n        }\n  }\n\n  function getArrayChildDefinition(child: SchemaType, arrayDef: SchemaType) {\n    if (typeNeedsHoisting(child)) {\n      // Seems to be inline? Should be hoisted?\n      throw createLiftTypeError(child.name, arrayDef.name)\n    }\n\n    if (isReference(child)) {\n      return getReferenceDefinition(child, arrayDef.name)\n    }\n\n    // In the case of nested scalars, recurse (markdown -> longText -> text -> string)\n    if (scalars.includes(child.jsonType) && !scalars.includes(child.name)) {\n      return {type: mapFieldType(child)}\n    }\n\n    return {type: getTypeName(child.name)}\n  }\n\n  function typeNeedsHoisting(type: SchemaType & {isCustomized?: boolean}): boolean {\n    if (type.name === 'object') {\n      return true\n    }\n\n    if (type.jsonType === 'object' && !isTopLevelType(type.name)) {\n      return true\n    }\n\n    if (type.isCustomized && !isTopLevelType(type.name)) {\n      return true\n    }\n\n    if (type.isCustomized && disallowedCustomizedMembers.includes(type.name)) {\n      return true\n    }\n\n    return false\n  }\n\n  function getUnionDefinition(\n    candidates: ObjectSchemaType[],\n    parent: SchemaType,\n    options: {grandParent?: string} = {},\n  ) {\n    if (candidates.length < 2) {\n      throw new Error('Not enough candidates for a union type')\n    }\n\n    // #1482: When creating union definition do not get caught in recursion loop\n    // for types that reference themselves\n    const guardPathName = `${typeof parent === 'object' ? parent.name : parent}`\n    if (unionRecursionGuards.has(guardPathName)) {\n      return {}\n    }\n\n    const unionCacheKey = `${options.grandParent}-${guardPathName}-${candidates\n      .map((c) => c.type?.name)\n      .join('-')}`\n    if (withUnionCache && unionDefinitionCache.has(unionCacheKey)) {\n      return unionDefinitionCache.get(unionCacheKey)\n    }\n\n    try {\n      unionRecursionGuards.add(guardPathName)\n\n      candidates.forEach((def, i) => {\n        if (typeNeedsHoisting(def)) {\n          throw createLiftTypeArrayError(\n            i,\n            parent.name,\n            def.type ? def.type.name : def.name,\n            options.grandParent,\n          )\n        }\n      })\n\n      const converted = candidates.map((def) => convertType(def))\n\n      const getName = (def: {type: string | {name: string}}): string =>\n        typeof def.type === 'string' ? def.type : def.type.name\n\n      // We might end up with union types being returned - these needs to be flattened\n      // so that an ImageOr(PersonOrPet) becomes ImageOrPersonOrPet\n      const flattened = converted.reduce(\n        (acc, candidate) => {\n          const union = unionTypes.find((item) => item.name === candidate.type)\n          return union\n            ? acc.concat(union.types.map((type) => ({type, isReference: candidate.isReference})))\n            : acc.concat(candidate)\n        },\n        [] as {name?: string; type: string | {name: string}; isReference?: boolean}[],\n      )\n\n      let allCandidatesAreDocuments = true\n      const refs: (string | {name: string})[] = []\n      const inlineObjs: string[] = []\n      const allTypeNames: string[] = []\n      for (const def of flattened) {\n        if (def.isReference) {\n          refs.push(def.type)\n        }\n        if (!isReference) {\n          inlineObjs.push(def.name || '')\n        }\n\n        const typeName = typeof def.type === 'string' ? def.type : def.type.name\n\n        // Here we remove duplicates, as they might appear twice due to in-line usage of types as well as references\n        if (def.name || def.type) {\n          allTypeNames.push(def.isReference ? typeName : def.name || '')\n        }\n\n        const typeDef = sanityTypes.find((type) => type.name === getName(def))\n        if (!typeDef || typeDef.type !== 'document') {\n          allCandidatesAreDocuments = false\n        }\n      }\n\n      const interfaces = allCandidatesAreDocuments ? ['Document'] : undefined\n      const possibleTypes = [...new Set(allTypeNames)].sort()\n\n      if (possibleTypes.length < 2) {\n        throw new Error(`Not enough types for a union type. Parent: ${parent.name}`)\n      }\n\n      const name = possibleTypes.join('Or')\n\n      if (!unionTypes.some((item) => item.name === name)) {\n        unionTypes.push({\n          kind: 'Union',\n          name,\n          types: possibleTypes,\n          interfaces,\n        })\n      }\n\n      const references = refs.length > 0 ? refs : undefined\n      const inlineObjects = inlineObjs.length > 0 ? inlineObjs : undefined\n\n      const unionDefinition = isReference(parent)\n        ? {type: name, references}\n        : {type: name, references, inlineObjects}\n\n      unionDefinitionCache.set(unionCacheKey, unionDefinition)\n      return unionDefinition\n    } finally {\n      unionRecursionGuards.delete(guardPathName)\n    }\n  }\n\n  function getDocumentDefinition(def: ObjectSchemaType) {\n    const objectDef = getObjectDefinition(def)\n    const fields = getDocumentInterfaceFields(def).concat(objectDef.fields)\n\n    return {...objectDef, fields, interfaces: ['Document']}\n  }\n\n  function getDocumentInterfaceDefinition(): ConvertedInterface {\n    return {\n      kind: 'Interface',\n      name: 'Document',\n      description: 'A Sanity document',\n      fields: getDocumentInterfaceFields(),\n    }\n  }\n\n  function getDocumentInterfaceFields(type?: ObjectSchemaType): ConvertedFieldDefinition[] {\n    const isNullable = typeof nonNullDocumentFields === 'boolean' ? !nonNullDocumentFields : true\n    return [\n      {\n        fieldName: '_id',\n        type: 'ID',\n        isNullable,\n        description: 'Document ID',\n        ...getDeprecation(type),\n      },\n      {\n        fieldName: '_type',\n        type: 'String',\n        isNullable,\n        description: 'Document type',\n        ...getDeprecation(type),\n      },\n      {\n        fieldName: '_createdAt',\n        type: 'Datetime',\n        isNullable,\n        description: 'Date the document was created',\n        ...getDeprecation(type),\n      },\n      {\n        fieldName: '_updatedAt',\n        type: 'Datetime',\n        isNullable,\n        description: 'Date the document was last modified',\n        ...getDeprecation(type),\n      },\n      {\n        fieldName: '_rev',\n        type: 'String',\n        isNullable,\n        description: 'Current document revision',\n        ...getDeprecation(type),\n      },\n    ]\n  }\n\n  function arrayify(thing: unknown) {\n    if (Array.isArray(thing)) {\n      return thing\n    }\n\n    return thing === null || typeof thing === 'undefined' ? [] : [thing]\n  }\n\n  function hasValidationFlag(\n    field: SchemaType | ObjectField | ObjectFieldType,\n    flag: string,\n  ): boolean {\n    return (\n      'validation' in field &&\n      Array.isArray(field.validation) &&\n      field.validation.some(\n        (rule) => rule && '_rules' in rule && rule._rules.some((item) => item.flag === flag),\n      )\n    )\n  }\n\n  function getDescription(type: SchemaType | ObjectField): string | undefined {\n    const description = type.type && type.type.description\n    return typeof description === 'string' ? description : undefined\n  }\n\n  function gatherAllReferenceCandidates(type: SchemaType): ObjectSchemaType[] {\n    const allFields = gatherReferenceCandidates(type)\n    return uniqBy(allFields, 'name')\n  }\n\n  function gatherReferenceCandidates(type: SchemaType): ObjectSchemaType[] {\n    const refTo = 'to' in type ? type.to : []\n    return 'type' in type && type.type ? [...gatherReferenceCandidates(type.type), ...refTo] : refTo\n  }\n\n  function gatherAllFields(type: SchemaType | ObjectField) {\n    const allFields = gatherFields(type)\n    return uniqBy(allFields, 'name')\n  }\n\n  function gatherFields(type: SchemaType | ObjectField): ObjectField[] {\n    if ('fields' in type) {\n      return type.type ? gatherFields(type.type).concat(type.fields) : type.fields\n    }\n\n    return []\n  }\n\n  function hasFieldsLikeShape(type: unknown): type is {fields: unknown} {\n    return typeof type === 'object' && type !== null && 'fields' in type\n  }\n\n  function hasArrayOfFields(type: unknown): type is {fields: ObjectField[]} {\n    return hasFieldsLikeShape(type) && Array.isArray(type.fields)\n  }\n\n  function hasFields(type: SchemaType | ObjectField): boolean {\n    if (hasArrayOfFields(type)) {\n      return gatherAllFields(type).length > 0\n    }\n\n    return 'type' in type && type.type ? hasFields(type.type) : false\n  }\n}\n\nfunction createLiftTypeArrayError(\n  index: number,\n  parent: string,\n  inlineType = 'object',\n  grandParent = '',\n) {\n  const helpUrl = generateHelpUrl(helpUrls.SCHEMA_LIFT_ANONYMOUS_OBJECT_TYPE)\n  const context = [grandParent, parent].filter(Boolean).join('/')\n  return new HelpfulError(\n    oneline`\n    Encountered anonymous inline ${inlineType} at index ${index} for type/field ${context}.\n    To use this type with GraphQL you will need to create a top-level schema type for it.\n    See ${helpUrl}`,\n    helpUrl,\n  )\n}\n\nfunction createLiftTypeError(typeName: string, parent: string, inlineType = 'object') {\n  const helpUrl = generateHelpUrl(helpUrls.SCHEMA_LIFT_ANONYMOUS_OBJECT_TYPE)\n  return new HelpfulError(\n    oneline`\n    Encountered anonymous inline ${inlineType} \"${typeName}\" for field/type \"${parent}\".\n    To use this field with GraphQL you will need to create a top-level schema type for it.\n    See ${helpUrl}`,\n    helpUrl,\n  )\n}\n\nclass HelpfulError extends Error {\n  helpUrl?: string\n\n  constructor(message: string, helpUrl?: string) {\n    super(message)\n    this.name = 'HelpfulError'\n    this.helpUrl = helpUrl\n  }\n}\n\nfunction getDeprecation(\n  type?: SchemaType | ObjectFieldType<SchemaType> | ObjectField<SchemaType>,\n): Partial<Deprecation> {\n  return isDeprecationConfiguration(type)\n    ? {\n        deprecationReason: type.deprecated.reason,\n      }\n    : {}\n}\n","import {\n  type ConvertedDocumentType,\n  type ConvertedInterface,\n  type ConvertedType,\n  type ConvertedUnion,\n} from './types'\n\nexport function isUnion(\n  type: ConvertedType | ConvertedUnion | ConvertedInterface,\n): type is ConvertedUnion {\n  return type.kind === 'Union'\n}\n\nexport function isNonUnion(\n  type: ConvertedType | ConvertedUnion | ConvertedInterface,\n): type is ConvertedType {\n  return !isUnion(type) && 'type' in type\n}\n\nexport function isDocumentType(\n  type: ConvertedType | ConvertedUnion | ConvertedInterface,\n): type is ConvertedDocumentType {\n  return (\n    isNonUnion(type) &&\n    type.type === 'Object' &&\n    Array.isArray(type.interfaces) &&\n    type.interfaces.includes('Document')\n  )\n}\n","import {flatten} from 'lodash'\n\nimport {isNonUnion} from '../helpers'\nimport {\n  type ConvertedField,\n  type ConvertedFieldDefinition,\n  type ConvertedType,\n  type ConvertedUnion,\n  type InputFilterField,\n  type InputObjectType,\n} from '../types'\n\ntype FilterCreator = (field: ConvertedField) => InputFilterField[]\n\nconst filterCreators: Record<string, FilterCreator> = {\n  ID: createIdFilters,\n  String: createStringFilters,\n  Url: createStringFilters,\n  Float: createNumberFilters,\n  Integer: createNumberFilters,\n  Boolean: createBooleanFilters,\n  Datetime: createDateFilters,\n  Date: createDateFilters,\n  Object: createObjectFilters,\n}\n\nexport function generateTypeFilters(types: (ConvertedType | ConvertedUnion)[]): InputObjectType[] {\n  const queryable = types\n    .filter(isNonUnion)\n    .filter(\n      (type) => type.type === 'Object' && type.interfaces && type.interfaces.includes('Document'),\n    )\n\n  return queryable.map((type) => {\n    const name = `${type.name}Filter`\n    const fields = flatten(type.fields.map(createFieldFilters)).filter(Boolean)\n    return {name, kind: 'InputObject', fields: [...fields, ...getDocumentFilters()]}\n  })\n}\n\nfunction createFieldFilters(field: ConvertedField) {\n  if (filterCreators[field.type]) {\n    return filterCreators[field.type](field)\n  }\n\n  if (field.kind === 'List') {\n    return createListFilters()\n  }\n\n  if (field.isReference) {\n    return createReferenceFilters(field)\n  }\n\n  return createInlineTypeFilters()\n}\n\nfunction getFieldName(field: ConvertedField, modifier = '') {\n  const suffix = modifier ? `_${modifier}` : ''\n  return `${field.fieldName}${suffix}`\n}\n\nfunction getDocumentFilters(): InputFilterField[] {\n  return [\n    {\n      fieldName: 'references',\n      type: 'ID',\n      description: 'All documents references the given document ID',\n      constraint: {\n        comparator: 'REFERENCES',\n      },\n    },\n    {\n      fieldName: 'is_draft',\n      type: 'Boolean',\n      description: 'All documents that are drafts',\n      constraint: {\n        field: '_id',\n        comparator: 'IS_DRAFT',\n      },\n    },\n  ]\n}\n\nfunction createIsDefinedFilter(field: ConvertedFieldDefinition): InputFilterField {\n  return {\n    fieldName: getFieldName(field, 'is_defined'),\n    type: 'Boolean',\n    description: 'All documents that have a value for this field',\n    constraint: {\n      field: field.fieldName,\n      comparator: 'IS_DEFINED',\n    },\n  }\n}\n\nfunction createEqualityFilter(field: ConvertedFieldDefinition): InputFilterField {\n  return {\n    fieldName: getFieldName(field),\n    type: field.type,\n    description: 'All documents that are equal to given value',\n    constraint: {\n      field: field.fieldName,\n      comparator: 'EQUALS',\n    },\n  }\n}\n\nfunction createInequalityFilter(field: ConvertedFieldDefinition): InputFilterField {\n  return {\n    fieldName: getFieldName(field, 'not'),\n    type: field.type,\n    description: 'All documents that are not equal to given value',\n    constraint: {\n      field: field.fieldName,\n      comparator: 'NOT_EQUALS',\n    },\n  }\n}\n\nfunction createDefaultFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return [createEqualityFilter(field), createInequalityFilter(field), createIsDefinedFilter(field)]\n}\n\nfunction createGtLtFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return [\n    {\n      fieldName: getFieldName(field, 'lt'),\n      type: field.type,\n      description: 'All documents are less than given value',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'LT',\n      },\n    },\n    {\n      fieldName: getFieldName(field, 'lte'),\n      type: field.type,\n      description: 'All documents are less than or equal to given value',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'LTE',\n      },\n    },\n    {\n      fieldName: getFieldName(field, 'gt'),\n      type: field.type,\n      description: 'All documents are greater than given value',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'GT',\n      },\n    },\n    {\n      fieldName: getFieldName(field, 'gte'),\n      type: field.type,\n      description: 'All documents are greater than or equal to given value',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'GTE',\n      },\n    },\n  ]\n}\n\nfunction createBooleanFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return createDefaultFilters(field)\n}\n\nfunction createIdFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return createStringFilters(field)\n}\n\nfunction createDateFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return createDefaultFilters(field).concat(createGtLtFilters(field))\n}\n\nfunction createStringFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return [\n    ...createDefaultFilters(field),\n    {\n      fieldName: getFieldName(field, 'matches'),\n      type: 'String',\n      description: 'All documents contain (match) the given word/words',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'MATCHES',\n      },\n    },\n    {\n      fieldName: getFieldName(field, 'in'),\n      kind: 'List',\n      children: {\n        type: 'String',\n        isNullable: false,\n      },\n      description: 'All documents match one of the given values',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'IN',\n      },\n    },\n    {\n      fieldName: getFieldName(field, 'not_in'),\n      kind: 'List',\n      children: {\n        type: 'String',\n        isNullable: false,\n      },\n      description: 'None of the values match any of the given values',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'NOT_IN',\n      },\n    },\n  ]\n}\n\nfunction createNumberFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return createDefaultFilters(field).concat(createGtLtFilters(field))\n}\n\nfunction createObjectFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return []\n}\n\nfunction createListFilters(): InputFilterField[] {\n  return []\n}\n\nfunction createInlineTypeFilters(): InputFilterField[] {\n  return []\n}\n\nfunction createReferenceFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return [\n    {\n      fieldName: getFieldName(field),\n      type: 'ID',\n      constraint: {\n        field: `${field.fieldName}._ref`,\n        comparator: 'EQUALS',\n      },\n    },\n  ]\n}\n","import {startCase, upperFirst} from 'lodash'\nimport pluralize from 'pluralize-esm'\n\nimport {isNonUnion} from '../helpers'\nimport {\n  type ConvertedType,\n  type ConvertedUnion,\n  type InputObjectType,\n  type QueryDefinition,\n} from '../types'\n\nfunction pluralizeTypeName(name: string): string {\n  const words = startCase(name).split(' ')\n  const last = words[words.length - 1]\n  // `pluralize` previously incorrectly cased the S to uppercase after numbers,\n  // which we need to maintain for backwards compatibility\n  const plural = pluralize(last.toLowerCase()).replace(/(\\d)s$/g, '$1S')\n  words[words.length - 1] = upperFirst(plural)\n  return words.join('')\n}\n\nexport function generateTypeQueries(\n  types: (ConvertedType | ConvertedUnion)[],\n  filters: InputObjectType[],\n): QueryDefinition[] {\n  const queries: QueryDefinition[] = []\n  const queryable = types\n    .filter(isNonUnion)\n    .filter(\n      (type) => type.type === 'Object' && type.interfaces && type.interfaces.includes('Document'),\n    )\n\n  // Single ID-based result lookup queries\n  queryable.forEach((type) => {\n    queries.push({\n      fieldName: type.name,\n      type: type.name,\n      constraints: [\n        {\n          field: '_id',\n          comparator: 'EQUALS',\n          value: {kind: 'argumentValue', argName: 'id'},\n        },\n      ],\n      args: [\n        {\n          name: 'id',\n          description: `${type.name} document ID`,\n          type: 'ID',\n          isNullable: false,\n        },\n      ],\n    })\n  })\n\n  // Fetch all of type\n  queryable.forEach((type) => {\n    const filterName = `${type.name}Filter`\n    const hasFilter = filters.find((filter) => filter.name === filterName)\n    queries.push({\n      fieldName: `all${pluralizeTypeName(type.name)}`,\n      filter: `_type == \"${type.originalName || type.name}\"`,\n      type: {\n        kind: 'List',\n        isNullable: false,\n        children: {type: type.name, isNullable: false},\n      },\n      args: hasFilter\n        ? [{name: 'where', type: filterName, isFieldFilter: true}, ...getLimitOffsetArgs()]\n        : getLimitOffsetArgs(),\n    })\n  })\n\n  return queries\n}\n\nfunction getLimitOffsetArgs(): QueryDefinition['args'] {\n  return [\n    {\n      name: 'limit',\n      type: 'Int',\n      description: 'Max documents to return',\n      isFieldFilter: false,\n    },\n    {\n      name: 'offset',\n      type: 'Int',\n      description: 'Offset at which to start returning documents from',\n      isFieldFilter: false,\n    },\n  ]\n}\n","import {type ApiSpecification, type GeneratedApiSpecification} from '../types'\nimport {generateTypeFilters} from './generateTypeFilters'\nimport {generateTypeQueries} from './generateTypeQueries'\n\nexport default (extracted: ApiSpecification): GeneratedApiSpecification => {\n  const filters = generateTypeFilters(extracted.types)\n  const queries = generateTypeQueries(extracted.types, filters)\n  const types = [...extracted.types, ...filters]\n  return {types, queries, interfaces: extracted.interfaces, generation: 'gen1'}\n}\n","import {type InputObjectType} from '../../types'\n\nexport function createBooleanFilters(): InputObjectType {\n  return {\n    name: 'BooleanFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'Boolean',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'Boolean',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'is_defined',\n        type: 'Boolean',\n        description: 'Checks if the value is defined.',\n      },\n    ],\n  }\n}\n","import {type InputObjectType} from '../../types'\n\nexport function createDateFilters(): InputObjectType {\n  return {\n    name: 'DateFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'Date',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'Date',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'gt',\n        type: 'Date',\n        description: 'Checks if the value is greater than the given input.',\n      },\n      {\n        fieldName: 'gte',\n        type: 'Date',\n        description: 'Checks if the value is greater than or equal to the given input.',\n      },\n      {\n        fieldName: 'lt',\n        type: 'Date',\n        description: 'Checks if the value is lesser than the given input.',\n      },\n      {\n        fieldName: 'lte',\n        type: 'Date',\n        description: 'Checks if the value is lesser than or equal to the given input.',\n      },\n      {\n        fieldName: 'is_defined',\n        type: 'Boolean',\n        description: 'Checks if the value is defined.',\n      },\n    ],\n  }\n}\n","import {type InputObjectType} from '../../types'\n\nexport function createDateTimeFilters(): InputObjectType {\n  return {\n    name: 'DatetimeFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'Datetime',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'Datetime',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'gt',\n        type: 'Datetime',\n        description: 'Checks if the value is greater than the given input.',\n      },\n      {\n        fieldName: 'gte',\n        type: 'Datetime',\n        description: 'Checks if the value is greater than or equal to the given input.',\n      },\n      {\n        fieldName: 'lt',\n        type: 'Datetime',\n        description: 'Checks if the value is lesser than the given input.',\n      },\n      {\n        fieldName: 'lte',\n        type: 'Datetime',\n        description: 'Checks if the value is lesser than or equal to the given input.',\n      },\n      {\n        fieldName: 'is_defined',\n        type: 'Boolean',\n        description: 'Checks if the value is defined.',\n      },\n    ],\n  }\n}\n","import {type InputObjectType} from '../../types'\n\nexport function createDocumentFilters(): InputObjectType {\n  return {\n    name: 'DocumentFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'references',\n        type: 'ID',\n        description: 'All documents referencing the given document ID.',\n      },\n      {\n        fieldName: 'is_draft',\n        type: 'Boolean',\n        description: 'All documents that are drafts.',\n      },\n    ],\n  }\n}\n","import {type InputObjectType} from '../../types'\n\nexport function createFloatFilters(): InputObjectType {\n  return {\n    name: 'FloatFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'Float',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'Float',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'gt',\n        type: 'Float',\n        description: 'Checks if the value is greater than the given input.',\n      },\n      {\n        fieldName: 'gte',\n        type: 'Float',\n        description: 'Checks if the value is greater than or equal to the given input.',\n      },\n      {\n        fieldName: 'lt',\n        type: 'Float',\n        description: 'Checks if the value is lesser than the given input.',\n      },\n      {\n        fieldName: 'lte',\n        type: 'Float',\n        description: 'Checks if the value is lesser than or equal to the given input.',\n      },\n      {\n        fieldName: 'is_defined',\n        type: 'Boolean',\n        description: 'Checks if the value is defined.',\n      },\n    ],\n  }\n}\n","import {type InputObjectType} from '../../types'\n\nexport function createIdFilters(): InputObjectType {\n  return {\n    name: 'IDFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'ID',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'ID',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'matches',\n        type: 'ID',\n        description: 'Checks if the value matches the given word/words.',\n      },\n      {\n        fieldName: 'in',\n        kind: 'List',\n        children: {\n          type: 'ID',\n          isNullable: false,\n        },\n        description: 'Checks if the value is equal to one of the given values.',\n      },\n      {\n        fieldName: 'nin',\n        kind: 'List',\n        children: {\n          type: 'ID',\n          isNullable: false,\n        },\n        description: 'Checks if the value is not equal to one of the given values.',\n      },\n    ],\n  }\n}\n","import {type InputObjectType} from '../../types'\n\nexport function createIntegerFilters(): InputObjectType {\n  return {\n    name: 'IntFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'Int',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'Int',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'gt',\n        type: 'Int',\n        description: 'Checks if the value is greater than the given input.',\n      },\n      {\n        fieldName: 'gte',\n        type: 'Int',\n        description: 'Checks if the value is greater than or equal to the given input.',\n      },\n      {\n        fieldName: 'lt',\n        type: 'Int',\n        description: 'Checks if the value is lesser than the given input.',\n      },\n      {\n        fieldName: 'lte',\n        type: 'Int',\n        description: 'Checks if the value is lesser than or equal to the given input.',\n      },\n      {\n        fieldName: 'is_defined',\n        type: 'Boolean',\n        description: 'Checks if the value is defined.',\n      },\n    ],\n  }\n}\n","import {type InputObjectType} from '../../types'\n\nexport function createStringFilters(): InputObjectType {\n  return {\n    name: 'StringFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'String',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'String',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'matches',\n        type: 'String',\n        description: 'Checks if the value matches the given word/words.',\n      },\n      {\n        fieldName: 'in',\n        kind: 'List',\n        children: {\n          type: 'String',\n          isNullable: false,\n        },\n        description: 'Checks if the value is equal to one of the given values.',\n      },\n      {\n        fieldName: 'nin',\n        kind: 'List',\n        children: {\n          type: 'String',\n          isNullable: false,\n        },\n        description: 'Checks if the value is not equal to one of the given values.',\n      },\n      {\n        fieldName: 'is_defined',\n        type: 'Boolean',\n        description: 'Checks if the value is defined.',\n      },\n    ],\n  }\n}\n","import {isNonUnion, isUnion} from '../helpers'\nimport {type ConvertedType, type ConvertedUnion, type InputObjectType} from '../types'\nimport {createBooleanFilters} from './filters/booleanFilters'\nimport {createDateFilters} from './filters/dateFilters'\nimport {createDateTimeFilters} from './filters/dateTimeFilters'\nimport {createDocumentFilters} from './filters/documentFilters'\nimport {createFloatFilters} from './filters/floatFilters'\nimport {createIdFilters} from './filters/idFilters'\nimport {createIntegerFilters} from './filters/integerFilters'\nimport {createStringFilters} from './filters/stringFilters'\n\nconst typeAliases: Record<string, string | undefined> = {\n  Url: 'String',\n  Text: 'String',\n  Email: 'String',\n}\n\ntype FilterCreator = () => InputObjectType\n\nconst filterCreators: Record<string, FilterCreator> = {\n  ID: createIdFilters,\n  String: createStringFilters,\n  Float: createFloatFilters,\n  Integer: createIntegerFilters,\n  Boolean: createBooleanFilters,\n  Datetime: createDateTimeFilters,\n  Date: createDateFilters,\n  Document: createDocumentFilters,\n}\n\nexport function generateTypeFilters(types: (ConvertedType | ConvertedUnion)[]): InputObjectType[] {\n  const builtInTypeKeys = Object.keys(filterCreators)\n  const builtinTypeValues = Object.values(filterCreators)\n  const objectTypes = types\n    .filter(isNonUnion)\n    .filter(\n      (type) =>\n        type.type === 'Object' &&\n        !['Block', 'Span'].includes(type.name) &&\n        !type.interfaces &&\n        !builtInTypeKeys.includes(type.type),\n    )\n\n  const unionTypes = types.filter(isUnion).map((type) => type.name)\n  const documentTypes = types\n    .filter(isNonUnion)\n    .filter(\n      (type) => type.type === 'Object' && type.interfaces && type.interfaces.includes('Document'),\n    )\n\n  const builtinTypeFilters = createBuiltinTypeFilters(builtinTypeValues)\n  const objectTypeFilters = createObjectTypeFilters(objectTypes, {unionTypes})\n  const documentTypeFilters = createDocumentTypeFilters(documentTypes, {unionTypes})\n\n  return [...builtinTypeFilters, ...objectTypeFilters, ...documentTypeFilters]\n}\n\nfunction createBuiltinTypeFilters(builtinTypeValues: FilterCreator[]): InputObjectType[] {\n  return builtinTypeValues.map((filterCreator) => filterCreator())\n}\n\nfunction createObjectTypeFilters(\n  objectTypes: ConvertedType[],\n  options: {unionTypes: string[]},\n): InputObjectType[] {\n  return objectTypes.map((objectType) => ({\n    name: `${objectType.name}Filter`,\n    kind: 'InputObject',\n    fields: createFieldFilters(objectType, options),\n  }))\n}\n\nfunction createDocumentTypeFilters(\n  documentTypes: ConvertedType[],\n  options: {unionTypes: string[]},\n): InputObjectType[] {\n  return documentTypes.map((documentType) => ({\n    name: `${documentType.name}Filter`,\n    kind: 'InputObject',\n    fields: [...getDocumentFilters(), ...createFieldFilters(documentType, options)],\n  }))\n}\n\nfunction createFieldFilters(objectType: ConvertedType, options: {unionTypes: string[]}) {\n  const {unionTypes} = options\n  return objectType.fields\n    .filter(\n      (field) => field.type !== 'JSON' && field.kind !== 'List' && !unionTypes.includes(field.type),\n    )\n    .map((field) => ({\n      fieldName: field.fieldName,\n      type: `${typeAliases[field.type] || field.type}Filter`,\n      isReference: field.isReference,\n    }))\n}\n\nfunction getDocumentFilters() {\n  return [\n    {\n      fieldName: '_',\n      type: 'DocumentFilter',\n      description: 'Apply filters on document level',\n    },\n  ]\n}\n","import {upperFirst} from 'lodash'\n\nimport {isDocumentType} from '../helpers'\nimport {\n  type ConvertedType,\n  type ConvertedUnion,\n  type InputObjectType,\n  type QueryDefinition,\n} from '../types'\n\nexport function generateTypeQueries(\n  types: (ConvertedType | ConvertedUnion)[],\n  sortings: InputObjectType[],\n): QueryDefinition[] {\n  const queries: QueryDefinition[] = []\n  const queryable = types.filter(isDocumentType)\n  const isSortable = (type: ConvertedType) =>\n    sortings.some((sorting) => sorting.name === `${type.name}Sorting`)\n\n  // A document of any type\n  queries.push({\n    fieldName: 'Document',\n    type: 'Document',\n    constraints: [\n      {\n        field: '_id',\n        comparator: 'eq',\n        value: {kind: 'argumentValue', argName: 'id'},\n      },\n    ],\n    args: [\n      {\n        name: 'id',\n        description: 'Document ID',\n        type: 'ID',\n        isNullable: false,\n      },\n    ],\n  })\n\n  // Single ID-based result lookup queries\n  queryable.forEach((type) => {\n    queries.push({\n      fieldName: type.name,\n      type: type.name,\n      constraints: [\n        {\n          field: '_id',\n          comparator: 'eq',\n          value: {kind: 'argumentValue', argName: 'id'},\n        },\n      ],\n      args: [\n        {\n          name: 'id',\n          description: `${type.name} document ID`,\n          type: 'ID',\n          isNullable: false,\n        },\n      ],\n    })\n  })\n\n  // Fetch all of type\n  queryable.forEach((type) => {\n    const sorting: QueryDefinition['args'] = []\n    if (isSortable(type)) {\n      sorting.push({\n        name: 'sort',\n        type: {\n          kind: 'List',\n          isNullable: true,\n          children: {\n            type: `${type.name}Sorting`,\n            isNullable: false,\n          },\n        },\n      })\n    }\n\n    queries.push({\n      fieldName: `all${upperFirst(type.name)}`,\n      filter: `_type == \"${type.originalName || type.name}\"`,\n      type: {\n        kind: 'List',\n        isNullable: false,\n        children: {type: type.name, isNullable: false},\n      },\n      args: [\n        {\n          name: 'where',\n          type: `${type.name}Filter`,\n          isFieldFilter: true,\n        },\n        ...sorting,\n        {\n          name: 'limit',\n          type: 'Int',\n          description: 'Max documents to return',\n          isFieldFilter: false,\n        },\n        {\n          name: 'offset',\n          type: 'Int',\n          description: 'Offset at which to start returning documents from',\n          isFieldFilter: false,\n        },\n      ],\n    })\n  })\n\n  return queries\n}\n","import {isDocumentType, isNonUnion} from '../helpers'\nimport {\n  type ConvertedEnum,\n  type ConvertedType,\n  type ConvertedUnion,\n  type InputObjectType,\n} from '../types'\n\nconst builtInTypes = [\n  'Boolean',\n  'Date',\n  'Datetime',\n  'Email',\n  'Float',\n  'ID',\n  'Integer',\n  'String',\n  'Text',\n  'Url',\n]\n\nconst builtInSortingEnum: ConvertedEnum = {\n  name: 'SortOrder',\n  kind: 'Enum',\n  values: [\n    {\n      name: 'ASC',\n      description: 'Sorts on the value in ascending order.',\n      value: 1,\n    },\n    {\n      name: 'DESC',\n      description: 'Sorts on the value in descending order.',\n      value: 2,\n    },\n  ],\n}\n\nexport function generateTypeSortings(\n  types: (ConvertedType | ConvertedUnion)[],\n): (InputObjectType | ConvertedEnum)[] {\n  const objectTypes = types.filter(isNonUnion).filter(\n    (type) =>\n      type.type === 'Object' &&\n      !['Block', 'Span'].includes(type.name) && // TODO: What do we do with blocks?\n      !type.interfaces &&\n      !builtInTypes.includes(type.name),\n  )\n\n  const documentTypes = types.filter(isDocumentType)\n\n  const hasFields = (type: InputObjectType) => type.fields.length > 0\n\n  const objectTypeSortings = createObjectTypeSortings(objectTypes)\n  const documentTypeSortings = createDocumentTypeSortings(documentTypes)\n  const allSortings = [...objectTypeSortings, ...documentTypeSortings].filter(hasFields)\n\n  return [...allSortings, builtInSortingEnum]\n}\n\nfunction createObjectTypeSortings(objectTypes: ConvertedType[]): InputObjectType[] {\n  return objectTypes.map((objectType) => ({\n    name: `${objectType.name}Sorting`,\n    kind: 'InputObject',\n    fields: objectType.fields\n      .filter((field) => field.type !== 'JSON' && field.kind !== 'List')\n      .filter((field) => !field.isReference)\n      .map((field) => ({\n        fieldName: field.fieldName,\n        type: builtInTypes.includes(field.type) ? builtInSortingEnum.name : `${field.type}Sorting`,\n      })),\n  }))\n}\n\nfunction createDocumentTypeSortings(documentTypes: ConvertedType[]): InputObjectType[] {\n  return documentTypes.map((documentType) => ({\n    name: `${documentType.name}Sorting`,\n    kind: 'InputObject',\n    fields: documentType.fields\n      .filter((field) => field.type !== 'JSON' && field.kind !== 'List')\n      .filter((field) => !field.isReference)\n      .map((field) => ({\n        fieldName: field.fieldName,\n        type: builtInTypes.includes(field.type) ? builtInSortingEnum.name : `${field.type}Sorting`,\n      })),\n  }))\n}\n","import {type ApiSpecification, type GeneratedApiSpecification, type InputObjectType} from '../types'\nimport {generateTypeFilters} from './generateTypeFilters'\nimport {generateTypeQueries} from './generateTypeQueries'\nimport {generateTypeSortings} from './generateTypeSortings'\n\nexport default (extracted: ApiSpecification): GeneratedApiSpecification => {\n  const filters = generateTypeFilters(extracted.types)\n  const sortings = generateTypeSortings(extracted.types)\n  const queries = generateTypeQueries(\n    extracted.types,\n    sortings.filter((node): node is InputObjectType => node.kind === 'InputObject'),\n  )\n  const types = [...extracted.types, ...filters, ...sortings]\n\n  return {types, queries, interfaces: extracted.interfaces, generation: 'gen2'}\n}\n","import {type InputObjectType} from '../../types'\n\nexport function createDocumentFilters(): InputObjectType {\n  return {\n    name: 'Sanity_DocumentFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'references',\n        type: 'ID',\n        description: 'All documents referencing the given document ID.',\n      },\n      {\n        fieldName: 'is_draft',\n        type: 'Boolean',\n        description: 'All documents that are drafts.',\n      },\n    ],\n  }\n}\n","/**\n * Generates a filter field name for a given field name.\n *\n * @internal\n *\n * @param fieldName - The field name to generate a filter field name for.\n * @param suffix - The suffix to append to the field name. Default is `Filter`.\n */\nexport function getFilterFieldName(fieldName: string, suffix = 'Filter'): string {\n  return `${fieldName}${suffix}`\n}\n","import {createBooleanFilters} from '../gen2/filters/booleanFilters'\nimport {createDateFilters} from '../gen2/filters/dateFilters'\nimport {createDateTimeFilters} from '../gen2/filters/dateTimeFilters'\nimport {createFloatFilters} from '../gen2/filters/floatFilters'\nimport {createIdFilters} from '../gen2/filters/idFilters'\nimport {createIntegerFilters} from '../gen2/filters/integerFilters'\nimport {createStringFilters} from '../gen2/filters/stringFilters'\nimport {isDocumentType, isNonUnion, isUnion} from '../helpers'\nimport {\n  type ApiCustomizationOptions,\n  type ConvertedDocumentType,\n  type ConvertedType,\n  type ConvertedUnion,\n  type InputObjectType,\n} from '../types'\nimport {createDocumentFilters} from './filters/documentFilters'\nimport {getFilterFieldName} from './utils'\n\nconst typeAliases: Record<string, string | undefined> = {\n  Url: 'String',\n  Text: 'String',\n  Email: 'String',\n}\n\ntype FilterCreator = () => InputObjectType\n\nconst filterCreators: Record<string, FilterCreator> = {\n  ID: createIdFilters,\n  String: createStringFilters,\n  Float: createFloatFilters,\n  Integer: createIntegerFilters,\n  Boolean: createBooleanFilters,\n  Datetime: createDateTimeFilters,\n  Date: createDateFilters,\n  Document: createDocumentFilters,\n}\n\nexport function generateTypeFilters(\n  types: (ConvertedType | ConvertedUnion)[],\n  options?: ApiCustomizationOptions,\n): InputObjectType[] {\n  const {filterSuffix} = options || {}\n  const builtInTypeKeys = Object.keys(filterCreators)\n  const builtinTypeValues = Object.values(filterCreators)\n  const objectTypes = types.filter(isNonUnion).filter(\n    (type) =>\n      type.type === 'Object' &&\n      !['Block', 'Span'].includes(type.name) && // TODO: What do we do with blocks?\n      !type.interfaces &&\n      !builtInTypeKeys.includes(type.type),\n  )\n\n  const unionTypes = types.filter(isUnion).map((type) => type.name)\n  const documentTypes = types.filter(\n    (type): type is ConvertedDocumentType => type.name === 'Document' || isDocumentType(type),\n  )\n\n  const builtinTypeFilters = createBuiltinTypeFilters(builtinTypeValues)\n  const objectTypeFilters = createObjectTypeFilters(objectTypes, {unionTypes, filterSuffix})\n  const documentTypeFilters = createDocumentTypeFilters(documentTypes, {unionTypes, filterSuffix})\n\n  return builtinTypeFilters.concat(objectTypeFilters).concat(documentTypeFilters)\n}\n\nfunction createBuiltinTypeFilters(builtinTypeValues: FilterCreator[]): InputObjectType[] {\n  return builtinTypeValues.map((filterCreator) => filterCreator())\n}\n\nfunction createObjectTypeFilters(\n  objectTypes: ConvertedType[],\n  options: {unionTypes: string[]; filterSuffix?: string},\n): InputObjectType[] {\n  return objectTypes.map((objectType) => ({\n    name: getFilterFieldName(objectType.name, options.filterSuffix),\n    kind: 'InputObject',\n    fields: createFieldFilters(objectType, options),\n  }))\n}\n\nfunction createDocumentTypeFilters(\n  documentTypes: ConvertedType[],\n  options: {unionTypes: string[]; filterSuffix?: string},\n): InputObjectType[] {\n  return documentTypes.map((documentType) => ({\n    name: getFilterFieldName(documentType.name, options.filterSuffix),\n    kind: 'InputObject',\n    fields: [...getDocumentFilters(), ...createFieldFilters(documentType, options)],\n  }))\n}\n\nfunction createFieldFilters(\n  objectType: ConvertedType,\n  options: {unionTypes: string[]; filterSuffix?: string},\n) {\n  const {unionTypes} = options\n  if (!objectType.fields) {\n    return []\n  }\n\n  return objectType.fields\n    .filter(\n      (field) => field.type !== 'JSON' && field.kind !== 'List' && !unionTypes.includes(field.type),\n    )\n    .map((field) => {\n      const typeName = typeAliases[field.type] || field.type\n      // If the type is default type than don't add a custom suffix\n      const filterSuffix = Object.keys({...typeAliases, ...filterCreators}).includes(typeName)\n        ? undefined\n        : options.filterSuffix\n\n      return {\n        fieldName: field.fieldName,\n        type: getFilterFieldName(typeAliases[field.type] || field.type, filterSuffix),\n        isReference: field.isReference,\n      }\n    })\n}\n\nfunction getDocumentFilters() {\n  return [\n    {\n      fieldName: '_',\n      type: 'Sanity_DocumentFilter',\n      description: 'Apply filters on document level',\n    },\n  ]\n}\n","import {upperFirst} from 'lodash'\n\nimport {internal} from '../extractFromSanitySchema'\nimport {isDocumentType, isUnion} from '../helpers'\nimport {\n  type ApiCustomizationOptions,\n  type ConvertedType,\n  type ConvertedUnion,\n  type Deprecation,\n  type InputObjectType,\n  type QueryDefinition,\n} from '../types'\nimport {getFilterFieldName} from './utils'\n\nexport function generateTypeQueries(\n  types: (ConvertedType | ConvertedUnion)[],\n  sortings: InputObjectType[],\n  options?: ApiCustomizationOptions,\n): QueryDefinition[] {\n  const {filterSuffix} = options || {}\n  const queries: QueryDefinition[] = []\n  const documentTypes = types.filter(isDocumentType)\n\n  const documentTypeNames = documentTypes.map((docType) =>\n    JSON.stringify(docType.originalName || docType.name),\n  )\n  const documentsFilter = `_type in [${documentTypeNames.join(', ')}]`\n\n  const documentInterface = types.find((type) => type.name === 'Document')\n  if (!documentInterface || isUnion(documentInterface)) {\n    throw new Error('Failed to find document interface')\n  }\n\n  const queryable = [...documentTypes, documentInterface]\n  const isSortable = (type: ConvertedType) =>\n    sortings.some((sorting) => sorting.name === `${type.name}Sorting`)\n\n  // Single ID-based result lookup queries\n  queryable.forEach((type) => {\n    queries.push({\n      fieldName: type.name,\n      type: type.name,\n      constraints: [\n        {\n          field: '_id',\n          comparator: 'eq',\n          value: {kind: 'argumentValue', argName: 'id'},\n        },\n      ],\n      args: [\n        {\n          name: 'id',\n          description: `${type.name} document ID`,\n          type: 'ID',\n          isNullable: false,\n        },\n      ],\n      ...getDeprecation(type),\n    })\n  })\n\n  // Fetch all of type\n  queryable.forEach((type) => {\n    const sorting: QueryDefinition['args'] = []\n    if (isSortable(type)) {\n      sorting.push({\n        name: 'sort',\n        type: {\n          kind: 'List',\n          isNullable: true,\n          children: {\n            type: `${type.name}Sorting`,\n            isNullable: false,\n          },\n        },\n      })\n    }\n\n    queries.push({\n      fieldName: `all${upperFirst(type.name)}`,\n      filter:\n        type.name === 'Document' && type.kind === 'Interface'\n          ? documentsFilter\n          : `_type == ${JSON.stringify(type.originalName || type.name)}`,\n      type: {\n        kind: 'List',\n        isNullable: false,\n        children: {type: type.name, isNullable: false},\n      },\n      args: [\n        {\n          name: 'where',\n          type: getFilterFieldName(type.name, filterSuffix),\n          isFieldFilter: true,\n        },\n        ...sorting,\n        {\n          name: 'limit',\n          type: 'Int',\n          description: 'Max documents to return',\n          isFieldFilter: false,\n        },\n        {\n          name: 'offset',\n          type: 'Int',\n          description: 'Offset at which to start returning documents from',\n          isFieldFilter: false,\n        },\n      ],\n      ...getDeprecation(type),\n    })\n  })\n\n  return queries\n}\n\nfunction getDeprecation(type: ConvertedType): Partial<Deprecation> {\n  return type[internal]?.deprecationReason\n    ? {\n        deprecationReason: type[internal].deprecationReason,\n      }\n    : {}\n}\n","import {isDocumentType, isNonUnion} from '../helpers'\nimport {\n  type ConvertedDocumentType,\n  type ConvertedEnum,\n  type ConvertedType,\n  type ConvertedUnion,\n  type InputObjectType,\n} from '../types'\n\nconst builtInTypes = [\n  'Boolean',\n  'Date',\n  'Datetime',\n  'Email',\n  'Float',\n  'ID',\n  'Integer',\n  'String',\n  'Text',\n  'Url',\n]\n\nconst builtInSortingEnum: ConvertedEnum = {\n  name: 'SortOrder',\n  kind: 'Enum',\n  values: [\n    {\n      name: 'ASC',\n      description: 'Sorts on the value in ascending order.',\n      value: 1,\n    },\n    {\n      name: 'DESC',\n      description: 'Sorts on the value in descending order.',\n      value: 2,\n    },\n  ],\n}\n\nexport function generateTypeSortings(\n  types: (ConvertedType | ConvertedUnion)[],\n): (InputObjectType | ConvertedEnum)[] {\n  const objectTypes = types.filter(isNonUnion).filter(\n    (type) =>\n      type.type === 'Object' &&\n      !['Block', 'Span'].includes(type.name) && // TODO: What do we do with blocks?\n      !type.interfaces &&\n      !builtInTypes.includes(type.name),\n  )\n  const documentTypes = types.filter(\n    (type): type is ConvertedDocumentType => type.name === 'Document' || isDocumentType(type),\n  )\n\n  const hasFields = (type: InputObjectType) => type.fields.length > 0\n\n  const objectTypeSortings = createObjectTypeSortings(objectTypes)\n  const documentTypeSortings = createDocumentTypeSortings(documentTypes)\n  const allSortings = [...objectTypeSortings, ...documentTypeSortings].filter(hasFields)\n\n  return [...allSortings, builtInSortingEnum]\n}\n\nfunction createObjectTypeSortings(objectTypes: ConvertedType[]): InputObjectType[] {\n  return objectTypes.map((objectType) => ({\n    name: `${objectType.name}Sorting`,\n    kind: 'InputObject',\n    fields: objectType.fields\n      .filter((field) => field.type !== 'JSON' && field.kind !== 'List')\n      .filter((field) => !field.isReference)\n      .map((field) => ({\n        fieldName: field.fieldName,\n        type: builtInTypes.includes(field.type) ? builtInSortingEnum.name : `${field.type}Sorting`,\n      })),\n  }))\n}\n\nfunction createDocumentTypeSortings(documentTypes: ConvertedType[]): InputObjectType[] {\n  return documentTypes.map((documentType) => ({\n    name: `${documentType.name}Sorting`,\n    kind: 'InputObject',\n    fields: documentType.fields\n      .filter((field) => field.type !== 'JSON' && field.kind !== 'List')\n      .filter((field) => !field.isReference)\n      .map((field) => ({\n        fieldName: field.fieldName,\n        type: builtInTypes.includes(field.type) ? builtInSortingEnum.name : `${field.type}Sorting`,\n      })),\n  }))\n}\n","import {isUnion} from '../helpers'\nimport {\n  type ApiCustomizationOptions,\n  type ApiSpecification,\n  type ConvertedType,\n  type GeneratedApiSpecification,\n  type InputObjectType,\n} from '../types'\nimport {generateTypeFilters} from './generateTypeFilters'\nimport {generateTypeQueries} from './generateTypeQueries'\nimport {generateTypeSortings} from './generateTypeSortings'\n\nexport default (\n  extracted: ApiSpecification,\n  options?: ApiCustomizationOptions,\n): GeneratedApiSpecification => {\n  const documentInterface = extracted.interfaces.find((iface) => iface.name === 'Document')\n  if (!documentInterface || isUnion(documentInterface)) {\n    throw new Error('Failed to find document interface')\n  }\n\n  const types = [...extracted.types, documentInterface as ConvertedType]\n\n  const filters = generateTypeFilters(types, options)\n  const sortings = generateTypeSortings(types)\n  const queries = generateTypeQueries(\n    types,\n    sortings.filter((node): node is InputObjectType => node.kind === 'InputObject'),\n    options,\n  )\n  const graphqlTypes = [...extracted.types, ...filters, ...sortings]\n\n  return {types: graphqlTypes, queries, interfaces: extracted.interfaces, generation: 'gen3'}\n}\n","/* eslint-disable no-process-env, no-process-exit, max-statements */\nimport {type CliCommandContext, type CliOutputter, type CliPrompter} from '@sanity/cli'\nimport {type SanityClient} from '@sanity/client'\nimport {get} from 'lodash'\nimport oneline from 'oneline'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {debug} from '../../debug'\nimport {getClientUrl} from '../../util/getClientUrl'\nimport {getUrlHeaders} from '../../util/getUrlHeaders'\nimport {extractFromSanitySchema} from './extractFromSanitySchema'\nimport gen1 from './gen1'\nimport gen2 from './gen2'\nimport gen3 from './gen3'\nimport {getGraphQLAPIs} from './getGraphQLAPIs'\nimport {SchemaError} from './SchemaError'\nimport {type DeployResponse, type GeneratedApiSpecification, type ValidationResponse} from './types'\n\nconst latestGeneration = 'gen3'\nconst generations = {\n  gen1,\n  gen2,\n  gen3,\n}\n\nconst apiIdRegex = /^[a-z0-9_-]+$/\nconst isInteractive = process.stdout.isTTY && process.env.TERM !== 'dumb' && !('CI' in process.env)\n\nconst ignoredWarnings: string[] = ['OPTIONAL_INPUT_FIELD_ADDED']\nconst ignoredBreaking: string[] = []\n\ninterface DeployTask {\n  dataset: string\n  projectId: string\n  tag: string\n  enablePlayground: boolean\n  schema: GeneratedApiSpecification\n}\n\n// eslint-disable-next-line complexity\nexport default async function deployGraphQLApiAction(\n  args: {argv?: string[]},\n  context: CliCommandContext,\n): Promise<void> {\n  // Reparsing CLI flags for better control of binary flags\n  const flags = await parseCliFlags(args)\n  const {\n    force,\n    dryRun,\n    'api': onlyApis,\n    'dataset': datasetFlag,\n    'tag': tagFlag,\n    'playground': playgroundFlag,\n    'generation': generationFlag,\n    'non-null-document-fields': nonNullDocumentFieldsFlag,\n    withUnionCache,\n  } = flags\n\n  const {apiClient, output, prompt} = context\n\n  let spinner\n\n  const client = apiClient({\n    requireUser: true,\n    // Don't throw if we do not have a project ID defined, as we will infer it from the\n    // source/ workspace of each configured API later\n    requireProject: false,\n  }).config({apiVersion: '2023-08-01'})\n\n  const apiDefs = await getGraphQLAPIs(context)\n  const hasMultipleApis = apiDefs.length > 1 || (flags.api && flags.api.length > 1)\n  const usedFlags = [\n    datasetFlag && '--dataset',\n    tagFlag && '--tag',\n    typeof playgroundFlag !== 'undefined' && '--playground',\n    typeof generationFlag !== 'undefined' && '--generation',\n    typeof nonNullDocumentFieldsFlag !== 'undefined' && '--non-null-document-fields',\n  ].filter(Boolean)\n\n  if (hasMultipleApis && usedFlags.length > 0) {\n    output.warn(`WARN: More than one API defined, and ${usedFlags.join('/')} is specified`)\n    output.warn(`WARN: This will use the specified flag(s) for ALL APIs, overriding config!`)\n\n    if (flags.force) {\n      output.warn(`WARN: --force specified, continuing...`)\n    } else if (\n      !(await prompt.single({\n        type: 'confirm',\n        message: 'Continue with flag overrides for all APIs?',\n        default: false,\n      }))\n    ) {\n      process.exit(1)\n    }\n  }\n\n  const deployTasks: DeployTask[] = []\n\n  const apiNames = new Set<string>()\n  const apiIds = new Set<string>()\n  for (const apiDef of apiDefs) {\n    const dataset = datasetFlag || apiDef.dataset\n    const tag = tagFlag || apiDef.tag || 'default'\n    const apiName = [dataset, tag].join('/')\n    if (apiNames.has(apiName)) {\n      throw new Error(`Multiple GraphQL APIs with the same dataset and tag found (${apiName})`)\n    }\n\n    if (apiDef.id) {\n      if (typeof apiDef.id !== 'string' || !apiIdRegex.test(apiDef.id)) {\n        throw new Error(\n          `Invalid GraphQL API id \"${apiDef.id}\" - only a-z, 0-9, underscore and dashes are allowed`,\n        )\n      }\n\n      if (apiIds.has(apiDef.id)) {\n        throw new Error(`Multiple GraphQL APIs with the same ID found (${apiDef.id})`)\n      }\n\n      apiIds.add(apiDef.id)\n    }\n\n    apiNames.add(apiName)\n  }\n\n  for (const apiId of onlyApis || []) {\n    if (!apiDefs.some((apiDef) => apiDef.id === apiId)) {\n      throw new Error(`GraphQL API with id \"${apiId}\" not found`)\n    }\n  }\n\n  if (onlyApis) {\n    output.warn(`Deploying only specified APIs: ${onlyApis.join(', ')}`)\n  }\n\n  let index = -1\n  for (const apiDef of apiDefs) {\n    if (onlyApis && (!apiDef.id || !onlyApis.includes(apiDef.id))) {\n      continue\n    }\n\n    index++\n\n    const dataset = datasetFlag || apiDef.dataset\n    const tag = tagFlag || apiDef.tag || 'default'\n    const {projectId, playground, nonNullDocumentFields, schema} = apiDef\n    const apiName = [dataset, tag].join('/')\n    spinner = output.spinner(`Generating GraphQL API: ${apiName}`).start()\n\n    if (!dataset) {\n      throw new Error(`No dataset specified for API at index ${index}`)\n    }\n\n    const projectClient = client.clone().config({projectId, useProjectHostname: true})\n    const {currentGeneration, playgroundEnabled} = await getCurrentSchemaProps(\n      projectClient,\n      dataset,\n      tag,\n    )\n\n    // CLI flag trumps configuration\n    const specifiedGeneration =\n      typeof generationFlag === 'undefined' ? apiDef.generation : generationFlag\n\n    const generation = await resolveApiGeneration({\n      currentGeneration,\n      specifiedGeneration,\n      index,\n      force,\n      output,\n      prompt,\n    })\n\n    if (!generation) {\n      // User cancelled\n      spinner.fail()\n      continue\n    }\n\n    if (!isRecognizedApiGeneration(generation)) {\n      throw new Error(`Unknown API generation \"${generation}\" for API at index ${index}`)\n    }\n\n    const enablePlayground = await shouldEnablePlayground({\n      dryRun,\n      spinner,\n      playgroundCliFlag: playgroundFlag,\n      playgroundConfiguration: playground,\n      playgroundCurrentlyEnabled: playgroundEnabled,\n      prompt,\n    })\n\n    let apiSpec: GeneratedApiSpecification\n    try {\n      const generateSchema = generations[generation]\n      const extracted = extractFromSanitySchema(schema, {\n        // Allow CLI flag to override configured setting\n        nonNullDocumentFields:\n          typeof nonNullDocumentFieldsFlag === 'undefined'\n            ? nonNullDocumentFields\n            : nonNullDocumentFieldsFlag,\n        withUnionCache,\n      })\n\n      apiSpec = generateSchema(extracted, {filterSuffix: apiDef.filterSuffix})\n    } catch (err) {\n      spinner.fail()\n\n      if (err instanceof SchemaError) {\n        err.print(output)\n        process.exit(1) // eslint-disable-line no-process-exit\n      }\n\n      throw err\n    }\n\n    let valid: ValidationResponse | undefined\n    try {\n      valid = await projectClient.request<ValidationResponse>({\n        url: `/apis/graphql/${dataset}/${tag}/validate`,\n        method: 'POST',\n        body: {enablePlayground, schema: apiSpec},\n        maxRedirects: 0,\n      })\n    } catch (err) {\n      const validationError = get(err, 'response.body.validationError')\n      spinner.fail()\n      throw validationError ? new Error(validationError) : err\n    }\n\n    // when the result is not valid and there are breaking changes afoot!\n    if (!isResultValid(valid, {spinner, force})) {\n      // not valid and a dry run? then it can exit with a error\n      if (dryRun) {\n        spinner.fail()\n        renderBreakingChanges(valid, output)\n        process.exit(1)\n      }\n\n      if (!isInteractive) {\n        spinner.fail()\n        renderBreakingChanges(valid, output)\n        throw new Error(\n          'Dangerous changes found - falling back. Re-run the command with the `--force` flag to force deployment.',\n        )\n      }\n\n      spinner.stop()\n      renderBreakingChanges(valid, output)\n      const shouldDeploy = await prompt.single({\n        type: 'confirm',\n        message: 'Do you want to deploy a new API despite the dangerous changes?',\n        default: false,\n      })\n\n      if (!shouldDeploy) {\n        spinner.fail()\n        continue\n      }\n\n      spinner.succeed()\n    } else if (dryRun) {\n      spinner.succeed()\n      output.print('GraphQL API is valid and has no breaking changes')\n      process.exit(0)\n    }\n\n    deployTasks.push({\n      projectId,\n      dataset,\n      tag,\n      enablePlayground,\n      schema: apiSpec,\n    })\n  }\n\n  // Give some space for deployment tasks\n  output.print('')\n\n  for (const task of deployTasks) {\n    const {dataset, tag, schema, projectId, enablePlayground} = task\n\n    output.print(`Project: ${projectId}`)\n    output.print(`Dataset: ${dataset}`)\n    output.print(`Tag:     ${tag}`)\n\n    spinner = output.spinner('Deploying GraphQL API').start()\n\n    try {\n      const projectClient = client.clone().config({projectId, useProjectHostname: true})\n      const response = await projectClient.request<DeployResponse>({\n        url: `/apis/graphql/${dataset}/${tag}`,\n        method: 'PUT',\n        body: {enablePlayground, schema},\n        maxRedirects: 0,\n      })\n\n      spinner.stop()\n      const apiUrl = getClientUrl(\n        projectClient,\n        response.location.replace(/^\\/(v1|v\\d{4}-\\d{2}-\\d{2})\\//, '/'),\n      )\n      output.print(`URL:     ${apiUrl}`)\n      spinner.start('Deployed!').succeed()\n      output.print('')\n    } catch (err) {\n      spinner.fail()\n      throw err\n    }\n  }\n\n  // Because of side effects when loading the schema, we can end up in situations where\n  // the API has been successfully deployed, but some timer or other handle is keeping\n  // the process from naturally exiting.\n  process.exit(0)\n}\n\nasync function shouldEnablePlayground({\n  dryRun,\n  spinner,\n  playgroundCliFlag,\n  playgroundConfiguration,\n  playgroundCurrentlyEnabled,\n  prompt,\n}: {\n  dryRun: boolean\n  spinner: ReturnType<CliCommandContext['output']['spinner']>\n  playgroundCliFlag?: boolean\n  playgroundConfiguration?: boolean\n  playgroundCurrentlyEnabled?: boolean\n  prompt: CliCommandContext['prompt']\n}): Promise<boolean> {\n  // On a dry run, it doesn't matter, return true 🤷‍♂️\n  if (dryRun) {\n    return true\n  }\n\n  // Prioritize CLI flag if set\n  if (typeof playgroundCliFlag !== 'undefined') {\n    return playgroundCliFlag\n  }\n\n  // If explicitly set true/false in configuration, use that\n  if (typeof playgroundConfiguration !== 'undefined') {\n    return playgroundConfiguration\n  }\n\n  // If API is already deployed, use the current state\n  if (typeof playgroundCurrentlyEnabled !== 'undefined') {\n    return playgroundCurrentlyEnabled\n  }\n\n  // If no API is deployed, default to true if non-interactive\n  if (!isInteractive) {\n    return true\n  }\n\n  // Interactive environment, so prompt the user\n  const prevText = spinner.text\n  spinner.warn()\n  const shouldDeploy = await prompt.single<boolean>({\n    type: 'confirm',\n    message: 'Do you want to enable a GraphQL playground?',\n    default: true,\n  })\n  spinner.clear().start(prevText)\n\n  return shouldDeploy\n}\n\nasync function getCurrentSchemaProps(\n  client: SanityClient,\n  dataset: string,\n  tag: string,\n): Promise<{\n  currentGeneration?: string\n  playgroundEnabled?: boolean\n}> {\n  try {\n    const apiUrl = getClientUrl(client, `/apis/graphql/${dataset}/${tag}`)\n    const res = await getUrlHeaders(apiUrl, {\n      Authorization: `Bearer ${client.config().token}`,\n    })\n\n    return {\n      currentGeneration: res['x-sanity-graphql-generation'],\n      playgroundEnabled: res['x-sanity-graphql-playground'] === 'true',\n    }\n  } catch (err) {\n    if (err.statusCode === 404) {\n      return {}\n    }\n\n    throw err\n  }\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .option('tag', {type: 'string'})\n    .option('dataset', {type: 'string'})\n    .option('api', {type: 'string', array: true})\n    .option('dry-run', {type: 'boolean', default: false})\n    .option('generation', {type: 'string'})\n    .option('non-null-document-fields', {type: 'boolean'})\n    .option('playground', {type: 'boolean'})\n    .option('with-union-cache', {type: 'boolean'})\n    .option('force', {type: 'boolean'}).argv\n}\n\nfunction isResultValid(\n  valid: ValidationResponse,\n  {spinner, force}: {spinner: any; force?: boolean},\n) {\n  const {validationError, breakingChanges: breaking, dangerousChanges: dangerous} = valid\n  if (validationError) {\n    spinner.fail()\n    throw new Error(`GraphQL schema is not valid:\\n\\n${validationError}`)\n  }\n\n  const breakingChanges = breaking.filter((change) => !ignoredBreaking.includes(change.type))\n  const dangerousChanges = dangerous.filter((change) => !ignoredWarnings.includes(change.type))\n\n  const hasProblematicChanges = breakingChanges.length > 0 || dangerousChanges.length > 0\n  if (force && hasProblematicChanges) {\n    spinner.text = 'Validating GraphQL API: Dangerous changes. Forced with `--force`.'\n    spinner.warn()\n    return true\n  } else if (force || !hasProblematicChanges) {\n    spinner.succeed()\n    return true\n  }\n\n  spinner.warn()\n  return false\n}\n\nfunction renderBreakingChanges(valid: ValidationResponse, output: CliOutputter) {\n  const {breakingChanges: breaking, dangerousChanges: dangerous} = valid\n\n  const breakingChanges = breaking.filter((change) => !ignoredBreaking.includes(change.type))\n  const dangerousChanges = dangerous.filter((change) => !ignoredWarnings.includes(change.type))\n\n  if (dangerousChanges.length > 0) {\n    output.print('\\nFound potentially dangerous changes from previous schema:')\n    dangerousChanges.forEach((change) => output.print(` - ${change.description}`))\n  }\n\n  if (breakingChanges.length > 0) {\n    output.print('\\nFound BREAKING changes from previous schema:')\n    breakingChanges.forEach((change) => output.print(` - ${change.description}`))\n  }\n\n  output.print('')\n}\n\nasync function resolveApiGeneration({\n  currentGeneration,\n  specifiedGeneration,\n  index,\n  force,\n  output,\n  prompt,\n}: {\n  index: number\n  currentGeneration?: string\n  specifiedGeneration?: string\n  force?: boolean\n  output: CliOutputter\n  prompt: CliPrompter\n}): Promise<string | undefined> {\n  // a) If no API is currently deployed:\n  //    use the specificed one from config, or use whichever generation is the latest\n  // b) If an API generation is specified explicitly:\n  //    use the given one, but _prompt_ if it differs from the current one\n  // c) If no API generation is specified explicitly:\n  //    use whichever is already deployed, but warn if differs from latest\n  if (!currentGeneration) {\n    const generation = specifiedGeneration || latestGeneration\n    debug(\n      'There is no current generation deployed, using %s (%s)',\n      generation,\n      specifiedGeneration ? 'specified' : 'default',\n    )\n    return generation\n  }\n\n  if (specifiedGeneration && specifiedGeneration !== currentGeneration) {\n    if (!force && !isInteractive) {\n      throw new Error(oneline`\n        Specified generation (${specifiedGeneration}) for API at index ${index} differs from the one currently deployed (${currentGeneration}).\n        Re-run the command with \\`--force\\` to force deployment.\n      `)\n    }\n\n    output.warn(\n      `Specified generation (${specifiedGeneration}) for API at index ${index} differs from the one currently deployed (${currentGeneration}).`,\n    )\n\n    const confirmDeploy =\n      force ||\n      (await prompt.single({\n        type: 'confirm',\n        message: 'Are you sure you want to deploy?',\n        default: false,\n      }))\n\n    return confirmDeploy ? specifiedGeneration : undefined\n  }\n\n  if (specifiedGeneration) {\n    debug('Using specified (%s) generation', specifiedGeneration)\n    return specifiedGeneration\n  }\n\n  debug('Using the currently deployed version (%s)', currentGeneration)\n  return currentGeneration\n}\n\nfunction isRecognizedApiGeneration(generation: string): generation is 'gen1' | 'gen2' | 'gen3' {\n  return generations.hasOwnProperty(generation)\n}\n"],"names":["getIt","promise","__publicField","logSymbols","upperFirst","generateHelpUrl","Schema","startCase","types","getDeprecation","_a","uniqBy","helpUrls.SCHEMA_LIFT_ANONYMOUS_OBJECT_TYPE","oneline","isDeprecationConfiguration","filterCreators","createIdFilters","createStringFilters","createBooleanFilters","createDateFilters","generateTypeFilters","flatten","createFieldFilters","getDocumentFilters","pluralize","generateTypeQueries","createDocumentFilters","typeAliases","createBuiltinTypeFilters","createObjectTypeFilters","createDocumentTypeFilters","builtInTypes","builtInSortingEnum","generateTypeSortings","createObjectTypeSortings","createDocumentTypeSortings","getGraphQLAPIs","schema","get","getClientUrl","yargs","hideBin","debug"],"mappings":"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"}