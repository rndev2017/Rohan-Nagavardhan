{"version":3,"file":"runtime.js","sources":["../../src/_internal/cli/server/debug.ts","../../src/_internal/cli/server/aliases.ts","../../src/_internal/cli/server/helpers.ts","../../src/_internal/cli/server/sanityMonorepo.ts","../../src/_internal/cli/server/renderDocument.ts","../../src/_internal/cli/server/vite/plugin-sanity-build-entries.ts","../../src/_internal/cli/server/vite/plugin-sanity-dot-workaround.ts","../../src/_internal/cli/server/webManifest.ts","../../src/_internal/cli/server/vite/plugin-sanity-favicons.ts","../../src/_internal/cli/server/vite/plugin-sanity-runtime-rewrite.ts","../../src/_internal/cli/server/getViteConfig.ts","../../src/_internal/cli/server/getEntryModule.ts","../../src/_internal/cli/server/sanityConfig.ts","../../src/_internal/cli/server/runtime.ts"],"sourcesContent":["import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:server')\n","import path from 'node:path'\n\nimport {type SanityMonorepo} from './sanityMonorepo'\n\n/**\n * Returns an object of aliases for vite to use\n *\n * @internal\n */\nexport function getAliases(opts: {monorepo?: SanityMonorepo}): Record<string, string> {\n  const {monorepo} = opts\n\n  if (!monorepo?.path) {\n    return {}\n  }\n\n  // Load monorepo aliases (if the current Studio is located within the sanity monorepo)\n  // This is done in order for the Vite server to use the source files instead of\n  // the compiled output, allowing for a better dev experience.\n  const aliasesPath = path.resolve(monorepo.path, 'dev/aliases.cjs')\n\n  // eslint-disable-next-line import/no-dynamic-require\n  const devAliases: Record<string, string> = require(aliasesPath)\n\n  const monorepoAliases = Object.fromEntries(\n    Object.entries(devAliases).map(([key, modulePath]) => {\n      return [key, path.resolve(monorepo.path, modulePath)]\n    }),\n  )\n\n  return monorepoAliases\n}\n","import path from 'node:path'\n\nimport readPkgUp from 'read-pkg-up'\nimport resolveFrom from 'resolve-from'\n\n/**\n * Given a module name such as \"styled-components\", will resolve the _module path_,\n * eg if require.resolve(`styled-components`) resolves to:\n *   `/some/node_modules/styled-components/lib/cjs/styled.js`\n * this function will instead return\n *   `/some/node_modules/styled-components`\n *\n * This is done in order for aliases to be pointing to the right module in terms of\n * _file-system location_, without pointing to a specific commonjs/browser/module variant\n *\n * @internal\n */\nexport async function getModulePath(mod: string, fromDir: string): Promise<string> {\n  const modulePath = resolveFrom(fromDir, mod)\n  const pkg = await readPkgUp({cwd: path.dirname(modulePath)})\n\n  return pkg ? path.dirname(pkg.path) : modulePath\n}\n\n/**\n * @internal\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return Boolean(value) && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Ensures that the given path both starts and ends with a single slash\n *\n * @internal\n */\nexport function normalizeBasePath(pathName: string): string {\n  return `/${pathName}/`.replace(/^\\/+/, '/').replace(/\\/+$/, '/')\n}\n","import path from 'node:path'\n\nimport readPkgUp from 'read-pkg-up'\n\n/**\n * @internal\n */\nexport interface SanityMonorepo {\n  path: string\n}\n\n/**\n * Load information about the `sanity-io/sanity` monorepo (if applicable)\n *\n * @internal\n */\nexport async function loadSanityMonorepo(cwd: string): Promise<SanityMonorepo | undefined> {\n  let p = cwd\n\n  while (p !== '/') {\n    const readResult = await readPkgUp({cwd: p})\n\n    if (!readResult) {\n      return undefined\n    }\n\n    if (readResult.packageJson.isSanityMonorepo) {\n      return {path: path.dirname(readResult.path)}\n    }\n\n    p = path.dirname(path.dirname(readResult.path))\n  }\n\n  return undefined\n}\n","/**\n * Looks for and imports (in preferred order):\n *   - src/_document.js\n *   - src/_document.tsx\n *\n * Then renders using ReactDOM to a string, which is sent back to the parent\n * process over the worker `postMessage` channel.\n */\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport {isMainThread, parentPort, Worker, workerData} from 'node:worker_threads'\n\nimport chalk from 'chalk'\nimport importFresh from 'import-fresh'\nimport {createElement} from 'react'\nimport {renderToStaticMarkup} from 'react-dom/server'\n\nimport {getAliases} from './aliases'\nimport {debug as serverDebug} from './debug'\nimport {type SanityMonorepo} from './sanityMonorepo'\n\nconst debug = serverDebug.extend('renderDocument')\n\n// Don't use threads in the jest world\n// eslint-disable-next-line no-process-env\nconst useThreads = typeof process.env.JEST_WORKER_ID === 'undefined'\nconst hasWarnedAbout = new Set<string>()\n\nconst defaultProps = {\n  entryPath: './.sanity/runtime/app.js',\n}\n\nconst autoGeneratedWarning = `\nThis file is auto-generated from \"sanity dev\".\nModifications to this file are automatically discarded.\n`.trim()\n\ninterface DocumentProps {\n  basePath: string\n  entryPath?: string\n  css?: string[]\n}\n\nexport function renderDocument(options: {\n  monorepo?: SanityMonorepo\n  studioRootPath: string\n  props?: DocumentProps\n}): Promise<string> {\n  return new Promise((resolve, reject) => {\n    if (!useThreads) {\n      resolve(getDocumentHtml(options.studioRootPath, options.props))\n      return\n    }\n\n    debug('Starting worker thread for %s', __filename)\n    const worker = new Worker(__filename, {\n      execArgv: __DEV__ ? ['-r', `${__dirname}/esbuild-register.js`] : undefined,\n      workerData: {...options, dev: __DEV__, shouldWarn: true},\n      // eslint-disable-next-line no-process-env\n      env: process.env,\n    })\n\n    worker.on('message', (msg) => {\n      if (msg.type === 'warning') {\n        if (hasWarnedAbout.has(msg.warnKey)) {\n          return\n        }\n\n        if (Array.isArray(msg.message)) {\n          msg.message.forEach((warning: string) =>\n            console.warn(`${chalk.yellow('[warn]')} ${warning}`),\n          )\n        } else {\n          console.warn(`${chalk.yellow('[warn]')} ${msg.message}`)\n        }\n\n        hasWarnedAbout.add(msg.warnKey)\n        return\n      }\n\n      if (msg.type === 'error') {\n        debug('Error from worker: %s', msg.error || 'Unknown error')\n        reject(new Error(msg.error || 'Document rendering worker stopped with an unknown error'))\n        return\n      }\n\n      if (msg.type === 'result') {\n        debug('Document HTML rendered, %d bytes', msg.html.length)\n        resolve(msg.html)\n      }\n    })\n    worker.on('error', (err) => {\n      debug('Worker errored: %s', err.message)\n      reject(err)\n    })\n    worker.on('exit', (code) => {\n      if (code !== 0) {\n        debug('Worker stopped with code %d', code)\n        reject(new Error(`Document rendering worker stopped with exit code ${code}`))\n      }\n    })\n  })\n}\n\nexport function decorateIndexWithAutoGeneratedWarning(template: string): string {\n  return template.replace(/<head/, `\\n<!--\\n${autoGeneratedWarning}\\n-->\\n<head`)\n}\n\nexport function getPossibleDocumentComponentLocations(studioRootPath: string): string[] {\n  return [path.join(studioRootPath, '_document.js'), path.join(studioRootPath, '_document.tsx')]\n}\n\n/**\n * Adds a base path to a URL if necessary, and returns the resulting URL.\n * @param url - The URL to prefix with a base path.\n * @param basePath - The base path to prefix the URL with. Default value is `/`.\n * @returns The resulting URL with the base path.\n * @internal\n */\nexport function _prefixUrlWithBasePath(url: string, basePath: string): string {\n  // Normalize basePath by adding a leading slash if it's missing.\n  const normalizedBasePath = basePath.startsWith('/') ? basePath : `/${basePath}`\n\n  // If the URL starts with a slash, append it to the basePath, removing any trailing slash if present.\n  if (url.startsWith('/')) {\n    if (normalizedBasePath.endsWith('/')) {\n      return `${normalizedBasePath.slice(0, -1)}${url}`\n    }\n    return `${normalizedBasePath}${url}`\n  }\n\n  // If the URL doesn't start with a slash, append it to the basePath with a slash in between.\n  if (normalizedBasePath.endsWith('/')) {\n    return `${normalizedBasePath}${url}`\n  }\n  return `${normalizedBasePath}/${url}`\n}\n\nif (!isMainThread && parentPort) {\n  renderDocumentFromWorkerData()\n}\n\nfunction renderDocumentFromWorkerData() {\n  if (!parentPort || !workerData) {\n    throw new Error('Must be used as a Worker with a valid options object in worker data')\n  }\n\n  const {monorepo, studioRootPath, props} = workerData || {}\n\n  if (workerData?.dev) {\n    // Define `__DEV__` in the worker thread as well\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ;(global as any).__DEV__ = true\n  }\n\n  if (typeof studioRootPath !== 'string') {\n    parentPort.postMessage({type: 'error', message: 'Missing/invalid `studioRootPath` option'})\n    return\n  }\n\n  if (props && typeof props !== 'object') {\n    parentPort.postMessage({type: 'error', message: '`props` must be an object if provided'})\n    return\n  }\n\n  // Require hook #1\n  // Alias monorepo modules\n  debug('Registering potential aliases')\n  require('module-alias').addAliases(getAliases({monorepo}))\n\n  // Require hook #2\n  // Use `esbuild` to allow JSX/TypeScript and modern JS features\n  debug('Registering esbuild for node %s', process.version)\n  const {unregister} = __DEV__\n    ? {unregister: () => undefined}\n    : require('esbuild-register/dist/node').register({\n        target: `node${process.version.slice(1)}`,\n        jsx: 'automatic',\n        extensions: ['.jsx', '.ts', '.tsx', '.mjs'],\n      })\n\n  // Require hook #3\n  // Same as above, but we don't want to enforce a .jsx extension for anything with JSX\n  debug('Registering esbuild for .js files using jsx loader')\n  const {unregister: unregisterJs} = __DEV__\n    ? () => ({unregister: () => undefined})\n    : require('esbuild-register/dist/node').register({\n        target: `node${process.version.slice(1)}`,\n        extensions: ['.js'],\n        jsx: 'automatic',\n        loader: 'jsx',\n      })\n\n  const html = getDocumentHtml(studioRootPath, props)\n\n  parentPort.postMessage({type: 'result', html})\n\n  // Be polite and clean up after esbuild-register\n  unregister()\n  unregisterJs()\n}\n\nfunction getDocumentHtml(studioRootPath: string, props?: DocumentProps): string {\n  const Document = getDocumentComponent(studioRootPath)\n\n  // NOTE: Validate the list of CSS paths so implementers of `_document.tsx` don't have to\n  // - If the path is not a full URL, check if it starts with `/`\n  //   - If not, then prepend a `/` to the string\n  const css = props?.css?.map((url) => {\n    try {\n      // If the URL is absolute, we don't need to prefix it\n      return new URL(url).toString()\n    } catch {\n      return _prefixUrlWithBasePath(url, props.basePath)\n    }\n  })\n\n  debug('Rendering document component using React')\n  const result = renderToStaticMarkup(createElement(Document, {...defaultProps, ...props, css}))\n  return `<!DOCTYPE html>${result}`\n}\n\nfunction getDocumentComponent(studioRootPath: string) {\n  debug('Loading default document component from `sanity` module')\n  const {DefaultDocument} = __DEV__\n    ? require('../../../core/components/DefaultDocument')\n    : require('sanity')\n\n  debug('Attempting to load user-defined document component from %s', studioRootPath)\n  const userDefined = tryLoadDocumentComponent(studioRootPath)\n\n  if (!userDefined) {\n    debug('Using default document component')\n    return DefaultDocument\n  }\n\n  debug('Found user defined document component at %s', userDefined.path)\n\n  const DocumentComp = userDefined.component.default || userDefined.component // CommonJS\n  if (typeof DocumentComp === 'function') {\n    debug('User defined document component is a function, assuming valid')\n    return DocumentComp\n  }\n\n  debug('User defined document component did not have a default export')\n  const userExports = Object.keys(userDefined.component).join(', ') || 'None'\n  const relativePath = path.relative(process.cwd(), userDefined.path)\n  const typeHint =\n    typeof userDefined.component.default === 'undefined'\n      ? ''\n      : ` (type was ${typeof userDefined.component.default})`\n\n  const warnKey = `${relativePath}/${userDefined.modified}`\n\n  parentPort?.postMessage({\n    type: 'warning',\n    message: [\n      `${relativePath} did not have a default export that is a React component${typeHint}`,\n      `Named exports/properties found: ${userExports}`.trim(),\n      `Using default document component from \"sanity\".`,\n    ],\n    warnKey,\n  })\n\n  return DefaultDocument\n}\n\nfunction tryLoadDocumentComponent(studioRootPath: string) {\n  const locations = getPossibleDocumentComponentLocations(studioRootPath)\n\n  for (const componentPath of locations) {\n    debug('Trying to load document component from %s', componentPath)\n    try {\n      return {\n        // eslint-disable-next-line import/no-dynamic-require\n        component: importFresh<any>(componentPath),\n        path: componentPath,\n        // eslint-disable-next-line no-sync\n        modified: Math.floor(fs.statSync(componentPath)?.mtimeMs),\n      }\n    } catch (err) {\n      // Allow \"not found\" errors\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        debug('Failed to load document component: %s', err.message)\n        throw err\n      }\n\n      debug('Document component not found at %s', componentPath)\n    }\n  }\n\n  return null\n}\n","import {type ChunkMetadata, type Plugin} from 'vite'\n\nimport {renderDocument} from '../renderDocument'\nimport {type SanityMonorepo} from '../sanityMonorepo'\n\ninterface ViteOutputBundle {\n  [fileName: string]: ViteRenderedChunk | ViteRenderedAsset\n}\n\ninterface ViteRenderedAsset {\n  type: 'asset'\n}\n\ninterface ViteRenderedChunk {\n  type: 'chunk'\n  name: string\n  fileName: string\n  facadeModuleId: string | null\n  code: string\n  imports: string[]\n  viteMetadata: ChunkMetadata\n}\n\nconst entryChunkId = '.sanity/runtime/app.js'\n\nexport function sanityBuildEntries(options: {\n  cwd: string\n  monorepo: SanityMonorepo | undefined\n  basePath: string\n}): Plugin {\n  const {cwd, monorepo, basePath} = options\n\n  return {\n    name: 'sanity/server/build-entries',\n    apply: 'build',\n\n    buildStart() {\n      this.emitFile({\n        type: 'chunk',\n        id: entryChunkId,\n        name: 'sanity',\n      })\n    },\n\n    async generateBundle(_options, outputBundle) {\n      const bundle = outputBundle as unknown as ViteOutputBundle\n      const entryFile = Object.values(bundle).find(\n        (file) =>\n          file.type === 'chunk' &&\n          file.name === 'sanity' &&\n          file.facadeModuleId?.endsWith(entryChunkId),\n      )\n\n      if (!entryFile) {\n        throw new Error(`Failed to find entry file in bundle (${entryChunkId})`)\n      }\n\n      if (entryFile.type !== 'chunk') {\n        throw new Error('Entry file is not a chunk')\n      }\n\n      const entryFileName = entryFile.fileName\n      const entryPath = [basePath.replace(/\\/+$/, ''), entryFileName].join('/')\n\n      let css: string[] = []\n      if (entryFile.viteMetadata?.importedCss) {\n        // Check all the top-level imports of the entryPoint to see if they have\n        // static CSS assets that need loading\n        css = [...entryFile.viteMetadata.importedCss]\n        for (const key of entryFile.imports) {\n          // Traverse all CSS assets that isn't loaded by the runtime and\n          // need <link> tags in the HTML template\n          const entry = bundle[key]\n          const importedCss =\n            entry && entry.type === 'chunk' ? entry.viteMetadata.importedCss : undefined\n\n          if (importedCss) {\n            css.push(...importedCss)\n          }\n        }\n      }\n\n      this.emitFile({\n        type: 'asset',\n        fileName: 'index.html',\n        source: await renderDocument({\n          monorepo,\n          studioRootPath: cwd,\n          props: {\n            basePath,\n            entryPath,\n            css,\n          },\n        }),\n      })\n    },\n  }\n}\n","import fs from 'node:fs'\nimport path from 'node:path'\n\nimport history from 'connect-history-api-fallback'\nimport {type Plugin} from 'vite'\n\n/**\n * This is a Vite plugin for supporting locations containing `.` in their pathname.\n *\n * @see https://github.com/vitejs/vite/issues/2245\n */\nexport function sanityDotWorkaroundPlugin(): Plugin {\n  return {\n    name: 'sanity/server/dot-workaround',\n    configureServer(server) {\n      const {root} = server.config\n\n      return () => {\n        const handler = history({\n          disableDotRule: true,\n          rewrites: [\n            {\n              from: /\\/index.html$/,\n              to: ({parsedUrl}) => {\n                const pathname = parsedUrl.pathname\n\n                if (pathname && fs.existsSync(path.join(root, pathname))) {\n                  return pathname\n                }\n\n                return `/index.html`\n              },\n            },\n          ],\n        })\n\n        server.middlewares.use((req, res, next) => {\n          handler(req as any, res as any, next)\n        })\n      }\n    },\n  }\n}\n","export interface WebManifest {\n  icons: {\n    src: string\n    type: string\n    sizes: string\n  }[]\n}\n\nexport function generateWebManifest(basePath: string): WebManifest {\n  return {\n    icons: [\n      {src: `${basePath}/favicon-192.png`, type: 'image/png', sizes: '192x192'},\n      {src: `${basePath}/favicon-512.png`, type: 'image/png', sizes: '512x512'},\n    ],\n  }\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type Plugin} from 'vite'\n\nimport {generateWebManifest} from '../webManifest'\n\nconst mimeTypes: Record<string, string | undefined> = {\n  '.ico': 'image/x-icon',\n  '.svg': 'image/svg+xml',\n  '.png': 'image/png',\n}\n\n/**\n * Fallback favicons plugin for Sanity.\n *\n * If a favicon is not found in the static folder, this plugin will serve the default\n * Sanity favicons from the npm bundle. If a custom `favicon.ico` is found in the static\n * folder, it will also be served for a root `/favicon.ico` request.\n *\n * @param options - Options for the plugin\n * @returns A Vite plugin\n * @internal\n */\nexport function sanityFaviconsPlugin({\n  defaultFaviconsPath,\n  customFaviconsPath,\n  staticUrlPath,\n}: {\n  defaultFaviconsPath: string\n  customFaviconsPath: string\n  staticUrlPath: string\n}): Plugin {\n  const cache: {favicons?: string[]} = {}\n\n  async function getFavicons(): Promise<string[]> {\n    if (cache.favicons) {\n      return cache.favicons\n    }\n\n    cache.favicons = await fs.readdir(defaultFaviconsPath)\n    return cache.favicons\n  }\n\n  async function hasCustomFavicon(): Promise<boolean> {\n    try {\n      await fs.access(path.join(customFaviconsPath, 'favicon.ico'))\n      return true\n    } catch (err) {\n      return false\n    }\n  }\n\n  return {\n    name: 'sanity/server/sanity-favicons',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      const webManifest = JSON.stringify(generateWebManifest(staticUrlPath), null, 2)\n      const webManifestPath = `${staticUrlPath}/manifest.webmanifest`\n\n      return () => {\n        viteDevServer.middlewares.use(async (req, res, next) => {\n          if (req.url?.endsWith(webManifestPath)) {\n            res.writeHead(200, 'OK', {'content-type': 'application/manifest+json'})\n            res.write(webManifest)\n            res.end()\n            return\n          }\n\n          const parsedUrl =\n            ((req as any)._parsedUrl as URL) || new URL(req.url || '/', 'http://localhost:3333')\n\n          const pathName = parsedUrl.pathname || ''\n          const fileName = path.basename(pathName || '')\n          const icons = await getFavicons()\n          const isIconRequest =\n            pathName.startsWith('/favicon.ico') ||\n            (icons.includes(fileName) && pathName.includes(staticUrlPath))\n\n          if (!isIconRequest) {\n            next()\n            return\n          }\n\n          const faviconPath =\n            fileName === 'favicon.ico' && (await hasCustomFavicon())\n              ? path.join(customFaviconsPath, 'favicon.ico')\n              : path.join(defaultFaviconsPath, fileName)\n\n          const mimeType = mimeTypes[path.extname(fileName)] || 'application/octet-stream'\n          res.writeHead(200, 'OK', {'content-type': mimeType})\n          res.write(await fs.readFile(faviconPath))\n          res.end()\n        })\n      }\n    },\n  }\n}\n","import {type Plugin} from 'vite'\n\nexport function sanityRuntimeRewritePlugin(): Plugin {\n  return {\n    name: 'sanity/server/sanity-runtime-rewrite',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      return () => {\n        viteDevServer.middlewares.use((req, res, next) => {\n          if (req.url === '/index.html') {\n            req.url = '/.sanity/runtime/index.html'\n          }\n\n          next()\n        })\n      }\n    },\n  }\n}\n","import path from 'node:path'\n\nimport {type UserViteConfig} from '@sanity/cli'\nimport viteReact from '@vitejs/plugin-react'\nimport debug from 'debug'\nimport readPkgUp from 'read-pkg-up'\nimport {type ConfigEnv, type InlineConfig, mergeConfig} from 'vite'\n\nimport {getAliases} from './aliases'\nimport {getStudioEnvironmentVariables} from './getStudioEnvironmentVariables'\nimport {normalizeBasePath} from './helpers'\nimport {loadSanityMonorepo} from './sanityMonorepo'\nimport {sanityBuildEntries} from './vite/plugin-sanity-build-entries'\nimport {sanityDotWorkaroundPlugin} from './vite/plugin-sanity-dot-workaround'\nimport {sanityFaviconsPlugin} from './vite/plugin-sanity-favicons'\nimport {sanityRuntimeRewritePlugin} from './vite/plugin-sanity-runtime-rewrite'\n\nexport interface ViteOptions {\n  /**\n   * Root path of the studio/sanity app\n   */\n  cwd: string\n\n  /**\n   * Base path (eg under where to serve the app - `/studio` or similar)\n   * Will be normalized to ensure it starts and ends with a `/`\n   */\n  basePath?: string\n\n  /**\n   * Output directory (eg where to place the built files, if any)\n   */\n  outputDir?: string\n\n  /**\n   * Whether or not to enable source maps\n   */\n  sourceMap?: boolean\n\n  /**\n   * Whether or not to minify the output (only used in `mode: 'production'`)\n   */\n  minify?: boolean\n\n  /**\n   * HTTP development server configuration\n   */\n  server?: {port?: number; host?: string}\n\n  /**\n   * Mode to run vite in - eg development or production\n   */\n  mode: 'development' | 'production'\n}\n\n/**\n * Get a configuration object for Vite based on the passed options\n *\n * @internal Only meant for consumption inside of Sanity modules, do not depend on this externally\n */\nexport async function getViteConfig(options: ViteOptions): Promise<InlineConfig> {\n  const {\n    cwd,\n    mode,\n    outputDir,\n    // default to `true` when `mode=development`\n    sourceMap = options.mode === 'development',\n    server,\n    minify,\n    basePath: rawBasePath = '/',\n  } = options\n\n  const monorepo = await loadSanityMonorepo(cwd)\n  const basePath = normalizeBasePath(rawBasePath)\n\n  const sanityPkgPath = (await readPkgUp({cwd: __dirname}))?.path\n  if (!sanityPkgPath) {\n    throw new Error('Unable to resolve `sanity` module root')\n  }\n\n  const customFaviconsPath = path.join(cwd, 'static')\n  const defaultFaviconsPath = path.join(path.dirname(sanityPkgPath), 'static', 'favicons')\n  const staticPath = `${basePath}static`\n\n  const viteConfig: InlineConfig = {\n    // Define a custom cache directory so that sanity's vite cache\n    // does not conflict with any potential local vite projects\n    cacheDir: 'node_modules/.sanity/vite',\n    root: cwd,\n    base: basePath,\n    build: {\n      outDir: outputDir || path.resolve(cwd, 'dist'),\n      sourcemap: sourceMap,\n    },\n    server: {\n      host: server?.host,\n      port: server?.port || 3333,\n      strictPort: true,\n    },\n    configFile: false,\n    mode,\n    plugins: [\n      viteReact(),\n      sanityFaviconsPlugin({defaultFaviconsPath, customFaviconsPath, staticUrlPath: staticPath}),\n      sanityDotWorkaroundPlugin(),\n      sanityRuntimeRewritePlugin(),\n      sanityBuildEntries({basePath, cwd, monorepo}),\n    ],\n    envPrefix: 'SANITY_STUDIO_',\n    logLevel: mode === 'production' ? 'silent' : 'info',\n    resolve: {\n      alias: getAliases({monorepo}),\n    },\n    define: {\n      // eslint-disable-next-line no-process-env\n      '__SANITY_STAGING__': process.env.SANITY_INTERNAL_ENV === 'staging',\n      'process.env.MODE': JSON.stringify(mode),\n      ...getStudioEnvironmentVariables({prefix: 'process.env.', jsonEncode: true}),\n    },\n  }\n\n  const addImportMap = false\n\n  if (mode === 'production') {\n    viteConfig.build = {\n      ...viteConfig.build,\n\n      assetsDir: 'static',\n      minify: minify ? 'esbuild' : false,\n      emptyOutDir: false, // Rely on CLI to do this\n\n      rollupOptions: {\n        external: addImportMap\n          ? [/^sanity(\\/.*)?$/, 'react', 'react/jsx-runtime', 'styled-components']\n          : [],\n        input: {\n          sanity: path.join(cwd, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    }\n  }\n\n  return viteConfig\n}\n\n/**\n * Ensure Sanity entry chunk is always loaded\n *\n * @param config - User-modified configuration\n * @returns Merged configuration\n * @internal\n */\nexport function finalizeViteConfig(config: InlineConfig): InlineConfig {\n  if (typeof config.build?.rollupOptions?.input !== 'object') {\n    throw new Error(\n      'Vite config must contain `build.rollupOptions.input`, and it must be an object',\n    )\n  }\n\n  if (!config.root) {\n    throw new Error(\n      'Vite config must contain `root` property, and must point to the Sanity root directory',\n    )\n  }\n\n  return mergeConfig(config, {\n    build: {\n      rollupOptions: {\n        input: {\n          sanity: path.join(config.root, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    },\n  })\n}\n\n/**\n * Merge user-provided Vite configuration object or function\n *\n * @param defaultConfig - Default configuration object\n * @param userConfig - User-provided configuration object or function\n * @returns Merged configuration\n * @internal\n */\nexport async function extendViteConfigWithUserConfig(\n  env: ConfigEnv,\n  defaultConfig: InlineConfig,\n  userConfig: UserViteConfig,\n): Promise<InlineConfig> {\n  let config = defaultConfig\n\n  if (typeof userConfig === 'function') {\n    debug('Extending vite config using user-specified function')\n    config = await userConfig(config, env)\n  } else if (typeof userConfig === 'object') {\n    debug('Merging vite config using user-specified object')\n    config = mergeConfig(config, userConfig)\n  }\n\n  return config\n}\n","const entryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file is automatically discarded\nimport {renderStudio} from \"sanity\"\nimport studioConfig from %STUDIO_CONFIG_LOCATION%\n\nrenderStudio(\n  document.getElementById(\"sanity\"),\n  studioConfig,\n  {reactStrictMode: %STUDIO_REACT_STRICT_MODE%, basePath: %STUDIO_BASE_PATH%}\n)\n`\n\nconst noConfigEntryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file is automatically discarded\nimport {renderStudio} from \"sanity\"\n\nconst studioConfig = {missingConfigFile: true}\n\nrenderStudio(\n  document.getElementById(\"sanity\"),\n  studioConfig,\n  {reactStrictMode: %STUDIO_REACT_STRICT_MODE%, basePath: %STUDIO_BASE_PATH%}\n)\n`\n\nexport function getEntryModule(options: {\n  reactStrictMode: boolean\n  relativeConfigLocation: string | null\n  basePath?: string\n}): string {\n  const {reactStrictMode, relativeConfigLocation, basePath} = options\n  const sourceModule = relativeConfigLocation ? entryModule : noConfigEntryModule\n\n  return sourceModule\n    .replace(/%STUDIO_REACT_STRICT_MODE%/, JSON.stringify(Boolean(reactStrictMode)))\n    .replace(/%STUDIO_CONFIG_LOCATION%/, JSON.stringify(relativeConfigLocation))\n    .replace(/%STUDIO_BASE_PATH%/, JSON.stringify(basePath || '/'))\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('config')\n\n/**\n * Resolves the path to the studio configuration file with the following extensions,\n * in preferred order: '.mjs', '.js', '.ts', '.jsx', '.tsx' (aligns with vite)\n *\n * Falls back to the default studio configuration exported by `sanity` if none is found\n *\n * @internal\n */\nexport async function getSanityStudioConfigPath(studioRootPath: string): Promise<string | null> {\n  const configPaths = [\n    path.join(studioRootPath, 'sanity.config.mjs'),\n    path.join(studioRootPath, 'sanity.config.js'),\n    path.join(studioRootPath, 'sanity.config.ts'),\n    path.join(studioRootPath, 'sanity.config.jsx'),\n    path.join(studioRootPath, 'sanity.config.tsx'),\n  ]\n\n  debug('Looking for configuration file in %d possible locations', configPaths.length)\n  const configs = await Promise.all(\n    configPaths.map(async (configPath) => ({\n      path: configPath,\n      exists: await fileExists(configPath),\n    })),\n  )\n\n  const availableConfigs = configs.filter((config) => config.exists)\n  debug('Found %d available configuration files', availableConfigs.length)\n\n  // No config file exists?\n  if (availableConfigs.length === 0) {\n    console.warn('No `sanity.config.js`/`sanity.config.ts` found - using default studio config')\n    return null\n  }\n\n  if (availableConfigs.length > 1) {\n    console.warn('Found multiple potential studio configs:')\n    availableConfigs.forEach((config) => console.warn(` - ${config.path}`))\n    console.warn(`Using ${availableConfigs[0].path}`)\n  }\n\n  return availableConfigs[0].path\n}\n\n/**\n * Asynchronously checks if a file exists. This is prone to race conditions,\n * as the file can exist/not exist by the time this resolves, but in this\n * case this is an acceptable trade-off. Best effort, and all that.\n */\nfunction fileExists(filePath: string): Promise<boolean> {\n  return fs.stat(filePath).then(\n    () => true,\n    () => false,\n  )\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport chokidar from 'chokidar'\n\nimport {debug as serverDebug} from './debug'\nimport {getEntryModule} from './getEntryModule'\nimport {\n  decorateIndexWithAutoGeneratedWarning,\n  getPossibleDocumentComponentLocations,\n  renderDocument,\n} from './renderDocument'\nimport {getSanityStudioConfigPath} from './sanityConfig'\nimport {loadSanityMonorepo} from './sanityMonorepo'\n\nconst debug = serverDebug.extend('runtime')\n\nexport interface RuntimeOptions {\n  cwd: string\n  reactStrictMode: boolean\n  watch: boolean\n  basePath?: string\n}\n\n/**\n * Generates the `.sanity/runtime` directory, and optionally watches for custom\n * document files, rebuilding when they change\n *\n * @param options - Current working directory (Sanity root dir), and whether or not to watch\n * @internal\n */\nexport async function writeSanityRuntime({\n  cwd,\n  reactStrictMode,\n  watch,\n  basePath,\n}: RuntimeOptions): Promise<void> {\n  debug('Resolving Sanity monorepo information')\n  const monorepo = await loadSanityMonorepo(cwd)\n  const runtimeDir = path.join(cwd, '.sanity', 'runtime')\n\n  debug('Making runtime directory')\n  await fs.mkdir(runtimeDir, {recursive: true})\n\n  async function renderAndWriteDocument() {\n    debug('Rendering document template')\n    const indexHtml = decorateIndexWithAutoGeneratedWarning(\n      await renderDocument({\n        studioRootPath: cwd,\n        monorepo,\n        props: {\n          entryPath: `/${path.relative(cwd, path.join(runtimeDir, 'app.js'))}`,\n          basePath: basePath || '/',\n        },\n      }),\n    )\n\n    debug('Writing index.html to runtime directory')\n    await fs.writeFile(path.join(runtimeDir, 'index.html'), indexHtml)\n  }\n\n  if (watch) {\n    chokidar\n      .watch(getPossibleDocumentComponentLocations(cwd))\n      .on('all', () => renderAndWriteDocument())\n  }\n\n  await renderAndWriteDocument()\n\n  debug('Writing app.js to runtime directory')\n  const studioConfigPath = await getSanityStudioConfigPath(cwd)\n  const relativeConfigLocation = studioConfigPath\n    ? path.relative(runtimeDir, studioConfigPath)\n    : null\n\n  await fs.writeFile(\n    path.join(runtimeDir, 'app.js'),\n    getEntryModule({reactStrictMode, relativeConfigLocation, basePath}),\n  )\n}\n"],"names":["debug","debugIt","path","readPkgUp","serverDebug","Worker","chalk","isMainThread","parentPort","workerData","renderToStaticMarkup","createElement","importFresh","fs","_a","server","history","viteReact","getStudioEnvironmentVariables","mergeConfig","chokidar"],"mappings":"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"}