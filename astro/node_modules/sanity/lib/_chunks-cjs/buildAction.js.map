{"version":3,"file":"buildAction.js","sources":["../../src/_internal/cli/actions/build/build.telemetry.ts","../../src/_internal/cli/actions/build/buildAction.ts"],"sourcesContent":["import {defineTrace} from '@sanity/telemetry'\n\nexport const BuildTrace = defineTrace<{outputSize: number}>({\n  name: 'Studio Build Completed',\n  version: 0,\n  description: 'A Studio build completed',\n})\n","import path from 'node:path'\nimport {promisify} from 'node:util'\n\nimport chalk from 'chalk'\nimport {noopLogger} from '@sanity/telemetry'\nimport rimrafCallback from 'rimraf'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore This may not yet be built.\nimport type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\n\nimport {buildStaticFiles, ChunkModule, ChunkStats} from '../../server'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {getTimer} from '../../util/timing'\nimport {BuildTrace} from './build.telemetry'\n\nconst rimraf = promisify(rimrafCallback)\n\nexport interface BuildSanityStudioCommandFlags {\n  'yes'?: boolean\n  'y'?: boolean\n  'minify'?: boolean\n  'stats'?: boolean\n  'source-maps'?: boolean\n}\n\nexport default async function buildSanityStudio(\n  args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n  context: CliCommandContext,\n  overrides?: {basePath?: string},\n): Promise<{didCompile: boolean}> {\n  const timer = getTimer()\n  const {output, prompt, workDir, cliConfig, telemetry = noopLogger} = context\n  const flags: BuildSanityStudioCommandFlags = {\n    'minify': true,\n    'stats': false,\n    'source-maps': false,\n    ...args.extOptions,\n  }\n\n  const unattendedMode = Boolean(flags.yes || flags.y)\n  const defaultOutputDir = path.resolve(path.join(workDir, 'dist'))\n  const outputDir = path.resolve(args.argsWithoutOptions[0] || defaultOutputDir)\n\n  await checkStudioDependencyVersions(workDir)\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  if ((await checkRequiredDependencies(context)).didInstall) {\n    return {didCompile: false}\n  }\n\n  const envVarKeys = getSanityEnvVars()\n  if (envVarKeys.length > 0) {\n    output.print(\n      '\\nIncluding the following environment variables as part of the JavaScript bundle:',\n    )\n    envVarKeys.forEach((key) => output.print(`- ${key}`))\n    output.print('')\n  }\n\n  let shouldClean = true\n  if (outputDir !== defaultOutputDir && !unattendedMode) {\n    shouldClean = await prompt.single({\n      type: 'confirm',\n      message: `Do you want to delete the existing directory (${outputDir}) first?`,\n      default: true,\n    })\n  }\n\n  // Determine base path for built studio\n  let basePath = '/'\n  const envBasePath = process.env.SANITY_STUDIO_BASEPATH\n  const configBasePath = cliConfig?.project?.basePath\n\n  // Allow `sanity deploy` to override base path\n  if (overrides?.basePath) {\n    basePath = overrides.basePath\n  } else if (envBasePath) {\n    // Environment variable (SANITY_STUDIO_BASEPATH)\n    basePath = envBasePath\n  } else if (configBasePath) {\n    // `sanity.cli.ts`\n    basePath = configBasePath\n  }\n\n  if (envBasePath && configBasePath) {\n    output.warn(\n      `Overriding configured base path (${configBasePath}) with value from environment variable (${envBasePath})`,\n    )\n  }\n\n  let spin\n\n  if (shouldClean) {\n    timer.start('cleanOutputFolder')\n    spin = output.spinner('Clean output folder').start()\n    await rimraf(outputDir)\n    const cleanDuration = timer.end('cleanOutputFolder')\n    spin.text = `Clean output folder (${cleanDuration.toFixed()}ms)`\n    spin.succeed()\n  }\n\n  spin = output.spinner('Build Sanity Studio').start()\n\n  const trace = telemetry.trace(BuildTrace)\n  trace.start()\n  try {\n    timer.start('bundleStudio')\n\n    const bundle = await buildStaticFiles({\n      cwd: workDir,\n      outputDir,\n      basePath,\n      sourceMap: Boolean(flags['source-maps']),\n      minify: Boolean(flags.minify),\n      vite: cliConfig && 'vite' in cliConfig ? cliConfig.vite : undefined,\n    })\n    trace.log({\n      outputSize: bundle.chunks\n        .flatMap((chunk) => chunk.modules.flatMap((mod) => mod.renderedLength))\n        .reduce((sum, n) => sum + n, 0),\n    })\n    const buildDuration = timer.end('bundleStudio')\n\n    spin.text = `Build Sanity Studio (${buildDuration.toFixed()}ms)`\n    spin.succeed()\n    trace.complete()\n    if (flags.stats) {\n      output.print('\\nLargest module files:')\n      output.print(formatModuleSizes(sortModulesBySize(bundle.chunks).slice(0, 15)))\n    }\n  } catch (err) {\n    spin.fail()\n    trace.error(err)\n    throw err\n  }\n\n  return {didCompile: true}\n}\n\n// eslint-disable-next-line no-process-env\nfunction getSanityEnvVars(env: Record<string, string | undefined> = process.env): string[] {\n  return Object.keys(env).filter((key) => key.toUpperCase().startsWith('SANITY_STUDIO_'))\n}\n\nfunction sortModulesBySize(chunks: ChunkStats[]): ChunkModule[] {\n  return chunks\n    .flatMap((chunk) => chunk.modules)\n    .sort((modA, modB) => modB.renderedLength - modA.renderedLength)\n}\n\nfunction formatModuleSizes(modules: ChunkModule[]): string {\n  const lines: string[] = []\n  for (const mod of modules) {\n    lines.push(` - ${formatModuleName(mod.name)} (${formatSize(mod.renderedLength)})`)\n  }\n\n  return lines.join('\\n')\n}\n\nfunction formatModuleName(modName: string): string {\n  const delimiter = '/node_modules/'\n  const nodeIndex = modName.lastIndexOf(delimiter)\n  return nodeIndex === -1 ? modName : modName.slice(nodeIndex + delimiter.length)\n}\n\nfunction formatSize(bytes: number): string {\n  return chalk.cyan(`${(bytes / 1024).toFixed()} kB`)\n}\n"],"names":["defineTrace","promisify","rimrafCallback","getTimer","telemetry","noopLogger","path","checkStudioDependencyVersions","checkRequiredDependencies","buildStaticFiles","chalk"],"mappings":"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"}