{"version":3,"file":"index.js","sources":["../../src/structure/panes/userComponent/UserComponentPaneContent.tsx","../../src/structure/panes/userComponent/UserComponentPaneHeader.tsx","../../src/structure/panes/userComponent/UserComponentPane.tsx"],"sourcesContent":["import {Box} from '@sanity/ui'\nimport {type ReactNode} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePane} from '../../components'\n\ninterface UserComponentPaneContentProps {\n  children: ReactNode\n}\n\nconst Root = styled(Box)`\n  position: relative;\n`\n\nexport function UserComponentPaneContent(props: UserComponentPaneContentProps) {\n  const {children} = props\n  const {collapsed} = usePane()\n\n  return (\n    <Root hidden={collapsed} height=\"fill\" overflow=\"auto\">\n      {children}\n    </Root>\n  )\n}\n","import {ArrowLeftIcon} from '@sanity/icons'\n\nimport {Button} from '../../../ui-components'\nimport {BackLink, PaneHeader, PaneHeaderActions} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface UserComponentPaneHeaderProps {\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n  index: number\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  title: string\n}\n\nexport function UserComponentPaneHeader(props: UserComponentPaneHeaderProps) {\n  const {actionHandlers, index, menuItems, menuItemGroups, title} = props\n  const {features} = useStructureTool()\n\n  if (!menuItems?.length && !title) {\n    return null\n  }\n\n  return (\n    <PaneHeader\n      actions={\n        <PaneHeaderActions\n          menuItems={menuItems}\n          menuItemGroups={menuItemGroups}\n          actionHandlers={actionHandlers}\n        />\n      }\n      backButton={\n        features.backButton &&\n        index > 0 && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: 'Back'}}\n          />\n        )\n      }\n      title={title}\n    />\n  )\n}\n","import {createElement, isValidElement, useState} from 'react'\nimport {isValidElementType} from 'react-is'\nimport {useI18nText} from 'sanity'\n\nimport {Pane} from '../../components'\nimport {type StructureToolPaneActionHandler} from '../../types'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {UserComponentPaneContent} from './UserComponentPaneContent'\nimport {UserComponentPaneHeader} from './UserComponentPaneHeader'\n\ntype UserComponentPaneProps = BaseStructureToolPaneProps<'component'>\n\n/**\n * @internal\n */\nexport function UserComponentPane(props: UserComponentPaneProps) {\n  const {index, pane, paneKey, ...restProps} = props\n  const {\n    child,\n    component,\n    menuItems,\n    menuItemGroups,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    type: _unused,\n    ...restPane\n  } = pane\n  const [ref, setRef] = useState<{\n    actionHandlers?: Record<string, StructureToolPaneActionHandler>\n  } | null>(null)\n  const {title = ''} = useI18nText(pane)\n\n  return (\n    <Pane id={paneKey} minWidth={320} selected={restProps.isSelected}>\n      <UserComponentPaneHeader\n        actionHandlers={ref?.actionHandlers}\n        index={index}\n        menuItems={menuItems}\n        menuItemGroups={menuItemGroups}\n        title={title}\n      />\n\n      <UserComponentPaneContent>\n        {isValidElementType(component) &&\n          createElement(component, {\n            ...restProps,\n            ...restPane,\n            // NOTE: here we're utilizing the function form of refs so setting\n            // the ref causes a re-render for `UserComponentPaneHeader`\n            ...({ref: setRef} as any),\n            child: child as any, // @todo: Fix typings\n            paneKey,\n          })}\n\n        {isValidElement(component) && component}\n      </UserComponentPaneContent>\n    </Pane>\n  )\n}\n"],"names":["styled","Box","usePane","jsx","useStructureTool","PaneHeader","PaneHeaderActions","Button","BackLink","ArrowLeftIcon","useState","useI18nText","jsxs","Pane","isValidElementType","createElement","isValidElement"],"mappings":";;AAUA,MAAM,OAAOA,iBAAAA,OAAOC,GAAAA,GAAG;AAAA;AAAA;AAIhB,SAAS,yBAAyB,OAAsC;AAC7E,QAAM,EAAC,SAAQ,IAAI,OACb,EAAC,UAAA,IAAaC,UAAAA;AAGlB,SAAAC,+BAAC,QAAK,QAAQ,WAAW,QAAO,QAAO,UAAS,QAC7C,SACH,CAAA;AAEJ;ACJO,SAAS,wBAAwB,OAAqC;AACrE,QAAA,EAAC,gBAAgB,OAAO,WAAW,gBAAgB,MAAK,IAAI,OAC5D,EAAC,SAAQ,IAAIC,UAAiB,iBAAA;AAEpC,SAAI,EAAC,aAAA,QAAA,UAAW,WAAU,CAAC,QAClB,OAIPD,2BAAA;AAAA,IAACE,UAAA;AAAA,IAAA;AAAA,MACC,SACEF,2BAAA;AAAA,QAACG,UAAA;AAAA,QAAA;AAAA,UACC;AAAA,UACA;AAAA,UACA;AAAA,QAAA;AAAA,MACF;AAAA,MAEF,YACE,SAAS,cACT,QAAQ,KACNH,2BAAA;AAAA,QAACI,0BAAA;AAAA,QAAA;AAAA,UACC,IAAIC,UAAA;AAAA,UACJ,WAAQ;AAAA,UACR,MAAMC,MAAA;AAAA,UACN,MAAK;AAAA,UACL,cAAc,EAAC,SAAS,OAAM;AAAA,QAAA;AAAA,MAChC;AAAA,MAGJ;AAAA,IAAA;AAAA,EAAA;AAGN;ACpCO,SAAS,kBAAkB,OAA+B;AAC/D,QAAM,EAAC,OAAO,MAAM,SAAS,GAAG,cAAa,OACvC;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAEA,MAAM;AAAA,IACN,GAAG;AAAA,EACD,IAAA,MACE,CAAC,KAAK,MAAM,IAAIC,MAAAA,SAEZ,IAAI,GACR,EAAC,QAAQ,GAAE,IAAIC,mBAAY,IAAI;AAGnC,SAAAC,gCAACC,UAAAA,QAAK,IAAI,SAAS,UAAU,KAAK,UAAU,UAAU,YACpD,UAAA;AAAA,IAAAV,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,gBAAgB,OAAK,OAAA,SAAA,IAAA;AAAA,QACrB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAAA,IACF;AAAA,oCAEC,0BACE,EAAA,UAAA;AAAA,MAAmBW,QAAAA,mBAAA,SAAS,KAC3BC,MAAA,cAAc,WAAW;AAAA,QACvB,GAAG;AAAA,QACH,GAAG;AAAA,QAGE,KAAK;AAAA,QACV;AAAA;AAAA,QACA;AAAA,MAAA,CACD;AAAA,MAEFC,MAAA,eAAe,SAAS,KAAK;AAAA,IAAA,GAChC;AAAA,EACF,EAAA,CAAA;AAEJ;;"}