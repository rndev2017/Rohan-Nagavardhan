{"version":3,"file":"getGraphQLAPIs.js","sources":["../../src/_internal/cli/actions/graphql/getGraphQLAPIs.ts"],"sourcesContent":["import path from 'node:path'\nimport {isMainThread, Worker} from 'node:worker_threads'\n\nimport {type CliCommandContext, type CliV3CommandContext} from '@sanity/cli'\nimport readPkgUp from 'read-pkg-up'\nimport {createSchema} from 'sanity'\n\nimport {\n  type ResolvedGraphQLAPI,\n  type ResolvedSourceProperties,\n  type SchemaDefinitionish,\n  type TypeResolvedGraphQLAPI,\n} from './types'\n\nexport async function getGraphQLAPIs(cliContext: CliCommandContext): Promise<ResolvedGraphQLAPI[]> {\n  if (!isModernCliConfig(cliContext)) {\n    throw new Error('Expected Sanity studio of version 3 or above')\n  }\n\n  if (!isMainThread) {\n    throw new Error('getGraphQLAPIs() must be called from the main thread')\n  }\n\n  const defaultSchema = createSchema({name: 'default', types: []})\n  const defaultTypes = defaultSchema.getTypeNames()\n  const isCustomType = (type: SchemaDefinitionish) => !defaultTypes.includes(type.name)\n\n  const apis = await getApisWithSchemaTypes(cliContext)\n  const resolved = apis.map(\n    ({schemaTypes, ...api}): ResolvedSourceProperties => ({\n      schema: createSchema({name: 'default', types: schemaTypes.filter(isCustomType)}),\n      ...api,\n    }),\n  )\n\n  return resolved\n}\n\nfunction getApisWithSchemaTypes(cliContext: CliCommandContext): Promise<TypeResolvedGraphQLAPI[]> {\n  return new Promise<TypeResolvedGraphQLAPI[]>((resolve, reject) => {\n    const {cliConfig, cliConfigPath, workDir} = cliContext\n    const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n    if (!rootPkgPath) {\n      throw new Error('Could not find root directory for `sanity` package')\n    }\n\n    const rootDir = path.dirname(rootPkgPath)\n    const workerPath = path.join(rootDir, 'lib', '_internal', 'cli', 'threads', 'getGraphQLAPIs.js')\n    const worker = new Worker(workerPath, {\n      workerData: {cliConfig: serialize(cliConfig || {}), cliConfigPath, workDir},\n      // eslint-disable-next-line no-process-env\n      env: process.env,\n    })\n    worker.on('message', resolve)\n    worker.on('error', reject)\n    worker.on('exit', (code) => {\n      if (code !== 0) reject(new Error(`Worker stopped with exit code ${code}`))\n    })\n  })\n}\n\nfunction isModernCliConfig(config: CliCommandContext): config is CliV3CommandContext {\n  return config.sanityMajorVersion >= 3\n}\n\nfunction serialize<T>(obj: T): T {\n  try {\n    return JSON.parse(JSON.stringify(obj))\n  } catch (cause) {\n    throw new Error(`Failed to serialize CLI configuration`, {cause})\n  }\n}\n"],"names":["isMainThread","createSchema","readPkgUp","path","Worker"],"mappings":";;;;;;AAcA,eAAsB,eAAe,YAA8D;AAC7F,MAAA,CAAC,kBAAkB,UAAU;AACzB,UAAA,IAAI,MAAM,8CAA8C;AAGhE,MAAI,CAACA,oBAAA;AACG,UAAA,IAAI,MAAM,sDAAsD;AAIxE,QAAM,eADgBC,OAAAA,aAAa,EAAC,MAAM,WAAW,OAAO,CAAA,GAAG,EAC5B,aAAa,GAC1C,eAAe,CAAC,SAA8B,CAAC,aAAa,SAAS,KAAK,IAAI;AAEvE,UAAA,MAAM,uBAAuB,UAAU,GAC9B;AAAA,IACpB,CAAC,EAAC,aAAa,GAAG,WAAoC;AAAA,MACpD,QAAQA,OAAAA,aAAa,EAAC,MAAM,WAAW,OAAO,YAAY,OAAO,YAAY,GAAE;AAAA,MAC/E,GAAG;AAAA,IAAA;AAAA,EACL;AAIJ;AAEA,SAAS,uBAAuB,YAAkE;AAChG,SAAO,IAAI,QAAkC,CAAC,SAAS,WAAW;AAvCpE,QAAA;AAwCI,UAAM,EAAC,WAAW,eAAe,YAAW,YACtC,eAAc,KAAUC,mBAAAA,QAAA,KAAK,EAAC,KAAK,WAAU,MAA/B,OAAkC,SAAA,GAAA;AACtD,QAAI,CAAC;AACG,YAAA,IAAI,MAAM,oDAAoD;AAGtE,UAAM,UAAUC,cAAAA,QAAK,QAAQ,WAAW,GAClC,aAAaA,sBAAK,KAAK,SAAS,OAAO,aAAa,OAAO,WAAW,mBAAmB,GACzF,SAAS,IAAIC,2BAAO,YAAY;AAAA,MACpC,YAAY,EAAC,WAAW,UAAU,aAAa,EAAE,GAAG,eAAe,QAAO;AAAA;AAAA,MAE1E,KAAK,QAAQ;AAAA,IAAA,CACd;AACD,WAAO,GAAG,WAAW,OAAO,GAC5B,OAAO,GAAG,SAAS,MAAM,GACzB,OAAO,GAAG,QAAQ,CAAC,SAAS;AACtB,eAAS,KAAG,OAAO,IAAI,MAAM,iCAAiC,IAAI,EAAE,CAAC;AAAA,IAAA,CAC1E;AAAA,EAAA,CACF;AACH;AAEA,SAAS,kBAAkB,QAA0D;AACnF,SAAO,OAAO,sBAAsB;AACtC;AAEA,SAAS,UAAa,KAAW;AAC3B,MAAA;AACF,WAAO,KAAK,MAAM,KAAK,UAAU,GAAG,CAAC;AAAA,WAC9B,OAAO;AACd,UAAM,IAAI,MAAM,yCAAyC,EAAC,MAAM,CAAA;AAAA,EAClE;AACF;;"}