{"version":3,"file":"devAction.js","sources":["../../src/_internal/cli/server/devServer.ts","../../src/_internal/cli/actions/dev/devAction.ts"],"sourcesContent":["import {type UserViteConfig} from '@sanity/cli'\nimport chalk from 'chalk'\nimport {createServer} from 'vite'\n\nimport {debug} from './debug'\nimport {extendViteConfigWithUserConfig, getViteConfig} from './getViteConfig'\nimport {writeSanityRuntime} from './runtime'\n\nexport interface DevServerOptions {\n  cwd: string\n  basePath: string\n  staticPath: string\n\n  httpPort: number\n  httpHost?: string\n  projectName?: string\n\n  reactStrictMode: boolean\n  vite?: UserViteConfig\n}\n\nexport interface DevServer {\n  close(): Promise<void>\n}\n\nexport async function startDevServer(options: DevServerOptions): Promise<DevServer> {\n  const {cwd, httpPort, httpHost, basePath, reactStrictMode, vite: extendViteConfig} = options\n\n  const startTime = Date.now()\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode, watch: true, basePath})\n\n  debug('Resolving vite config')\n  const mode = 'development'\n  let viteConfig = await getViteConfig({\n    basePath,\n    mode: 'development',\n    server: {port: httpPort, host: httpHost},\n    cwd,\n  })\n\n  // Extend Vite configuration with user-provided config\n  if (extendViteConfig) {\n    viteConfig = await extendViteConfigWithUserConfig(\n      {command: 'serve', mode},\n      viteConfig,\n      extendViteConfig,\n    )\n  }\n\n  debug('Creating vite server')\n  const server = await createServer(viteConfig)\n  const info = server.config.logger.info\n\n  debug('Listening on specified port')\n  await server.listen()\n\n  const startupDuration = Date.now() - startTime\n  const url = `http://${httpHost || 'localhost'}:${httpPort || '3333'}${basePath}`\n  info(\n    `Sanity Studio ` +\n      `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n      `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n      `and running at ${chalk.cyan(url)}`,\n  )\n\n  return {close: () => server.close()}\n}\n","import path from 'node:path'\n\nimport {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliConfig,\n  type CliOutputter,\n} from '@sanity/cli'\n\nimport {type DevServerOptions, startDevServer} from '../../server/devServer'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {getSharedServerConfig, gracefulServerDeath} from '../../util/servers'\nimport {getTimer} from '../../util/timing'\n\nexport interface StartDevServerCommandFlags {\n  host?: string\n  port?: string\n}\n\nexport default async function startSanityDevServer(\n  args: CliCommandArguments<StartDevServerCommandFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const timers = getTimer()\n  const flags = args.extOptions\n  const {output, workDir, cliConfig} = context\n\n  timers.start('checkStudioDependencyVersions')\n  checkStudioDependencyVersions(workDir)\n  timers.end('checkStudioDependencyVersions')\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  if ((await checkRequiredDependencies(context)).didInstall) {\n    return\n  }\n\n  // Try to load CLI configuration from sanity.cli.(js|ts)\n  const config = getDevServerConfig({flags, workDir, cliConfig, output})\n\n  try {\n    await startDevServer(config)\n  } catch (err) {\n    gracefulServerDeath('dev', config.httpHost, config.httpPort, err)\n  }\n}\n\nfunction getDevServerConfig({\n  flags,\n  workDir,\n  cliConfig,\n  output,\n}: {\n  flags: StartDevServerCommandFlags\n  workDir: string\n  cliConfig?: CliConfig\n  output: CliOutputter\n}): DevServerOptions {\n  const configSpinner = output.spinner('Checking configuration files...')\n  const baseConfig = getSharedServerConfig({flags, workDir, cliConfig})\n  configSpinner.succeed()\n\n  const env = process.env // eslint-disable-line no-process-env\n  const reactStrictMode = env.SANITY_STUDIO_REACT_STRICT_MODE\n    ? env.SANITY_STUDIO_REACT_STRICT_MODE === 'true'\n    : Boolean(cliConfig?.reactStrictMode)\n\n  if (env.SANITY_STUDIO_BASEPATH && cliConfig?.project?.basePath) {\n    output.warn(\n      `Overriding configured base path (${cliConfig.project.basePath}) with value from environment variable (${env.SANITY_STUDIO_BASEPATH})`,\n    )\n  }\n\n  return {\n    ...baseConfig,\n    staticPath: path.join(workDir, 'static'),\n    reactStrictMode,\n  }\n}\n"],"names":["debug","writeSanityRuntime","getViteConfig","extendViteConfigWithUserConfig","createServer","chalk","getTimer","checkStudioDependencyVersions","checkRequiredDependencies","gracefulServerDeath","getSharedServerConfig","path"],"mappings":";;;;;;AAyBA,eAAsB,eAAe,SAA+C;AAClF,QAAM,EAAC,KAAK,UAAU,UAAU,UAAU,iBAAiB,MAAM,iBAAoB,IAAA,SAE/E,YAAY,KAAK,IAAI;AAC3BA,UAAAA,MAAM,8BAA8B,GACpC,MAAMC,QAAAA,mBAAmB,EAAC,KAAK,iBAAiB,OAAO,IAAM,SAAA,CAAS,GAEtED,cAAM,uBAAuB;AAC7B,QAAM,OAAO;AACT,MAAA,aAAa,MAAME,sBAAc;AAAA,IACnC;AAAA,IACA,MAAM;AAAA,IACN,QAAQ,EAAC,MAAM,UAAU,MAAM,SAAQ;AAAA,IACvC;AAAA,EAAA,CACD;AAGG,uBACF,aAAa,MAAMC,QAAA;AAAA,IACjB,EAAC,SAAS,SAAS,KAAI;AAAA,IACvB;AAAA,IACA;AAAA,EAAA,IAIJH,QAAAA,MAAM,sBAAsB;AACtB,QAAA,SAAS,MAAMI,KAAa,aAAA,UAAU,GACtC,OAAO,OAAO,OAAO,OAAO;AAElCJ,UAAAA,MAAM,6BAA6B,GACnC,MAAM,OAAO,OAAO;AAEpB,QAAM,kBAAkB,KAAK,IAAI,IAAI,WAC/B,MAAM,UAAU,YAAY,WAAW,IAAI,YAAY,MAAM,GAAG,QAAQ;AAC9E,SAAA;AAAA,IACE,uBACWK,eAAAA,QAAM,KAAK,QAAQ,QAAQ,mBAAmB,EAAE,OAAO,EAAE,CAAC,aACvDA,eAAA,QAAM,KAAK,GAAG,KAAK,KAAK,eAAe,CAAC,IAAI,CAAC,mBACvCA,eAAA,QAAM,KAAK,GAAG,CAAC;AAAA,KAG9B,EAAC,OAAO,MAAM,OAAO,MAAO,EAAA;AACrC;AC/C8B,eAAA,qBAC5B,MACA,SACe;AACT,QAAA,SAASC,OAAAA,YACT,QAAQ,KAAK,YACb,EAAC,QAAQ,SAAS,UAAA,IAAa;AAQrC,MANA,OAAO,MAAM,+BAA+B,GAC5CC,OAAAA,8BAA8B,OAAO,GACrC,OAAO,IAAI,+BAA+B,IAIrC,MAAMC,OAAAA,0BAA0B,OAAO,GAAG;AAC7C;AAIF,QAAM,SAAS,mBAAmB,EAAC,OAAO,SAAS,WAAW,QAAO;AAEjE,MAAA;AACF,UAAM,eAAe,MAAM;AAAA,WACpB,KAAK;AACZC,YAAA,oBAAoB,OAAO,OAAO,UAAU,OAAO,UAAU,GAAG;AAAA,EAClE;AACF;AAEA,SAAS,mBAAmB;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAKqB;AA1DrB,MAAA;AA2DQ,QAAA,gBAAgB,OAAO,QAAQ,iCAAiC,GAChE,aAAaC,QAAA,sBAAsB,EAAC,OAAO,SAAS,UAAU,CAAA;AACpE,gBAAc,QAAQ;AAEhB,QAAA,MAAM,QAAQ,KACd,kBAAkB,IAAI,kCACxB,IAAI,oCAAoC,SACxC,CAAA,EAAQ,aAAW,QAAA,UAAA;AAEvB,SAAI,IAAI,2BAA0B,KAAA,aAAA,OAAA,SAAA,UAAW,YAAX,QAAA,GAAoB,YACpD,OAAO;AAAA,IACL,oCAAoC,UAAU,QAAQ,QAAQ,2CAA2C,IAAI,sBAAsB;AAAA,EAAA,GAIhI;AAAA,IACL,GAAG;AAAA,IACH,YAAYC,cAAA,QAAK,KAAK,SAAS,QAAQ;AAAA,IACvC;AAAA,EAAA;AAEJ;;"}