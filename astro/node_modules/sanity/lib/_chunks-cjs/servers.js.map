{"version":3,"file":"servers.js","sources":["../../src/_internal/cli/util/ensureTrailingSlash.ts","../../src/_internal/cli/util/servers.ts"],"sourcesContent":["/**\n * Ensures that the given path ends with a `/`, and does not add an\n * additional one if it already does\n *\n * @param path - The path to ensure has a trailing slash\n * @returns A path with a trailing slash\n * @internal\n */\nexport function ensureTrailingSlash(path: string): string {\n  return path.endsWith('/') ? path : `${path}/`\n}\n","import {type CliConfig} from '@sanity/cli'\n\nimport {ensureTrailingSlash} from './ensureTrailingSlash'\n\nexport function gracefulServerDeath(\n  command: 'start' | 'dev' | 'preview',\n  httpHost: string | undefined,\n  httpPort: number,\n  err: Error & {code?: string},\n): void {\n  if (err.code === 'EADDRINUSE') {\n    throw new Error(\n      `Port number is already in use, configure \\`server.port\\` in \\`sanity.cli.js\\` or pass \\`--port <somePort>\\` to \\`sanity ${command}\\``,\n    )\n  }\n\n  if (err.code === 'EACCES') {\n    const help =\n      httpPort < 1024\n        ? 'port numbers below 1024 requires root privileges'\n        : `do you have access to listen to the given host (${httpHost || '127.0.0.1'})?`\n\n    throw new Error(`The studio server does not have access to listen to given port - ${help}`)\n  }\n\n  throw err\n}\n\n/**\n * Resolves the shared configuration for the dev/preview server using:\n *\n * - CLI flags\n * - Environment variables\n * - User build config\n * - Default configuration\n */\nexport function getSharedServerConfig({\n  flags,\n  workDir,\n  cliConfig,\n}: {\n  flags: {host?: string; port?: string}\n  workDir: string\n  cliConfig?: CliConfig\n}): {\n  cwd: string\n  httpPort: number\n  httpHost: string\n  basePath: string\n  vite: CliConfig['vite']\n} {\n  // Order of preference: CLI flags, environment variables, user build config, default config\n  const env = process.env // eslint-disable-line no-process-env\n\n  const httpHost =\n    flags.host || env.SANITY_STUDIO_SERVER_HOSTNAME || cliConfig?.server?.hostname || 'localhost'\n\n  const httpPort = toInt(\n    flags.port || env.SANITY_STUDIO_SERVER_PORT || cliConfig?.server?.port,\n    3333,\n  )\n\n  const basePath = ensureTrailingSlash(\n    env.SANITY_STUDIO_BASEPATH ?? (cliConfig?.project?.basePath || '/'),\n  )\n\n  return {\n    cwd: workDir,\n    httpPort,\n    httpHost,\n    basePath,\n    vite: cliConfig?.vite,\n  }\n}\n\nfunction toInt(value: string | number | undefined, defaultValue: number): number {\n  if (typeof value === 'undefined') {\n    return defaultValue\n  }\n\n  const intVal = parseInt(`${value}`, 10)\n  return Number.isFinite(intVal) ? intVal : defaultValue\n}\n"],"names":[],"mappings":";AAQO,SAAS,oBAAoB,MAAsB;AACxD,SAAO,KAAK,SAAS,GAAG,IAAI,OAAO,GAAG,IAAI;AAC5C;ACNO,SAAS,oBACd,SACA,UACA,UACA,KACM;AACN,MAAI,IAAI,SAAS;AACf,UAAM,IAAI;AAAA,MACR,2HAA2H,OAAO;AAAA,IAAA;AAIlI,MAAA,IAAI,SAAS,UAAU;AACzB,UAAM,OACJ,WAAW,OACP,qDACA,mDAAmD,YAAY,WAAW;AAEhF,UAAM,IAAI,MAAM,oEAAoE,IAAI,EAAE;AAAA,EAC5F;AAEM,QAAA;AACR;AAUO,SAAS,sBAAsB;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AACF,GAUE;AAlDF,MAAA,IAAA,IAAA,IAAA;AAoDE,QAAM,MAAM,QAAQ,KAEd,WACJ,MAAM,QAAQ,IAAI,mCAAiC,KAAW,aAAA,OAAA,SAAA,UAAA,WAAX,OAAmB,SAAA,GAAA,aAAY,aAE9E,WAAW;AAAA,IACf,MAAM,QAAQ,IAAI,+BAA6B,KAAA,aAAA,OAAA,SAAA,UAAW,WAAX,OAAmB,SAAA,GAAA;AAAA,IAClE;AAAA,KAGI,WAAW;AAAA,KACf,SAAI,2BAAJ,OAAA,OAA+B,KAAW,aAAA,OAAA,SAAA,UAAA,YAAX,mBAAoB,aAAY;AAAA,EAAA;AAG1D,SAAA;AAAA,IACL,KAAK;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM,aAAW,OAAA,SAAA,UAAA;AAAA,EAAA;AAErB;AAEA,SAAS,MAAM,OAAoC,cAA8B;AAC/E,MAAI,OAAO,QAAU;AACZ,WAAA;AAGT,QAAM,SAAS,SAAS,GAAG,KAAK,IAAI,EAAE;AACtC,SAAO,OAAO,SAAS,MAAM,IAAI,SAAS;AAC5C;;;"}