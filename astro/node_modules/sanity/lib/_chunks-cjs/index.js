"use strict";
var jsxRuntime = require("react/jsx-runtime"), React = require("react"), reactIs = require("react-is"), sanity = require("sanity"), TooltipDelayGroupProvider = require("./TooltipDelayGroupProvider.js"), structure = require("./pane.js"), ui = require("@sanity/ui"), styledComponents = require("styled-components"), icons = require("@sanity/icons");
const Root = styledComponents.styled(ui.Box)`
  position: relative;
`;
function UserComponentPaneContent(props) {
  const { children } = props, { collapsed } = structure.usePane();
  return /* @__PURE__ */ jsxRuntime.jsx(Root, { hidden: collapsed, height: "fill", overflow: "auto", children });
}
function UserComponentPaneHeader(props) {
  const { actionHandlers, index, menuItems, menuItemGroups, title } = props, { features } = structure.useStructureTool();
  return !(menuItems != null && menuItems.length) && !title ? null : /* @__PURE__ */ jsxRuntime.jsx(
    structure.PaneHeader,
    {
      actions: /* @__PURE__ */ jsxRuntime.jsx(
        structure.PaneHeaderActions,
        {
          menuItems,
          menuItemGroups,
          actionHandlers
        }
      ),
      backButton: features.backButton && index > 0 && /* @__PURE__ */ jsxRuntime.jsx(
        TooltipDelayGroupProvider.Button,
        {
          as: structure.BackLink,
          "data-as": "a",
          icon: icons.ArrowLeftIcon,
          mode: "bleed",
          tooltipProps: { content: "Back" }
        }
      ),
      title
    }
  );
}
function UserComponentPane(props) {
  const { index, pane, paneKey, ...restProps } = props, {
    child,
    component,
    menuItems,
    menuItemGroups,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    type: _unused,
    ...restPane
  } = pane, [ref, setRef] = React.useState(null), { title = "" } = sanity.useI18nText(pane);
  return /* @__PURE__ */ jsxRuntime.jsxs(structure.Pane, { id: paneKey, minWidth: 320, selected: restProps.isSelected, children: [
    /* @__PURE__ */ jsxRuntime.jsx(
      UserComponentPaneHeader,
      {
        actionHandlers: ref == null ? void 0 : ref.actionHandlers,
        index,
        menuItems,
        menuItemGroups,
        title
      }
    ),
    /* @__PURE__ */ jsxRuntime.jsxs(UserComponentPaneContent, { children: [
      reactIs.isValidElementType(component) && React.createElement(component, {
        ...restProps,
        ...restPane,
        ref: setRef,
        child,
        // @todo: Fix typings
        paneKey
      }),
      React.isValidElement(component) && component
    ] })
  ] });
}
exports.default = UserComponentPane;
//# sourceMappingURL=index.js.map
