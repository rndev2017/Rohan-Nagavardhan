{"version":3,"file":"extractAction.js","sources":["../../src/_internal/cli/actions/schema/extractSchema.telemetry.ts","../../src/_internal/cli/actions/schema/extractAction.ts"],"sourcesContent":["import {defineTrace} from '@sanity/telemetry'\n\ninterface SchemaExtractedTraceAttrubutes {\n  schemaAllTypesCount: number\n  schemaDocumentTypesCount: number\n  schemaTypesCount: number\n\n  enforceRequiredFields: boolean\n  schemaFormat: string\n}\n\nexport const SchemaExtractedTrace = defineTrace<SchemaExtractedTraceAttrubutes>({\n  name: 'Schema Extracted',\n  version: 0,\n  description: 'Trace emitted when extracting schema',\n})\n","import {writeFile} from 'node:fs/promises'\nimport {dirname, join} from 'node:path'\nimport {Worker} from 'node:worker_threads'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport readPkgUp from 'read-pkg-up'\n\nimport {\n  type ExtractSchemaWorkerData,\n  type ExtractSchemaWorkerResult,\n} from '../../threads/extractSchema'\nimport {SchemaExtractedTrace} from './extractSchema.telemetry'\n\ninterface ExtractFlags {\n  'workspace'?: string\n  'path'?: string\n  'enforce-required-fields'?: boolean\n  'format'?: 'groq-type-nodes' | string\n}\n\nexport type SchemaValidationFormatter = (result: ExtractSchemaWorkerResult) => string\n\nexport default async function extractAction(\n  args: CliCommandArguments<ExtractFlags>,\n  {workDir, output, telemetry}: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n  const formatFlag = flags.format || 'groq-type-nodes'\n  const enforceRequiredFields = flags['enforce-required-fields'] || false\n\n  const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n  if (!rootPkgPath) {\n    throw new Error('Could not find root directory for `sanity` package')\n  }\n\n  const workerPath = join(\n    dirname(rootPkgPath),\n    'lib',\n    '_internal',\n    'cli',\n    'threads',\n    'extractSchema.js',\n  )\n\n  const spinner = output\n    .spinner({})\n    .start(\n      enforceRequiredFields\n        ? 'Extracting schema, with enforced required fields'\n        : 'Extracting schema',\n    )\n\n  const trace = telemetry.trace(SchemaExtractedTrace)\n  trace.start()\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      workspaceName: flags.workspace,\n      enforceRequiredFields,\n      format: formatFlag,\n    } satisfies ExtractSchemaWorkerData,\n    // eslint-disable-next-line no-process-env\n    env: process.env,\n  })\n\n  try {\n    const {schema} = await new Promise<ExtractSchemaWorkerResult>((resolve, reject) => {\n      worker.addListener('message', resolve)\n      worker.addListener('error', reject)\n    })\n\n    trace.log({\n      schemaAllTypesCount: schema.length,\n      schemaDocumentTypesCount: schema.filter((type) => type.type === 'document').length,\n      schemaTypesCount: schema.filter((type) => type.type === 'type').length,\n      enforceRequiredFields,\n      schemaFormat: formatFlag,\n    })\n\n    const path = flags.path || join(process.cwd(), 'schema.json')\n\n    spinner.text = `Writing schema to ${path}`\n\n    await writeFile(path, `${JSON.stringify(schema, null, 2)}\\n`)\n\n    trace.complete()\n\n    spinner.succeed(\n      enforceRequiredFields\n        ? 'Extracted schema, with enforced required fields'\n        : 'Extracted schema',\n    )\n  } catch (err) {\n    trace.error(err)\n    spinner.fail(\n      enforceRequiredFields\n        ? 'Failed to extract schema, with enforced required fields'\n        : 'Failed to extract schema',\n    )\n    throw err\n  }\n}\n"],"names":["defineTrace","telemetry","join","dirname","Worker","path","writeFile"],"mappings":";;;;;;AAWO,MAAM,uBAAuBA,UAAAA,YAA4C;AAAA,EAC9E,MAAM;AAAA,EACN,SAAS;AAAA,EACT,aAAa;AACf,CAAC;ACOD,eAA8B,cAC5B,MACA,EAAC,SAAS,QAAQ,WAAAC,cACH;AAzBjB,MAAA;AA0BQ,QAAA,QAAQ,KAAK,YACb,aAAa,MAAM,UAAU,mBAC7B,wBAAwB,MAAM,yBAAyB,KAAK,IAE5D,eAAc,gCAAU,KAAK,EAAC,KAAK,UAAU,CAAA,MAA/B,OAAkC,SAAA,GAAA;AACtD,MAAI,CAAC;AACG,UAAA,IAAI,MAAM,oDAAoD;AAGtE,QAAM,aAAaC,KAAA;AAAA,IACjBC,KAAAA,QAAQ,WAAW;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,KAGI,UAAU,OACb,QAAQ,CAAA,CAAE,EACV;AAAA,IACC,wBACI,qDACA;AAAA,EAGF,GAAA,QAAQF,WAAU,MAAM,oBAAoB;AAClD,QAAM,MAAM;AAEN,QAAA,SAAS,IAAIG,oBAAA,OAAO,YAAY;AAAA,IACpC,YAAY;AAAA,MACV;AAAA,MACA,eAAe,MAAM;AAAA,MACrB;AAAA,MACA,QAAQ;AAAA,IACV;AAAA;AAAA,IAEA,KAAK,QAAQ;AAAA,EAAA,CACd;AAEG,MAAA;AACI,UAAA,EAAC,WAAU,MAAM,IAAI,QAAmC,CAAC,SAAS,WAAW;AACjF,aAAO,YAAY,WAAW,OAAO,GACrC,OAAO,YAAY,SAAS,MAAM;AAAA,IAAA,CACnC;AAED,UAAM,IAAI;AAAA,MACR,qBAAqB,OAAO;AAAA,MAC5B,0BAA0B,OAAO,OAAO,CAAC,SAAS,KAAK,SAAS,UAAU,EAAE;AAAA,MAC5E,kBAAkB,OAAO,OAAO,CAAC,SAAS,KAAK,SAAS,MAAM,EAAE;AAAA,MAChE;AAAA,MACA,cAAc;AAAA,IAAA,CACf;AAED,UAAMC,SAAO,MAAM,QAAQH,KAAAA,KAAK,QAAQ,IAAA,GAAO,aAAa;AAE5D,YAAQ,OAAO,qBAAqBG,MAAI,IAExC,MAAMC,GAAA,UAAUD,QAAM,GAAG,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAAA,CAAI,GAE5D,MAAM,SAAS,GAEf,QAAQ;AAAA,MACN,wBACI,oDACA;AAAA,IAAA;AAAA,WAEC,KAAK;AACN,UAAA,MAAA,MAAM,GAAG,GACf,QAAQ;AAAA,MACN,wBACI,4DACA;AAAA,IAEA,GAAA;AAAA,EACR;AACF;;"}