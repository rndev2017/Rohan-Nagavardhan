{"version":3,"file":"execScript.js","sources":["../../src/_internal/cli/actions/exec/execScript.ts"],"sourcesContent":["import {spawn} from 'node:child_process'\nimport fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type CliCommandAction, type CliCommandArguments} from '@sanity/cli'\nimport readPkgUp from 'read-pkg-up'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\ninterface ExecFlags {\n  'with-user-token'?: boolean\n  'mock-browser-env'?: boolean\n}\n\nasync function parseCliFlags(args: CliCommandArguments<ExecFlags>) {\n  const flags = await yargs(hideBin(args.argv || process.argv).slice(2))\n    .option('with-user-token', {type: 'boolean', default: false})\n    .option('mock-browser-env', {type: 'boolean', default: false}).argv\n\n  return {\n    ...flags,\n    script: args.argsWithoutOptions[0],\n  }\n}\n\nconst execScript: CliCommandAction<ExecFlags> = async function execScript(args, context) {\n  // Reparsing CLI flags for better control of binary flags\n  const {withUserToken, mockBrowserEnv, script} = await parseCliFlags(args)\n  const {workDir} = context\n\n  const scriptPath = path.resolve(script || '')\n  if (!script) {\n    throw new Error('SCRIPT must be provided. `sanity exec <script>`')\n  }\n\n  if (!(await fs.stat(scriptPath).catch(() => false))) {\n    throw new Error(`${scriptPath} does not exist`)\n  }\n\n  const sanityPkgPath = (await readPkgUp({cwd: __dirname}))?.path\n  if (!sanityPkgPath) {\n    throw new Error('Unable to resolve `sanity` module root')\n  }\n\n  const sanityDir = path.dirname(sanityPkgPath)\n  const threadsDir = path.join(sanityDir, 'lib', '_internal', 'cli', 'threads')\n  const esbuildPath = path.join(threadsDir, 'esbuild.js')\n  const browserEnvPath = path.join(threadsDir, 'registerBrowserEnv.js')\n  const configClientPath = path.join(threadsDir, 'configClient.js')\n\n  if (!(await fs.stat(esbuildPath).catch(() => false))) {\n    throw new Error('`sanity` module build error: missing threads')\n  }\n\n  const baseArgs = mockBrowserEnv ? ['-r', browserEnvPath] : ['-r', esbuildPath]\n  const tokenArgs = withUserToken ? ['-r', configClientPath] : []\n\n  const nodeArgs = [...baseArgs, ...tokenArgs, scriptPath, ...args.extraArguments]\n\n  const proc = spawn(process.argv[0], nodeArgs, {\n    stdio: 'inherit',\n    env: {\n      // eslint-disable-next-line no-process-env\n      ...process.env,\n      SANITY_BASE_PATH: workDir,\n    },\n  })\n  proc.on('close', process.exit)\n}\n\nexport default execScript\n"],"names":["yargs","hideBin","path","fs","readPkgUp","spawn"],"mappings":";;;;;;AAcA,eAAe,cAAc,MAAsC;AAK1D,SAAA;AAAA,IACL,GALY,MAAMA,eAAAA,QAAMC,QAAAA,QAAQ,KAAK,QAAQ,QAAQ,IAAI,EAAE,MAAM,CAAC,CAAC,EAClE,OAAO,mBAAmB,EAAC,MAAM,WAAW,SAAS,GAAM,CAAA,EAC3D,OAAO,oBAAoB,EAAC,MAAM,WAAW,SAAS,GAAA,CAAM,EAAE;AAAA,IAI/D,QAAQ,KAAK,mBAAmB,CAAC;AAAA,EAAA;AAErC;AAEM,MAAA,aAA0C,eAA0B,MAAM,SAAS;AAzBzF,MAAA;AA2BE,QAAM,EAAC,eAAe,gBAAgB,OAAM,IAAI,MAAM,cAAc,IAAI,GAClE,EAAC,QAAW,IAAA,SAEZ,aAAaC,cAAAA,QAAK,QAAQ,UAAU,EAAE;AAC5C,MAAI,CAAC;AACG,UAAA,IAAI,MAAM,iDAAiD;AAG/D,MAAA,CAAE,MAAMC,YAAAA,QAAG,KAAK,UAAU,EAAE,MAAM,MAAM,EAAK;AAC/C,UAAM,IAAI,MAAM,GAAG,UAAU,iBAAiB;AAG1C,QAAA,iBAAiB,WAAMC,mBAAAA,QAAU,EAAC,KAAK,UAAU,CAAA,MAAhC,OAAoC,SAAA,GAAA;AAC3D,MAAI,CAAC;AACG,UAAA,IAAI,MAAM,wCAAwC;AAG1D,QAAM,YAAYF,cAAA,QAAK,QAAQ,aAAa,GACtC,aAAaA,cAAAA,QAAK,KAAK,WAAW,OAAO,aAAa,OAAO,SAAS,GACtE,cAAcA,cAAK,QAAA,KAAK,YAAY,YAAY,GAChD,iBAAiBA,cAAAA,QAAK,KAAK,YAAY,uBAAuB,GAC9D,mBAAmBA,cAAK,QAAA,KAAK,YAAY,iBAAiB;AAE5D,MAAA,CAAE,MAAMC,YAAAA,QAAG,KAAK,WAAW,EAAE,MAAM,MAAM,EAAK;AAC1C,UAAA,IAAI,MAAM,8CAA8C;AAG1D,QAAA,WAAW,iBAAiB,CAAC,MAAM,cAAc,IAAI,CAAC,MAAM,WAAW,GACvE,YAAY,gBAAgB,CAAC,MAAM,gBAAgB,IAAI,CAAA,GAEvD,WAAW,CAAC,GAAG,UAAU,GAAG,WAAW,YAAY,GAAG,KAAK,cAAc;AAElEE,qBAAAA,MAAM,QAAQ,KAAK,CAAC,GAAG,UAAU;AAAA,IAC5C,OAAO;AAAA,IACP,KAAK;AAAA;AAAA,MAEH,GAAG,QAAQ;AAAA,MACX,kBAAkB;AAAA,IACpB;AAAA,EACD,CAAA,EACI,GAAG,SAAS,QAAQ,IAAI;AAC/B;;"}