{"version":3,"file":"timing.js","sources":["../../src/_internal/cli/util/checkStudioDependencyVersions.ts","../../src/_internal/cli/util/checkRequiredDependencies.ts","../../src/_internal/cli/util/timing.ts"],"sourcesContent":["import fs from 'node:fs'\nimport path from 'node:path'\n\nimport {type PackageJson} from '@sanity/cli'\nimport {generateHelpUrl} from '@sanity/generate-help-url'\nimport resolveFrom from 'resolve-from'\nimport semver, {type SemVer} from 'semver'\n\ninterface PackageInfo {\n  name: string\n  supported: string[]\n  deprecatedBelow: null | string\n  installed: SemVer\n  isUnsupported: boolean\n  isDeprecated: boolean\n  isUntested: boolean\n}\n\n// NOTE: when doing changes here, also remember to update versions in help docs at\n// https://sanity.io/admin/structure/docs;helpArticle;upgrade-packages\nconst PACKAGES = [\n  {name: 'react', supported: ['^18'], deprecatedBelow: null},\n  {name: 'react-dom', supported: ['^18'], deprecatedBelow: null},\n  {name: 'styled-components', supported: ['^6'], deprecatedBelow: null},\n  {name: '@sanity/ui', supported: ['^2'], deprecatedBelow: null},\n]\n\nexport function checkStudioDependencyVersions(workDir: string): void {\n  const manifest = readPackageJson(path.join(workDir, 'package.json'))\n  const dependencies = {...manifest.dependencies, ...manifest.devDependencies}\n\n  const packageInfo = PACKAGES.map((pkg): PackageInfo | false => {\n    const dependency = dependencies[pkg.name]\n    if (!dependency) {\n      return false\n    }\n\n    const manifestPath = resolveFrom.silent(workDir, path.join(pkg.name, 'package.json'))\n    const installed = semver.coerce(\n      manifestPath ? readPackageJson(manifestPath).version : dependency.replace(/[\\D.]/g, ''),\n    )\n\n    if (!installed) {\n      return false\n    }\n\n    const supported = pkg.supported.join(' || ')\n\n    // \"Untested\" is usually the case where we have not upgraded the React version requirements\n    // before a release, but given that is usually works in a backwards-compatible way, we want\n    // to indicate that it's _untested_, not necessarily _unsupported_\n    // Ex: Installed is react@19.0.0, but we've only _tested_ with react@^18\n    const isUntested = !semver.satisfies(installed, supported) && semver.gtr(installed, supported)\n\n    // \"Unsupported\" in that the installed version is _lower than_ the minimum version\n    // Ex: Installed is react@15.0.0, but we require react@^16\n    const isUnsupported = !semver.satisfies(installed, supported) && !isUntested\n\n    // \"Deprecated\" in that we will stop supporting it at some point in the near future,\n    // so users should be prompted to upgrade\n    const isDeprecated = pkg.deprecatedBelow ? semver.ltr(installed, pkg.deprecatedBelow) : false\n\n    return {\n      ...pkg,\n      installed,\n      isUnsupported,\n      isDeprecated,\n      isUntested,\n    }\n  })\n\n  const installedPackages = packageInfo.filter((inp): inp is PackageInfo => inp !== false)\n  const unsupported = installedPackages.filter((pkg) => pkg.isUnsupported)\n  const deprecated = installedPackages.filter((pkg) => !pkg.isUnsupported && pkg.isDeprecated)\n  const untested = installedPackages.filter((pkg) => pkg.isUntested)\n\n  if (deprecated.length > 0) {\n    // eslint-disable-next-line no-console\n    console.warn(`\n[WARN] The following package versions have been deprecated and should be upgraded:\n\n  ${listPackages(deprecated)}\n\nSupport for these will be removed in a future release!\n\n  ${getUpgradeInstructions(deprecated)}\n`)\n  }\n\n  if (untested.length > 0) {\n    // eslint-disable-next-line no-console\n    console.warn(`\n[WARN] The following package versions have not yet been marked as supported:\n\n  ${listPackages(untested)}\n\nYou _may_ encounter bugs while using these versions.\n\n  ${getDowngradeInstructions(untested)}\n`)\n  }\n\n  if (unsupported.length > 0) {\n    // eslint-disable-next-line no-console\n    console.error(`\n[ERROR] The following package versions are no longer supported and needs to be upgraded:\n\n  ${listPackages(unsupported)}\n\n  ${getUpgradeInstructions(unsupported)}\n`)\n    process.exit(1)\n  }\n}\n\nfunction listPackages(pkgs: PackageInfo[]) {\n  return pkgs\n    .map(\n      (pkg) =>\n        `${pkg.name} (installed: ${pkg.installed}, want: ${\n          pkg.deprecatedBelow || pkg.supported.join(' || ')\n        })`,\n    )\n    .join('\\n  ')\n}\n\nfunction getUpgradeInstructions(pkgs: PackageInfo[]) {\n  const inst = pkgs\n    .map((pkg) => {\n      const [highestSupported] = pkg.supported\n        .map((version) => (semver.coerce(version) || {version: ''}).version)\n        .sort(semver.rcompare)\n\n      return `\"${pkg.name}@${highestSupported}\"`\n    })\n    .join(' ')\n\n  return `To upgrade, run either:\n\n  npm install ${inst}\n\n  or\n\n  yarn add ${inst}\n\n  or\n\n  pnpm add ${inst}\n\n\nRead more at ${generateHelpUrl('upgrade-packages')}`\n}\n\nfunction getDowngradeInstructions(pkgs: PackageInfo[]) {\n  const inst = pkgs\n    .map((pkg) => {\n      const [highestSupported] = pkg.supported\n        .map((version) => (semver.coerce(version) || {version: ''}).version)\n        .sort(semver.rcompare)\n\n      return `\"${pkg.name}@${highestSupported}\"`\n    })\n    .join(' ')\n\n  return `To downgrade, run either:\n\n  yarn add ${inst}\n\n  or\n\n  npm install ${inst}\n\n  or\n\n  pnpm install ${inst}`\n}\n\nfunction readPackageJson(filePath: string): PackageJson {\n  try {\n    // eslint-disable-next-line no-sync\n    return JSON.parse(fs.readFileSync(filePath, 'utf8'))\n  } catch (err) {\n    throw new Error(`Failed to read \"${filePath}\": ${err.message}`)\n  }\n}\n","import {readFile} from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type CliCommandContext, type PackageJson} from '@sanity/cli'\nimport execa from 'execa'\nimport oneline from 'oneline'\nimport resolveFrom from 'resolve-from'\nimport semver, {type SemVer} from 'semver'\n\nimport {peerDependencies} from '../../../../package.json'\n\nconst defaultStudioManifestProps: PartialPackageManifest = {\n  name: 'studio',\n  version: '1.0.0',\n}\n\ninterface CheckResult {\n  didInstall: boolean\n}\n\n/**\n * Checks that the studio has declared and installed the required dependencies\n * needed by the Sanity modules. While we generally use regular, explicit\n * dependencies in modules, there are certain dependencies that are better\n * served being peer dependencies, such as react and styled-components.\n *\n * If these dependencies are not installed/declared, we want to prompt the user\n * whether or not to add them to `package.json` and install them\n */\nexport async function checkRequiredDependencies(context: CliCommandContext): Promise<CheckResult> {\n  const {workDir: studioPath, output} = context\n  const [studioPackageManifest, installedStyledComponentsVersion] = await Promise.all([\n    await readPackageManifest(path.join(studioPath, 'package.json'), defaultStudioManifestProps),\n    await readModuleVersion(studioPath, 'styled-components'),\n  ])\n\n  const wantedStyledComponentsVersionRange = peerDependencies['styled-components']\n\n  // The studio _must_ now declare `styled-components` as a dependency. If it's not there,\n  // we'll want to automatically _add it_ to the manifest and tell the user to reinstall\n  // dependencies before running whatever command was being run\n  const declaredStyledComponentsVersion = studioPackageManifest.dependencies['styled-components']\n  if (!declaredStyledComponentsVersion) {\n    const [file, ...args] = process.argv\n    const deps = {'styled-components': wantedStyledComponentsVersionRange}\n    await installDependencies(deps, context)\n\n    // Re-run the same command (sanity dev/sanity build etc) after installation,\n    // as it can have shifted the entire `node_modules` folder around, result in\n    // broken assumptions about installation paths. This is a hack, and should be\n    // solved properly.\n    await execa(file, args, {cwd: studioPath, stdio: 'inherit'})\n    return {didInstall: true}\n  }\n\n  // Theoretically the version specified in package.json could be incorrect, eg `foo`\n  let minDeclaredStyledComponentsVersion: SemVer | null = null\n  try {\n    minDeclaredStyledComponentsVersion = semver.minVersion(declaredStyledComponentsVersion)\n  } catch (err) {\n    // Intentional fall-through (variable will be left as null, throwing below)\n  }\n\n  if (!minDeclaredStyledComponentsVersion) {\n    throw new Error(oneline`\n      Declared dependency \\`styled-components\\` has an invalid version range:\n      \\`${declaredStyledComponentsVersion}\\`.\n    `)\n  }\n\n  // The declared version should be semver-compatible with the version specified as a\n  // peer dependency in `sanity`. If not, we should tell the user to change it.\n  //\n  // Exception: Ranges are hard to compare. `>=5.0.0 && <=5.3.2 || ^6`... Comparing this\n  // to anything is going to be challenging, so only compare \"simple\" ranges/versions\n  // (^x.x.x / ~x.x.x / x.x.x)\n  if (\n    isComparableRange(declaredStyledComponentsVersion) &&\n    !semver.satisfies(minDeclaredStyledComponentsVersion, wantedStyledComponentsVersionRange)\n  ) {\n    output.warn(oneline`\n      Declared version of styled-components (${declaredStyledComponentsVersion})\n      is not compatible with the version required by sanity (${wantedStyledComponentsVersionRange}).\n      This might cause problems!\n    `)\n  }\n\n  // Ensure the studio has _installed_ a version of `styled-components`\n  if (!installedStyledComponentsVersion) {\n    throw new Error(oneline`\n      Declared dependency \\`styled-components\\` is not installed - run\n      \\`npm install\\`, \\`yarn install\\` or \\`pnpm install\\` to install it before re-running this command.\n    `)\n  }\n\n  // The studio should have an _installed_ version of `styled-components`, and it should\n  // be semver compatible with the version specified in `sanity` peer dependencies.\n  if (!semver.satisfies(installedStyledComponentsVersion, wantedStyledComponentsVersionRange)) {\n    output.warn(oneline`\n      Installed version of styled-components (${installedStyledComponentsVersion})\n      is not compatible with the version required by sanity (${wantedStyledComponentsVersionRange}).\n      This might cause problems!\n    `)\n  }\n\n  return {didInstall: false}\n}\n\n/**\n * Reads the version number of the _installed_ module, or returns `null` if not found\n *\n * @param studioPath - Path of the studio\n * @param moduleName - Name of module to get installed version for\n * @returns Version number, of null\n */\nasync function readModuleVersion(studioPath: string, moduleName: string): Promise<string | null> {\n  const manifestPath = resolveFrom.silent(studioPath, path.join(moduleName, 'package.json'))\n  return manifestPath ? (await readPackageManifest(manifestPath)).version : null\n}\n\n/**\n * Read the `package.json` file at the given path and return an object that guarantees\n * the presence of name, version, dependencies, dev dependencies and peer dependencies\n *\n * @param packageJsonPath - Path to package.json to read\n * @returns Reduced package.json with guarantees for name, version and dependency fields\n */\nasync function readPackageManifest(\n  packageJsonPath: string,\n  defaults: Partial<PartialPackageManifest> = {},\n): Promise<PackageManifest> {\n  let manifest: unknown\n  try {\n    manifest = {...defaults, ...(await readPackageJson(packageJsonPath))}\n  } catch (err) {\n    throw new Error(`Failed to read \"${packageJsonPath}\": ${err.message}`)\n  }\n\n  if (!isPackageManifest(manifest)) {\n    throw new Error(`Failed to read \"${packageJsonPath}\": Invalid package manifest`)\n  }\n\n  const {name, version, dependencies = {}, devDependencies = {}} = manifest\n  return {name, version, dependencies, devDependencies}\n}\n\n/**\n * Install the passed dependencies at the given version/version range,\n * prompting the user which package manager to use. We will try to detect\n * a package manager from files in the directory and show that as the default\n *\n * @param dependencies - Object of dependencies `({[package name]: version})`\n * @param context - CLI context\n */\nasync function installDependencies(\n  dependencies: Record<string, string>,\n  context: CliCommandContext,\n): Promise<void> {\n  const {output, prompt, workDir, cliPackageManager} = context\n  const packages: string[] = []\n\n  output.print('The Sanity studio needs to install missing dependencies:')\n  for (const [pkgName, version] of Object.entries(dependencies)) {\n    const declaration = `${pkgName}@${version}`\n    output.print(`- ${declaration}`)\n    packages.push(declaration)\n  }\n\n  if (!cliPackageManager) {\n    output.error(\n      'ERROR: Could not determine package manager choice - run `npm install` or equivalent',\n    )\n    return\n  }\n\n  const {getPackageManagerChoice, installNewPackages} = cliPackageManager\n  const {mostOptimal, chosen: pkgManager} = await getPackageManagerChoice(workDir, {prompt})\n  if (mostOptimal && pkgManager !== mostOptimal) {\n    output.warn(\n      `WARN: This project appears to be installed with or using ${mostOptimal} - using a different package manager _may_ result in errors.`,\n    )\n  }\n\n  await installNewPackages({packages, packageManager: pkgManager}, context)\n}\n\nfunction isPackageManifest(item: unknown): item is PartialPackageManifest {\n  return typeof item === 'object' && item !== null && 'name' in item && 'version' in item\n}\n\nfunction isComparableRange(range: string): boolean {\n  return /^[\\^~]?\\d+(\\.\\d+)?(\\.\\d+)?$/.test(range)\n}\n\nfunction readPackageJson(filePath: string): Promise<PackageJson> {\n  return readFile(filePath, 'utf8').then((res) => JSON.parse(res))\n}\n\ninterface PackageManifest extends DependencyDeclarations {\n  name: string\n  version: string\n}\n\ninterface PartialPackageManifest extends Partial<DependencyDeclarations> {\n  name: string\n  version: string\n}\n\ninterface DependencyDeclarations {\n  dependencies: Record<string, string | undefined>\n  devDependencies: Record<string, string | undefined>\n}\n","import {performance} from 'node:perf_hooks'\n\nexport interface TimeMeasurer {\n  start: (name: string) => void\n  end: (name: string) => number\n  getTimings: () => Record<string, number>\n}\n\nexport function getTimer(): TimeMeasurer {\n  const timings: Record<string, number> = {}\n  const startTimes: Record<string, number> = {}\n\n  function start(name: string): void {\n    if (typeof startTimes[name] !== 'undefined') {\n      throw new Error(`Timer \"${name}\" already started, cannot overwrite`)\n    }\n\n    startTimes[name] = performance.now()\n  }\n\n  function end(name: string): number {\n    if (typeof startTimes[name] === 'undefined') {\n      throw new Error(`Timer \"${name}\" never started, cannot end`)\n    }\n\n    timings[name] = performance.now() - startTimes[name]\n    return timings[name]\n  }\n\n  return {start, end, getTimings: () => timings}\n}\n"],"names":["readPackageJson","path","resolveFrom","semver","generateHelpUrl","fs","execa","oneline","readFile","performance"],"mappings":"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"}