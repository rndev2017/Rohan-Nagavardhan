{"version":3,"file":"deployAction.js","sources":["../../src/_internal/cli/actions/deploy/deployAction.ts"],"sourcesContent":["import {promises as fs} from 'node:fs'\nimport path from 'node:path'\nimport zlib from 'node:zlib'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport {type SanityClient} from '@sanity/client'\nimport tar from 'tar-fs'\n\nimport buildSanityStudio, {type BuildSanityStudioCommandFlags} from '../build/buildAction'\n\nexport interface DeployStudioActionFlags extends BuildSanityStudioCommandFlags {\n  build?: boolean\n}\n\nexport default async function deployStudio(\n  args: CliCommandArguments<DeployStudioActionFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const {apiClient, workDir, chalk, output, prompt} = context\n  const flags = {build: true, ...args.extOptions}\n  const destFolder = args.argsWithoutOptions[0]\n  const sourceDir = path.resolve(process.cwd(), destFolder || path.join(workDir, 'dist'))\n\n  if (destFolder === 'graphql') {\n    throw new Error('Did you mean `sanity graphql deploy`?')\n  }\n\n  if (destFolder) {\n    let relativeOutput = path.relative(process.cwd(), sourceDir)\n    if (relativeOutput[0] !== '.') {\n      relativeOutput = `./${relativeOutput}`\n    }\n\n    const isEmpty = await dirIsEmptyOrNonExistent(sourceDir)\n    const shouldProceed =\n      isEmpty ||\n      (await prompt.single({\n        type: 'confirm',\n        message: `\"${relativeOutput}\" is not empty, do you want to proceed?`,\n        default: false,\n      }))\n\n    if (!shouldProceed) {\n      output.print('Cancelled.')\n      return\n    }\n\n    output.print(`Building to ${relativeOutput}\\n`)\n  }\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: true,\n  })\n\n  // Check that the project has a studio hostname\n  let spinner = output.spinner('Checking project info').start()\n  const project = await client.projects.getById(client.config().projectId as string)\n  let studioHostname = project && project.studioHost\n  spinner.succeed()\n\n  if (!studioHostname) {\n    output.print('Your project has not been assigned a studio hostname.')\n    output.print('To deploy your Sanity Studio to our hosted Sanity.Studio service,')\n    output.print('you will need one. Please enter the part you want to use.')\n\n    studioHostname = await prompt.single({\n      type: 'input',\n      filter: (inp: string) => inp.replace(/\\.sanity\\.studio$/i, ''),\n      message: 'Studio hostname (<value>.sanity.studio):',\n      validate: (name: string) => validateHostname(name, client),\n    })\n  }\n\n  // Always build the project, unless --no-build is passed\n  const shouldBuild = flags.build\n  if (shouldBuild) {\n    const buildArgs = [destFolder].filter(Boolean)\n    const {didCompile} = await buildSanityStudio(\n      {...args, extOptions: flags, argsWithoutOptions: buildArgs},\n      context,\n      {basePath: '/'},\n    )\n\n    if (!didCompile) {\n      return\n    }\n  }\n\n  // Ensure that the directory exists, is a directory and seems to have valid content\n  spinner = output.spinner('Verifying local content').start()\n  try {\n    await checkDir(sourceDir)\n    spinner.succeed()\n  } catch (err) {\n    spinner.fail()\n    throw err\n  }\n\n  // Now create a tarball of the given directory\n  const parentDir = path.dirname(sourceDir)\n  const base = path.basename(sourceDir)\n  const tarball = tar.pack(parentDir, {entries: [base]}).pipe(zlib.createGzip())\n\n  spinner = output.spinner('Deploying to Sanity.Studio').start()\n  try {\n    const response = await client.request({\n      method: 'POST',\n      url: '/deploy',\n      body: tarball,\n      maxRedirects: 0,\n    })\n\n    spinner.succeed()\n\n    // And let the user know we're done\n    output.print(`\\nSuccess! Studio deployed to ${chalk.cyan(response.location)}`)\n  } catch (err) {\n    spinner.fail()\n    throw err\n  }\n}\n\nasync function dirIsEmptyOrNonExistent(sourceDir: string): Promise<boolean> {\n  try {\n    const stats = await fs.stat(sourceDir)\n    if (!stats.isDirectory()) {\n      throw new Error(`Directory ${sourceDir} is not a directory`)\n    }\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return true\n    }\n\n    throw err\n  }\n\n  const content = await fs.readdir(sourceDir)\n  return content.length === 0\n}\n\nasync function checkDir(sourceDir: string) {\n  try {\n    const stats = await fs.stat(sourceDir)\n    if (!stats.isDirectory()) {\n      throw new Error(`Directory ${sourceDir} is not a directory`)\n    }\n  } catch (err) {\n    const error = err.code === 'ENOENT' ? new Error(`Directory \"${sourceDir}\" does not exist`) : err\n\n    throw error\n  }\n\n  try {\n    await fs.stat(path.join(sourceDir, 'index.html'))\n  } catch (err) {\n    const error =\n      err.code === 'ENOENT'\n        ? new Error(\n            [\n              `\"${sourceDir}/index.html\" does not exist -`,\n              '[SOURCE_DIR] must be a directory containing',\n              'a Sanity studio built using \"sanity build\"',\n            ].join(' '),\n          )\n        : err\n\n    throw error\n  }\n}\n\nasync function validateHostname(value: string, client: SanityClient): Promise<boolean | string> {\n  const projectId = client.config().projectId\n  const uri = `/projects/${projectId}`\n  const studioHost = value || ''\n\n  // Check that it matches allowed character range\n  if (!/^[a-z0-9_-]+$/i.test(studioHost)) {\n    return 'Hostname can contain only A-Z, 0-9, _ and -'\n  }\n\n  // Check that the hostname is not already taken\n  try {\n    await client.request({uri, method: 'PATCH', body: {studioHost}})\n    return true\n  } catch (error) {\n    if (error?.response?.body?.message) {\n      return error.response.body.message\n    }\n    throw error\n  }\n}\n"],"names":["path","buildSanityStudio","tar","zlib","fs"],"mappings":";;;;;;AAc8B,eAAA,aAC5B,MACA,SACe;AACf,QAAM,EAAC,WAAW,SAAS,OAAO,QAAQ,OAAM,IAAI,SAC9C,QAAQ,EAAC,OAAO,IAAM,GAAG,KAAK,WAAU,GACxC,aAAa,KAAK,mBAAmB,CAAC,GACtC,YAAYA,sBAAK,QAAQ,QAAQ,IAAI,GAAG,cAAcA,cAAAA,QAAK,KAAK,SAAS,MAAM,CAAC;AAEtF,MAAI,eAAe;AACX,UAAA,IAAI,MAAM,uCAAuC;AAGzD,MAAI,YAAY;AACd,QAAI,iBAAiBA,cAAAA,QAAK,SAAS,QAAQ,IAAA,GAAO,SAAS;AAc3D,QAbI,eAAe,CAAC,MAAM,QACxB,iBAAiB,KAAK,cAAc,KAYlC,EATY,MAAM,wBAAwB,SAAS,KAGpD,MAAM,OAAO,OAAO;AAAA,MACnB,MAAM;AAAA,MACN,SAAS,IAAI,cAAc;AAAA,MAC3B,SAAS;AAAA,IACV,CAAA,IAEiB;AAClB,aAAO,MAAM,YAAY;AACzB;AAAA,IACF;AAEO,WAAA,MAAM,eAAe,cAAc;AAAA,CAAI;AAAA,EAChD;AAEA,QAAM,SAAS,UAAU;AAAA,IACvB,aAAa;AAAA,IACb,gBAAgB;AAAA,EAAA,CACjB;AAGD,MAAI,UAAU,OAAO,QAAQ,uBAAuB,EAAE,MAAM;AACtD,QAAA,UAAU,MAAM,OAAO,SAAS,QAAQ,OAAO,SAAS,SAAmB;AAC7E,MAAA,iBAAiB,WAAW,QAAQ;AAkBxC,MAjBA,QAAQ,WAEH,mBACH,OAAO,MAAM,uDAAuD,GACpE,OAAO,MAAM,mEAAmE,GAChF,OAAO,MAAM,2DAA2D,GAExE,iBAAiB,MAAM,OAAO,OAAO;AAAA,IACnC,MAAM;AAAA,IACN,QAAQ,CAAC,QAAgB,IAAI,QAAQ,sBAAsB,EAAE;AAAA,IAC7D,SAAS;AAAA,IACT,UAAU,CAAC,SAAiB,iBAAiB,MAAM,MAAM;AAAA,EAAA,CAC1D,IAIiB,MAAM,OACT;AACT,UAAA,YAAY,CAAC,UAAU,EAAE,OAAO,OAAO,GACvC,EAAC,WAAU,IAAI,MAAMC,YAAA;AAAA,MACzB,EAAC,GAAG,MAAM,YAAY,OAAO,oBAAoB,UAAS;AAAA,MAC1D;AAAA,MACA,EAAC,UAAU,IAAG;AAAA,IAAA;AAGhB,QAAI,CAAC;AACH;AAAA,EAEJ;AAGA,YAAU,OAAO,QAAQ,yBAAyB,EAAE,MAAM;AACtD,MAAA;AACF,UAAM,SAAS,SAAS,GACxB,QAAQ,QAAQ;AAAA,WACT,KAAK;AACZ,UAAA,QAAQ,KACF,GAAA;AAAA,EACR;AAGM,QAAA,YAAYD,sBAAK,QAAQ,SAAS,GAClC,OAAOA,sBAAK,SAAS,SAAS,GAC9B,UAAUE,qBAAI,KAAK,WAAW,EAAC,SAAS,CAAC,IAAI,GAAE,EAAE,KAAKC,cAAAA,QAAK,WAAA,CAAY;AAE7E,YAAU,OAAO,QAAQ,4BAA4B,EAAE,MAAM;AACzD,MAAA;AACI,UAAA,WAAW,MAAM,OAAO,QAAQ;AAAA,MACpC,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,MACN,cAAc;AAAA,IAAA,CACf;AAEO,YAAA,QAAA,GAGR,OAAO,MAAM;AAAA,8BAAiC,MAAM,KAAK,SAAS,QAAQ,CAAC,EAAE;AAAA,WACtE,KAAK;AACZ,UAAA,QAAQ,KACF,GAAA;AAAA,EACR;AACF;AAEA,eAAe,wBAAwB,WAAqC;AACtE,MAAA;AAEF,QAAI,EADU,MAAMC,GAAA,SAAG,KAAK,SAAS,GAC1B,YAAY;AACrB,YAAM,IAAI,MAAM,aAAa,SAAS,qBAAqB;AAAA,WAEtD,KAAK;AACZ,QAAI,IAAI,SAAS;AACR,aAAA;AAGH,UAAA;AAAA,EACR;AAGA,UADgB,MAAMA,GAAAA,SAAG,QAAQ,SAAS,GAC3B,WAAW;AAC5B;AAEA,eAAe,SAAS,WAAmB;AACrC,MAAA;AAEF,QAAI,EADU,MAAMA,GAAA,SAAG,KAAK,SAAS,GAC1B,YAAY;AACrB,YAAM,IAAI,MAAM,aAAa,SAAS,qBAAqB;AAAA,WAEtD,KAAK;AACE,UAAA,IAAI,SAAS,WAAW,IAAI,MAAM,cAAc,SAAS,kBAAkB,IAAI;AAAA,EAG/F;AAEI,MAAA;AACF,UAAMA,GAAAA,SAAG,KAAKJ,cAAA,QAAK,KAAK,WAAW,YAAY,CAAC;AAAA,WACzC,KAAK;AAEV,UAAA,IAAI,SAAS,WACT,IAAI;AAAA,MACF;AAAA,QACE,IAAI,SAAS;AAAA,QACb;AAAA,QACA;AAAA,MAAA,EACA,KAAK,GAAG;AAAA,IAEZ,IAAA;AAAA,EAGR;AACF;AAEA,eAAe,iBAAiB,OAAe,QAAiD;AA3KhG,MAAA,IAAA;AA6KQ,QAAA,MAAM,aADM,OAAO,OAAA,EAAS,SACA,IAC5B,aAAa,SAAS;AAGxB,MAAA,CAAC,iBAAiB,KAAK,UAAU;AAC5B,WAAA;AAIL,MAAA;AACI,WAAA,MAAA,OAAO,QAAQ,EAAC,KAAK,QAAQ,SAAS,MAAM,EAAC,WAAA,GAAY,GACxD;AAAA,WACA,OAAO;AACd,SAAI,MAAO,KAAA,SAAA,OAAA,SAAA,MAAA,aAAP,OAAiB,SAAA,GAAA,SAAjB,QAAuB,GAAA;AAClB,aAAA,MAAM,SAAS,KAAK;AAEvB,UAAA;AAAA,EACR;AACF;;"}