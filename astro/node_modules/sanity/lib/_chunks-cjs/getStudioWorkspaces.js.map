{"version":3,"file":"getStudioWorkspaces.js","sources":["../../src/_internal/cli/util/getStudioWorkspaces.ts"],"sourcesContent":["/* eslint-disable no-sync */\nimport fs from 'node:fs'\nimport path from 'node:path'\n\nimport {firstValueFrom} from 'rxjs'\nimport {type Config, resolveConfig, type Workspace, type WorkspaceOptions} from 'sanity'\n\nimport {mockBrowserEnvironment} from './mockBrowserEnvironment'\n\nconst candidates = [\n  'sanity.config.js',\n  'sanity.config.jsx',\n  'sanity.config.ts',\n  'sanity.config.tsx',\n]\n\ninterface GetStudioWorkspacesOptions {\n  configPath?: string\n  basePath: string\n}\n\n/**\n * Note: Don't run this on the main thread, use it a forked process\n */\nexport function getStudioConfig({\n  basePath,\n  configPath: cfgPath,\n}: GetStudioWorkspacesOptions): WorkspaceOptions[] {\n  let cleanup\n  try {\n    cleanup = mockBrowserEnvironment(basePath)\n\n    let configPath = cfgPath\n    if (configPath && !fs.existsSync(configPath)) {\n      throw new Error(`Failed to find config at \"${cfgPath}\"`)\n    } else if (!configPath) {\n      configPath = candidates\n        .map((candidate) => path.join(basePath, candidate))\n        .find((candidate) => fs.existsSync(candidate))\n    }\n\n    if (!configPath) {\n      throw new Error(`Failed to resolve sanity.config.(js|ts) for base path \"${basePath}\"`)\n    }\n\n    let config: Config | undefined\n    try {\n      // eslint-disable-next-line import/no-dynamic-require\n      const mod = require(configPath)\n      config = mod.__esModule && mod.default ? mod.default : mod\n    } catch (err) {\n      const message = `Failed to load configuration file \"${configPath}\":\\n${err.message}`\n      // this helps preserve the stack trace\n      throw Object.assign(err, {message})\n    }\n\n    if (!config) throw new Error('Configuration did not export expected config shape')\n    const normalized = Array.isArray(config)\n      ? config\n      : [{...config, name: config.name || 'default', basePath: config.basePath || '/'}]\n\n    return normalized\n  } finally {\n    cleanup?.()\n  }\n}\n\n/**\n * Note: Don't run this on the main thread, use it a forked process\n */\nexport async function getStudioWorkspaces(\n  options: GetStudioWorkspacesOptions,\n): Promise<Workspace[]> {\n  let cleanup\n\n  try {\n    cleanup = mockBrowserEnvironment(options.basePath)\n    const config = getStudioConfig(options)\n    const workspaces = await firstValueFrom(resolveConfig(config))\n    if (!workspaces) throw new Error('Failed to resolve configuration')\n    return workspaces\n  } finally {\n    cleanup?.()\n  }\n}\n"],"names":["mockBrowserEnvironment","fs","path","firstValueFrom","resolveConfig"],"mappings":";;;;;;AASA,MAAM,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAUO,SAAS,gBAAgB;AAAA,EAC9B;AAAA,EACA,YAAY;AACd,GAAmD;AAC7C,MAAA;AACA,MAAA;AACF,cAAUA,uBAAAA,uBAAuB,QAAQ;AAEzC,QAAI,aAAa;AACjB,QAAI,cAAc,CAACC,oBAAG,WAAW,UAAU;AACzC,YAAM,IAAI,MAAM,6BAA6B,OAAO,GAAG;AAC7C,QAAA,eACV,aAAa,WACV,IAAI,CAAC,cAAcC,cAAAA,QAAK,KAAK,UAAU,SAAS,CAAC,EACjD,KAAK,CAAC,cAAcD,YAAAA,QAAG,WAAW,SAAS,CAAC,IAG7C,CAAC;AACH,YAAM,IAAI,MAAM,0DAA0D,QAAQ,GAAG;AAGnF,QAAA;AACA,QAAA;AAEI,YAAA,MAAM,QAAQ,UAAU;AAC9B,eAAS,IAAI,cAAc,IAAI,UAAU,IAAI,UAAU;AAAA,aAChD,KAAK;AACN,YAAA,UAAU,sCAAsC,UAAU;AAAA,EAAO,IAAI,OAAO;AAElF,YAAM,OAAO,OAAO,KAAK,EAAC,QAAQ,CAAA;AAAA,IACpC;AAEA,QAAI,CAAC,OAAc,OAAA,IAAI,MAAM,oDAAoD;AAKjF,WAJmB,MAAM,QAAQ,MAAM,IACnC,SACA,CAAC,EAAC,GAAG,QAAQ,MAAM,OAAO,QAAQ,WAAW,UAAU,OAAO,YAAY,KAAI;AAAA,EAAA,UAGlF;AACU;EACZ;AACF;AAKA,eAAsB,oBACpB,SACsB;AAClB,MAAA;AAEA,MAAA;AACQ,cAAAD,uBAAA,uBAAuB,QAAQ,QAAQ;AAC3C,UAAA,SAAS,gBAAgB,OAAO,GAChC,aAAa,MAAMG,oBAAeC,OAAAA,cAAc,MAAM,CAAC;AAC7D,QAAI,CAAC,WAAkB,OAAA,IAAI,MAAM,iCAAiC;AAC3D,WAAA;AAAA,EAAA,UACP;AACU;EACZ;AACF;;;"}