{"version":3,"file":"validateAction.js","sources":["../../src/_internal/cli/actions/schema/formatSchemaValidation.ts","../../src/_internal/cli/actions/schema/validateAction.ts"],"sourcesContent":["import {isatty} from 'node:tty'\n\nimport {type SchemaValidationProblemGroup, type SchemaValidationProblemPath} from '@sanity/types'\nimport chalk from 'chalk'\nimport logSymbols from 'log-symbols'\n\nconst isTty = isatty(1)\n\nconst headers = {\n  error: isTty ? chalk.bold(chalk.bgRed(chalk.black(' ERROR '))) : chalk.red('[ERROR]'),\n  warning: isTty ? chalk.bold(chalk.bgYellow(chalk.black(' WARN '))) : chalk.yellow('[WARN]'),\n}\n\nconst severityValues = {error: 0, warning: 1}\n\nfunction formatPath(pathSegments: SchemaValidationProblemPath) {\n  const format = (\n    [curr, ...next]: SchemaValidationProblemPath,\n    mode: 'object' | 'array' = 'object',\n  ): string => {\n    if (!curr) return ''\n    if (curr.kind === 'property') return format(next, curr.name === 'of' ? 'array' : 'object')\n\n    const name = curr.name ? curr.name : `<anonymous_${curr.type}>`\n    return `${mode === 'array' ? `[${name}]` : `.${name}`}${format(next)}`\n  }\n\n  return format(pathSegments.slice(1)).slice(1) // removes the top-level type and leading `.`\n}\n\nexport function getAggregatedSeverity(\n  groupOrGroups: SchemaValidationProblemGroup | SchemaValidationProblemGroup[],\n): 'error' | 'warning' {\n  const groups = Array.isArray(groupOrGroups) ? groupOrGroups : [groupOrGroups]\n  return groups\n    .flatMap((group) => group.problems.map((problem) => problem.severity))\n    .find((severity) => severity === 'error')\n    ? 'error'\n    : 'warning'\n}\n\nexport function formatSchemaValidation(validation: SchemaValidationProblemGroup[]): string {\n  let unnamedTopLevelTypeCount = 0\n  const validationByType = Object.entries(\n    validation.reduce<Record<string, SchemaValidationProblemGroup[]>>((acc, next) => {\n      const [firstSegment] = next.path\n      if (!firstSegment) return acc\n      if (firstSegment.kind !== 'type') return acc\n\n      const topLevelType =\n        firstSegment.name || `<unnamed_${firstSegment.type}_type_${unnamedTopLevelTypeCount++}>`\n      const problems = acc[topLevelType] ?? []\n\n      problems.push(next)\n\n      acc[topLevelType] = problems\n      return acc\n    }, {}),\n  )\n\n  const formatted = validationByType\n    .sort((a, b) => {\n      const [aType, aGroups] = a\n      const [bType, bGroups] = b\n      const aValue = severityValues[getAggregatedSeverity(aGroups)]\n      const bValue = severityValues[getAggregatedSeverity(bGroups)]\n      if (aValue === bValue) return aType.localeCompare(bType, 'en-US')\n      return aValue - bValue\n    })\n    .map(([topLevelType, groups]) => {\n      const formattedTopLevelType = isTty\n        ? chalk.bgWhite(chalk.black(` ${topLevelType} `))\n        : `[${topLevelType}]`\n\n      const header = `${headers[getAggregatedSeverity(groups)]} ${formattedTopLevelType}`\n      const body = groups\n        .sort(\n          (a, b) =>\n            severityValues[getAggregatedSeverity(a)] - severityValues[getAggregatedSeverity(b)],\n        )\n        .map((group) => {\n          const formattedPath = `  ${chalk.bold(formatPath(group.path) || '(root)')}`\n          const formattedMessages = group.problems\n            .sort((a, b) => severityValues[a.severity] - severityValues[b.severity])\n            .map(({severity, message}) => `    ${logSymbols[severity]} ${message}`)\n            .join('\\n')\n\n          return `${formattedPath}\\n${formattedMessages}`\n        })\n        .join('\\n')\n\n      return `${header}\\n${body}`\n    })\n    .join('\\n\\n')\n\n  return formatted\n}\n","import path from 'node:path'\nimport {Worker} from 'node:worker_threads'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport logSymbols from 'log-symbols'\nimport readPkgUp from 'read-pkg-up'\n\nimport {\n  type ValidateSchemaWorkerData,\n  type ValidateSchemaWorkerResult,\n} from '../../threads/validateSchema'\nimport {formatSchemaValidation, getAggregatedSeverity} from './formatSchemaValidation'\n\ninterface ValidateFlags {\n  workspace?: string\n  format?: string\n  level?: 'error' | 'warning'\n}\n\nexport type SchemaValidationFormatter = (result: ValidateSchemaWorkerResult) => string\n\nexport default async function validateAction(\n  args: CliCommandArguments<ValidateFlags>,\n  {workDir, output}: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n\n  const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n  if (!rootPkgPath) {\n    throw new Error('Could not find root directory for `sanity` package')\n  }\n\n  const workerPath = path.join(\n    path.dirname(rootPkgPath),\n    'lib',\n    '_internal',\n    'cli',\n    'threads',\n    'validateSchema.js',\n  )\n\n  const level = flags.level || 'warning'\n\n  if (level !== 'error' && level !== 'warning') {\n    throw new Error(`Invalid level. Available levels are 'error' and 'warning'.`)\n  }\n\n  const format = flags.format || 'pretty'\n\n  if (!['pretty', 'ndjson', 'json'].includes(format)) {\n    throw new Error(\n      `Did not recognize format '${flags.format}'. Available formats are 'pretty', 'ndjson', and 'json'.`,\n    )\n  }\n\n  let spinner\n\n  if (format === 'pretty') {\n    spinner = output\n      .spinner(\n        flags.workspace\n          ? `Validating schema from workspace '${flags.workspace}'…`\n          : 'Validating schema…',\n      )\n      .start()\n  }\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      level,\n      workspace: flags.workspace,\n    } satisfies ValidateSchemaWorkerData,\n    // eslint-disable-next-line no-process-env\n    env: process.env,\n  })\n\n  const {validation} = await new Promise<ValidateSchemaWorkerResult>((resolve, reject) => {\n    worker.addListener('message', resolve)\n    worker.addListener('error', reject)\n  })\n\n  const problems = validation.flatMap((group) => group.problems)\n  const errorCount = problems.filter((problem) => problem.severity === 'error').length\n  const warningCount = problems.filter((problem) => problem.severity === 'warning').length\n\n  const overallSeverity = getAggregatedSeverity(validation)\n\n  switch (format) {\n    case 'ndjson': {\n      for (const group of validation) {\n        output.print(JSON.stringify(group))\n      }\n      break\n    }\n    case 'json': {\n      output.print(JSON.stringify(validation))\n      break\n    }\n    default: {\n      spinner?.succeed('Validated schema')\n      output.print(`\\nValidation results:`)\n      output.print(\n        `${logSymbols.error} Errors:   ${errorCount.toLocaleString('en-US')} error${\n          errorCount === 1 ? '' : 's'\n        }`,\n      )\n      if (level !== 'error') {\n        output.print(\n          `${logSymbols.warning} Warnings: ${warningCount.toLocaleString('en-US')} warning${\n            warningCount === 1 ? '' : 's'\n          }`,\n        )\n      }\n      output.print()\n\n      output.print(formatSchemaValidation(validation))\n    }\n  }\n\n  process.exitCode = overallSeverity === 'error' ? 1 : 0\n}\n"],"names":["isatty","chalk","logSymbols","readPkgUp","path","Worker"],"mappings":"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"}