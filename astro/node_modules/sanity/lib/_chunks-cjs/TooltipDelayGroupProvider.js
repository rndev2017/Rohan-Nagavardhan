"use strict";
var jsxRuntime = require("react/jsx-runtime"), ui = require("@sanity/ui"), React = require("react"), reactIs = require("react-is"), styledComponents = require("styled-components"), reactI18next = require("react-i18next");
function ConditionalWrapper({
  children,
  condition,
  wrapper
}) {
  return condition ? wrapper(children) : children;
}
const LARGE_BUTTON_PROPS = {
  space: 3,
  padding: 3
}, DEFAULT_BUTTON_PROPS = {
  space: 2,
  padding: 2
}, TooltipButtonWrapper = styledComponents.styled.span`
  display: inline-flex;
`, Button = React.forwardRef(function({
  size = "default",
  mode = "default",
  paddingY,
  tone = "default",
  tooltipProps,
  ...rest
}, ref) {
  const renderWrapper = React.useCallback(
    (children) => /* @__PURE__ */ jsxRuntime.jsx(Tooltip, { content: tooltipProps == null ? void 0 : tooltipProps.content, portal: !0, ...tooltipProps, children: /* @__PURE__ */ jsxRuntime.jsx(TooltipButtonWrapper, { children }) }),
    [tooltipProps]
  );
  return /* @__PURE__ */ jsxRuntime.jsx(ConditionalWrapper, { condition: !!tooltipProps, wrapper: renderWrapper, children: /* @__PURE__ */ jsxRuntime.jsx(ui.Button, { ...rest, ...size === "default" ? DEFAULT_BUTTON_PROPS : LARGE_BUTTON_PROPS, paddingY, ref, mode, tone }) });
}), Dialog = React.forwardRef(function({
  bodyHeight,
  children,
  footer,
  padding = !0,
  ...props
}, ref) {
  const { t } = reactI18next.useTranslation();
  return /* @__PURE__ */ jsxRuntime.jsx(
    ui.Dialog,
    {
      ...props,
      animate: !0,
      ref,
      footer: ((footer == null ? void 0 : footer.confirmButton) || (footer == null ? void 0 : footer.cancelButton)) && /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { width: "full", gap: 3, justify: "flex-end", padding: 3, children: [
        props.onClose && /* @__PURE__ */ jsxRuntime.jsx(
          ui.Button,
          {
            mode: "bleed",
            padding: 2,
            text: t("common.dialog.cancel-button.text"),
            tone: "default",
            onClick: props.onClose,
            ...footer.cancelButton
          }
        ),
        footer.confirmButton && /* @__PURE__ */ jsxRuntime.jsx(
          ui.Button,
          {
            mode: "default",
            padding: 2,
            text: t("common.dialog.confirm-button.text"),
            tone: "critical",
            ...footer.confirmButton
          }
        )
      ] }),
      children: /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { height: bodyHeight, padding: padding ? 4 : 0, children })
    }
  );
}), MenuButton = React.forwardRef(function(props, ref) {
  return /* @__PURE__ */ jsxRuntime.jsx(
    ui.MenuButton,
    {
      ...props,
      ref,
      popover: {
        ...props.popover,
        animate: !0
      }
    }
  );
}), MenuGroup = (props) => /* @__PURE__ */ jsxRuntime.jsx(ui.MenuGroup, { ...props, fontSize: 1, padding: 3 }), FONT_SIZE = 1, SUBTITLE_FONT_SIZE = 0, SubtitleText = styledComponents.styled(ui.Text)`
  margin-top: 2px;
`, PreviewWrapper = styledComponents.styled(ui.Box)`
  height: 25px;
  width: 25px;
  overflow: hidden;
`, MenuItem = React.forwardRef(function({
  badgeText,
  children: childrenProp,
  disabled,
  hotkeys,
  icon,
  iconRight,
  preview = null,
  renderMenuItem,
  text,
  tooltipProps,
  __unstable_subtitle,
  __unstable_space,
  ...rest
}, ref) {
  const menuItemContent = React.useMemo(() => /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { align: "center", gap: 2, children: [
    preview && /* @__PURE__ */ jsxRuntime.jsx(
      PreviewWrapper,
      {
        style: { opacity: disabled ? 0.25 : void 0 },
        paddingRight: __unstable_space ? 1 : 0,
        children: /* @__PURE__ */ jsxRuntime.jsx(ui.Flex, { align: "center", height: "fill", justify: "center", children: preview })
      }
    ),
    icon && /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { paddingRight: 1, children: /* @__PURE__ */ jsxRuntime.jsxs(ui.Text, { size: FONT_SIZE, children: [
      React.isValidElement(icon) && icon,
      reactIs.isValidElementType(icon) && React.createElement(icon)
    ] }) }),
    text && /* @__PURE__ */ jsxRuntime.jsxs(
      ui.Stack,
      {
        flex: 1,
        space: __unstable_subtitle ? 1 : 2,
        paddingLeft: __unstable_subtitle ? 1 : 0,
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: FONT_SIZE, textOverflow: "ellipsis", weight: "medium", children: text }),
          __unstable_subtitle && /* @__PURE__ */ jsxRuntime.jsx(SubtitleText, { size: SUBTITLE_FONT_SIZE, textOverflow: "ellipsis", weight: "medium", muted: !0, children: __unstable_subtitle })
        ]
      }
    ),
    (badgeText || hotkeys || iconRight) && /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { align: "center", gap: 3, marginLeft: 3, children: [
      hotkeys && /* @__PURE__ */ jsxRuntime.jsx(ui.Hotkeys, { keys: hotkeys, style: { marginTop: -4, marginBottom: -4 } }),
      badgeText && /* @__PURE__ */ jsxRuntime.jsx(ui.Badge, { fontSize: 0, style: { marginTop: -4, marginBottom: -4 }, children: badgeText }),
      iconRight && /* @__PURE__ */ jsxRuntime.jsxs(ui.Text, { size: FONT_SIZE, children: [
        React.isValidElement(iconRight) && iconRight,
        reactIs.isValidElementType(iconRight) && React.createElement(iconRight)
      ] })
    ] })
  ] }), [
    preview,
    disabled,
    __unstable_space,
    icon,
    text,
    __unstable_subtitle,
    badgeText,
    hotkeys,
    iconRight
  ]), renderWrapper = React.useCallback(
    (children) => /* @__PURE__ */ jsxRuntime.jsx(Tooltip, { content: tooltipProps == null ? void 0 : tooltipProps.content, portal: !0, ...tooltipProps, children: /* @__PURE__ */ jsxRuntime.jsx("div", { children }) }),
    [tooltipProps]
  );
  return /* @__PURE__ */ jsxRuntime.jsx(ConditionalWrapper, { condition: !!tooltipProps, wrapper: renderWrapper, children: /* @__PURE__ */ jsxRuntime.jsx(
    ui.MenuItem,
    {
      disabled,
      paddingLeft: preview ? 1 : 3,
      paddingRight: 3,
      paddingY: preview ? 1 : 3,
      ref,
      ...rest,
      children: typeof childrenProp > "u" && typeof renderMenuItem == "function" ? renderMenuItem(menuItemContent) : menuItemContent
    }
  ) });
}), Popover = React.forwardRef(function(props, ref) {
  return /* @__PURE__ */ jsxRuntime.jsx(ui.Popover, { ...props, animate: !0, ref });
}), Tab = React.forwardRef(function({ tone = "default", ...props }, ref) {
  return /* @__PURE__ */ jsxRuntime.jsx(ui.Tab, { ...props, muted: !0, padding: 2, ref, tone });
}), TOOLTIP_DELAY_PROPS = {
  open: 400
}, TOOLTIP_SHARED_PROPS = {
  animate: !0,
  arrow: !1,
  boundaryElement: null,
  delay: TOOLTIP_DELAY_PROPS,
  fallbackPlacements: ["bottom-start", "bottom-end", "top-start", "top-end"],
  placement: "bottom",
  portal: !0
}, Tooltip = React.forwardRef(function(props, ref) {
  const { content, hotkeys, ...rest } = props;
  return typeof content == "string" ? /* @__PURE__ */ jsxRuntime.jsx(
    ui.Tooltip,
    {
      ...TOOLTIP_SHARED_PROPS,
      content: /* @__PURE__ */ jsxRuntime.jsxs(ui.Flex, { align: "center", children: [
        content && /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { flex: 1, padding: 1, children: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { size: 1, children: content }) }),
        hotkeys && /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { flex: "none", children: /* @__PURE__ */ jsxRuntime.jsx(ui.Hotkeys, { keys: hotkeys }) })
      ] }),
      padding: 1,
      ref,
      ...rest
    }
  ) : /* @__PURE__ */ jsxRuntime.jsx(ui.Tooltip, { ...TOOLTIP_SHARED_PROPS, content, ref, ...rest });
}), TooltipDelayGroupProvider = (props) => /* @__PURE__ */ jsxRuntime.jsx(ui.TooltipDelayGroupProvider, { delay: TOOLTIP_DELAY_PROPS, children: props.children });
exports.Button = Button;
exports.ConditionalWrapper = ConditionalWrapper;
exports.Dialog = Dialog;
exports.MenuButton = MenuButton;
exports.MenuGroup = MenuGroup;
exports.MenuItem = MenuItem;
exports.Popover = Popover;
exports.Tab = Tab;
exports.Tooltip = Tooltip;
exports.TooltipDelayGroupProvider = TooltipDelayGroupProvider;
//# sourceMappingURL=TooltipDelayGroupProvider.js.map
