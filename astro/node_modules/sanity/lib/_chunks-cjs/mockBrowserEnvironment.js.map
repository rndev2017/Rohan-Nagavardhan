{"version":3,"file":"mockBrowserEnvironment.js","sources":["../../src/_internal/cli/server/getStudioEnvironmentVariables.ts","../../src/_internal/cli/util/mockBrowserEnvironment.ts"],"sourcesContent":["/* eslint-disable no-process-env */\nimport {loadEnv} from '@sanity/cli'\n\nconst envPrefix = 'SANITY_STUDIO_'\n\n/**\n * The params for the `getStudioEnvironmentVariables` function that gets Studio focused environment variables.\n *\n * @public\n */\nexport interface StudioEnvVariablesOptions {\n  /**\n   * When specified adds a prefix to the environment variable keys,\n   * eg: `getStudioEnvironmentVariables({prefix: 'process.env.'})`\n   */\n  prefix?: string\n  /**\n   * When specified includes environment variables from dotenv files (`.env`), in the same way the studio does.\n   * A `mode` must be specified, usually `development`\n   * or `production`, which will load the corresponding `.env.development` or `.env.production`.\n   * To specify where to look for the dotenv files, specify `options.envFile.envDir`.\n   */\n  envFile?: {mode: string; envDir?: string} | false\n  /**\n   * When specified, JSON-encodes the values, which is handy if you want to pass\n   * this to a bundlers hardcoded defines, such as Vite's `define` or Webpack's `DefinePlugin`.\n   */\n  jsonEncode?: boolean\n}\n\n/**\n * Get environment variables prefixed with SANITY_STUDIO_, as an object.\n *\n * @param options - Options for the environment variable loading\n *  {@link StudioEnvVariablesOptions}\n * @returns Object of studio environment variables\n *\n * @example\n * ```tsx\n * getStudioEnvironmentVariables({prefix: 'process.env.', jsonEncode: true})\n * ```\n *\n * @public\n */\nexport function getStudioEnvironmentVariables(\n  options: StudioEnvVariablesOptions = {},\n): Record<string, string> {\n  const {prefix = '', envFile = false, jsonEncode = false} = options\n  const fullEnv = envFile\n    ? {...process.env, ...loadEnv(envFile.mode, envFile.envDir || process.cwd(), [envPrefix])}\n    : process.env\n\n  const studioEnv: Record<string, string> = {}\n  for (const key in fullEnv) {\n    if (key.startsWith(envPrefix)) {\n      studioEnv[`${prefix}${key}`] = jsonEncode\n        ? JSON.stringify(fullEnv[key] || '')\n        : fullEnv[key] || ''\n    }\n  }\n  return studioEnv\n}\n","import {ResizeObserver} from '@juggle/resize-observer'\nimport {register as registerESBuild} from 'esbuild-register/dist/node'\nimport jsdomGlobal from 'jsdom-global'\nimport {addHook} from 'pirates'\nimport resolveFrom from 'resolve-from'\n\nimport {getStudioEnvironmentVariables} from '../server/getStudioEnvironmentVariables'\n\nconst jsdomDefaultHtml = `<!doctype html>\n<html>\n  <head><meta charset=\"utf-8\"></head>\n  <body></body>\n</html>`\n\nexport function mockBrowserEnvironment(basePath: string): () => void {\n  // Guard against double-registering\n  if (global && global.window && '__mockedBySanity' in global.window) {\n    return () => {\n      /* intentional noop */\n    }\n  }\n\n  const domCleanup = jsdomGlobal(jsdomDefaultHtml, {url: 'http://localhost:3333/'})\n  const windowCleanup = () => global.window.close()\n  const globalCleanup = provideFakeGlobals(basePath)\n  const cleanupFileLoader = addHook(\n    (code, filename) => `module.exports = ${JSON.stringify(filename)}`,\n    {\n      ignoreNodeModules: false,\n      exts: getFileExtensions(),\n    },\n  )\n\n  const {unregister: unregisterESBuild} = registerESBuild({\n    target: 'node18',\n    format: 'cjs',\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.mjs'],\n    jsx: 'automatic',\n    define: {\n      // define the `process.env` global\n      ...getStudioEnvironmentVariables({prefix: 'process.env.', jsonEncode: true}),\n      // define the `import.meta.env` global\n      ...getStudioEnvironmentVariables({prefix: 'import.meta.env.', jsonEncode: true}),\n    },\n  })\n\n  return function cleanupBrowserEnvironment() {\n    unregisterESBuild()\n    cleanupFileLoader()\n    globalCleanup()\n    windowCleanup()\n    domCleanup()\n  }\n}\n\nconst getFakeGlobals = (basePath: string) => ({\n  __mockedBySanity: true,\n  requestAnimationFrame: setImmediate,\n  cancelAnimationFrame: clearImmediate,\n  requestIdleCallback: setImmediate,\n  cancelIdleCallback: clearImmediate,\n  ace: tryGetAceGlobal(basePath),\n  InputEvent: global.window?.InputEvent,\n  customElements: global.window?.customElements,\n  ResizeObserver: global.window?.ResizeObserver || ResizeObserver,\n  matchMedia:\n    global.window?.matchMedia ||\n    (() => ({\n      matches: false,\n      media: '',\n      onchange: null,\n    })),\n})\n\nfunction provideFakeGlobals(basePath: string): () => void {\n  const globalEnv = global as any as Record<string, unknown>\n  const globalWindow = global.window as Record<string, any>\n\n  const fakeGlobals = getFakeGlobals(basePath)\n  const stubbedGlobalKeys: string[] = []\n  const stubbedWindowKeys: string[] = []\n\n  for (const [rawKey, value] of Object.entries(fakeGlobals)) {\n    if (typeof value === 'undefined') {\n      continue\n    }\n\n    const key = rawKey as keyof typeof fakeGlobals\n\n    if (!(key in globalEnv)) {\n      globalEnv[key] = fakeGlobals[key]\n      stubbedGlobalKeys.push(key)\n    }\n\n    if (!(key in global.window)) {\n      globalWindow[key] = fakeGlobals[key]\n      stubbedWindowKeys.push(key)\n    }\n  }\n\n  return () => {\n    stubbedGlobalKeys.forEach((key) => {\n      delete globalEnv[key]\n    })\n\n    stubbedWindowKeys.forEach((key) => {\n      delete globalWindow[key]\n    })\n  }\n}\n\nfunction tryGetAceGlobal(basePath: string) {\n  // Work around an issue where using the @sanity/code-input plugin would crash\n  // due to `ace` not being defined on the global due to odd bundling stategy.\n  const acePath = resolveFrom.silent(basePath, 'ace-builds')\n  if (!acePath) {\n    return undefined\n  }\n\n  try {\n    // eslint-disable-next-line import/no-dynamic-require\n    return require(acePath)\n  } catch (err) {\n    return undefined\n  }\n}\n\nfunction getFileExtensions() {\n  return [\n    '.css',\n    '.eot',\n    '.gif',\n    '.jpeg',\n    '.jpg',\n    '.otf',\n    '.png',\n    '.sass',\n    '.scss',\n    '.svg',\n    '.ttf',\n    '.webp',\n    '.woff',\n    '.woff2',\n  ]\n}\n"],"names":["loadEnv","jsdomGlobal","addHook","registerESBuild","ResizeObserver","resolveFrom"],"mappings":"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"}