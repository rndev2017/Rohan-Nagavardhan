import { createContext } from "react";
const ConnectorContext = createContext({
  isReviewChangesOpen: !1,
  onOpenReviewChanges: () => {
  },
  onSetFocus: () => {
  }
}), PreviewCardContext = createContext({ selected: !1 }), ScrollContext = createContext(null), zIndexContextDefaults = {
  navbar: 200,
  navbarPopover: 5e5,
  navbarDialog: 500001,
  // pane
  pane: 100,
  paneHeader: [110, 15e3],
  paneFooter: [120, 2e4],
  paneResizer: [130, 25e3],
  paneDialog: [140, 5e3],
  //
  popover: 200,
  modal: 200,
  movingItem: 1e4,
  drawershade: 1e6,
  drawer: 1000001,
  fullscreen: 12e5,
  toast: [100, 11e3],
  // NOT IN USE
  portal: 200,
  dropdown: 200,
  navbarFixed: 1010,
  fullscreenEdit: 1050,
  popoverBackground: 1060,
  tooltip: 200,
  modalBackground: 2e3,
  spinner: 3e3
}, ZIndexContext = createContext(zIndexContextDefaults), DiffContext = createContext({ path: [] }), DocumentChangeContext = createContext(null), DocumentIdContext = createContext(null), FieldActionsContext = createContext({
  actions: [],
  focused: !1,
  hovered: !1,
  onMouseEnter: () => {
  },
  onMouseLeave: () => {
  }
}), HoveredFieldContext = createContext({
  hoveredStack: [],
  onMouseEnter: () => {
  },
  onMouseLeave: () => {
  }
}), FormBuilderContext = createContext(null), FormValueContext = createContext(null), GetFormValueContext = createContext(null), VirtualizerScrollInstanceContext = createContext(
  null
), SortableItemIdContext = createContext(null), PortableTextMarkersContext = createContext([]), PortableTextMemberItemsContext = createContext([]), ReferenceItemRefContext = createContext(null), DocumentFieldActionsContext = createContext(
  null
), FormCallbacksContext = createContext(null), PresenceContext = createContext([]), ReferenceInputOptionsContext = createContext({}), ReviewChangesContext = createContext(null), ValidationContext = createContext([]), LocaleContext = createContext(void 0), FormFieldPresenceContext = createContext([]), DocumentActionPropsContext = createContext(void 0), ScheduledPublishingEnabledContext = createContext(null), SchedulePublishUpsellContext = createContext({
  upsellData: null,
  handleOpenDialog: () => null,
  upsellDialogOpen: !1,
  telemetryLogs: {
    dialogSecondaryClicked: () => null,
    dialogPrimaryClicked: () => null,
    panelViewed: () => null,
    panelDismissed: () => null,
    panelPrimaryClicked: () => null,
    panelSecondaryClicked: () => null
  }
}), SchedulesContext = createContext(void 0), ResourceCacheContext = createContext(null), ActiveWorkspaceMatcherContext = createContext(null), AddonDatasetContext = createContext(null), ColorSchemeSetValueContext = createContext(null), ColorSchemeValueContext = createContext(null), FreeTrialContext = createContext(void 0), CalendarContext = createContext(void 0), SearchContext = createContext(void 0), NavbarContext = createContext({
  onSearchFullscreenOpenChange: () => "",
  onSearchOpenChange: () => "",
  searchFullscreenOpen: !1,
  searchFullscreenPortalEl: null,
  searchOpen: !1
}), RouterHistoryContext = createContext(null), SourceContext = createContext(null), WorkspaceContext = createContext(null), WorkspacesContext = createContext(null), TasksEnabledContext = createContext({
  enabled: !1,
  mode: null
}), IsLastPaneContext = createContext(!1), MentionUserContext = createContext(null), TasksNavigationContext = createContext(null), TasksContext = createContext(null), TasksUpsellContext = createContext(null), UserColorManagerContext = createContext(null), RouterContext = createContext(null), CommentsAuthoringPathContext = createContext(
  null
), CommentsContext = createContext(null), CommentInputContext = createContext(null), CommentsEnabledContext = createContext({
  enabled: !1,
  mode: null
}), CommentsIntentContext = createContext(
  void 0
), CommentsOnboardingContext = createContext(null), CommentsSelectedPathContext = createContext(
  null
), CommentsUpsellContext = createContext(null), PaneContext = createContext(null), PaneLayoutContext = createContext(null);
function missingContext() {
  throw new Error("Pane is missing router context");
}
const PaneRouterContext = createContext({
  index: 0,
  groupIndex: 0,
  siblingIndex: 0,
  payload: void 0,
  params: {},
  hasGroupSiblings: !1,
  groupLength: 0,
  routerPanesState: [],
  BackLink: () => missingContext(),
  ChildLink: () => missingContext(),
  ReferenceChildLink: () => missingContext(),
  handleEditReference: () => missingContext(),
  ParameterizedLink: () => missingContext(),
  replaceCurrent: () => missingContext(),
  closeCurrentAndAfter: () => missingContext(),
  closeCurrent: () => missingContext(),
  duplicateCurrent: () => missingContext(),
  setView: () => missingContext(),
  setParams: () => missingContext(),
  setPayload: () => missingContext(),
  navigateIntent: () => missingContext(),
  createPathWithParams: () => missingContext()
}), DocumentPaneContext = createContext(null), StructureToolContext = createContext(null);
export {
  ActiveWorkspaceMatcherContext,
  AddonDatasetContext,
  CalendarContext,
  ColorSchemeSetValueContext,
  ColorSchemeValueContext,
  CommentInputContext,
  CommentsAuthoringPathContext,
  CommentsContext,
  CommentsEnabledContext,
  CommentsIntentContext,
  CommentsOnboardingContext,
  CommentsSelectedPathContext,
  CommentsUpsellContext,
  ConnectorContext,
  DiffContext,
  DocumentActionPropsContext,
  DocumentChangeContext,
  DocumentFieldActionsContext,
  DocumentIdContext,
  DocumentPaneContext,
  FieldActionsContext,
  FormBuilderContext,
  FormCallbacksContext,
  FormFieldPresenceContext,
  FormValueContext,
  FreeTrialContext,
  GetFormValueContext,
  HoveredFieldContext,
  IsLastPaneContext,
  LocaleContext,
  MentionUserContext,
  NavbarContext,
  PaneContext,
  PaneLayoutContext,
  PaneRouterContext,
  PortableTextMarkersContext,
  PortableTextMemberItemsContext,
  PresenceContext,
  PreviewCardContext,
  ReferenceInputOptionsContext,
  ReferenceItemRefContext,
  ResourceCacheContext,
  ReviewChangesContext,
  RouterContext,
  RouterHistoryContext,
  SchedulePublishUpsellContext,
  ScheduledPublishingEnabledContext,
  SchedulesContext,
  ScrollContext,
  SearchContext,
  SortableItemIdContext,
  SourceContext,
  StructureToolContext,
  TasksContext,
  TasksEnabledContext,
  TasksNavigationContext,
  TasksUpsellContext,
  UserColorManagerContext,
  ValidationContext,
  VirtualizerScrollInstanceContext,
  WorkspaceContext,
  WorkspacesContext,
  ZIndexContext,
  zIndexContextDefaults
};
//# sourceMappingURL=_singletons.esm.js.map
