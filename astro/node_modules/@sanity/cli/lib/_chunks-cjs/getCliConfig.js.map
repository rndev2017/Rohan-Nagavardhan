{"version":3,"file":"getCliConfig.js","sources":["../../src/util/dynamicRequire.ts","../../src/util/getCliConfig.ts"],"sourcesContent":["// Prevent webpack from bundling in webpack context,\n// use regular node require for unbundled context\n\n/* eslint-disable camelcase, no-undef */\ndeclare const __webpack_require__: boolean\ndeclare const __non_webpack_require__: typeof require\n\nconst requireFunc: typeof require =\n  typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require\n/* eslint-enable camelcase, no-undef */\n\nexport function dynamicRequire<T = any>(request: string): T {\n  const mod = requireFunc(request)\n  return mod.__esModule && mod.default ? mod.default : mod\n}\n\ndynamicRequire.resolve = requireFunc.resolve\n","/* eslint-disable no-sync */\n\n/**\n * Reads the Sanity CLI config from one of the following files (in preferred order):\n *   - sanity.cli.js\n *   - sanity.cli.ts\n *\n * Note: There are two ways of using this:\n * a) `getCliConfig(cwd)`\n * b) `getCliConfig(cwd, {forked: true})`\n *\n * Approach a is generally a bit faster as it avoids the forking startup time, while\n * approach b could be considered \"safer\" since any side-effects of running the config\n * file will not bleed into the current CLI process directly.\n */\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport {Worker} from 'node:worker_threads'\n\nimport {type CliConfig, type SanityJson} from '../types'\nimport {getCliWorkerPath} from './cliWorker'\nimport {dynamicRequire} from './dynamicRequire'\n\nexport type CliMajorVersion = 2 | 3\n\nexport type CliConfigResult =\n  | {config: SanityJson; path: string; version: 2}\n  | {config: CliConfig; path: string; version: 3}\n  | {config: null; path: string; version: CliMajorVersion}\n\nexport async function getCliConfig(\n  cwd: string,\n  {forked}: {forked?: boolean} = {},\n): Promise<CliConfigResult | null> {\n  if (forked) {\n    try {\n      return await getCliConfigForked(cwd)\n    } catch (err) {\n      // Intentional noop - try unforked variant\n    }\n  }\n\n  const {unregister} = __DEV__\n    ? {unregister: () => undefined}\n    : require('esbuild-register/dist/node').register()\n\n  try {\n    const v3Config = getSanityCliConfig(cwd)\n    if (v3Config) {\n      return v3Config\n    }\n\n    return getSanityJsonConfig(cwd)\n  } catch (err) {\n    throw err\n  } finally {\n    unregister()\n  }\n}\n\nexport function getCliConfigSync(cwd: string): CliConfigResult | null {\n  const v3Config = getSanityCliConfig(cwd)\n  return v3Config ? v3Config : getSanityJsonConfig(cwd)\n}\n\nasync function getCliConfigForked(cwd: string): Promise<CliConfigResult | null> {\n  const workerPath = await getCliWorkerPath('getCliConfig')\n  return new Promise((resolve, reject) => {\n    const worker = new Worker(workerPath, {\n      workerData: cwd,\n      // eslint-disable-next-line no-process-env\n      env: process.env,\n    })\n    worker.on('message', (message) => {\n      if (message.type === 'config') {\n        resolve(message.config)\n      } else {\n        const error = new Error(message.error)\n        ;(error as any).type = message.errorType\n        reject(new Error(message.error))\n      }\n    })\n    worker.on('error', reject)\n    worker.on('exit', (code) => {\n      if (code !== 0) {\n        reject(new Error(`Worker stopped with exit code ${code}`))\n      }\n    })\n  })\n}\n\nfunction getSanityJsonConfig(cwd: string): CliConfigResult | null {\n  const configPath = path.join(cwd, 'sanity.json')\n\n  if (!fs.existsSync(configPath)) {\n    return null\n  }\n\n  return {\n    config: loadJsonConfig(configPath),\n    path: configPath,\n    version: 2,\n  }\n}\n\nfunction getSanityCliConfig(cwd: string): CliConfigResult | null {\n  const jsConfigPath = path.join(cwd, 'sanity.cli.js')\n  const tsConfigPath = path.join(cwd, 'sanity.cli.ts')\n\n  const [js, ts] = [fs.existsSync(jsConfigPath), fs.existsSync(tsConfigPath)]\n\n  if (!js && !ts) {\n    return null\n  }\n\n  if (!js && ts) {\n    return {\n      config: importConfig(tsConfigPath),\n      path: tsConfigPath,\n      version: 3,\n    }\n  }\n\n  if (js && ts) {\n    warn('Found both `sanity.cli.js` and `sanity.cli.ts` - using sanity.cli.js')\n  }\n\n  return {\n    config: importConfig(jsConfigPath),\n    path: jsConfigPath,\n    version: 3,\n  }\n}\n\nfunction loadJsonConfig(filePath: string): SanityJson | null {\n  try {\n    const content = fs.readFileSync(filePath, 'utf8')\n    return JSON.parse(content)\n  } catch (err) {\n    console.error(`Error reading \"${filePath}\": ${err.message}`)\n    return null\n  }\n}\n\nfunction importConfig(filePath: string): CliConfig | null {\n  try {\n    const config = dynamicRequire<CliConfig | {default: CliConfig} | null>(filePath)\n    if (config === null || typeof config !== 'object') {\n      throw new Error('Module export is not a configuration object')\n    }\n\n    return 'default' in config ? config.default : config\n  } catch (err) {\n    // If attempting to import `defineCliConfig` or similar from `sanity/cli`,\n    // accept the fact that it might not be installed. Instead, let the CLI\n    // give a warning about the `sanity` module not being installed\n    if (err.code === 'MODULE_NOT_FOUND' && err.message.includes('sanity/cli')) {\n      return null\n    }\n\n    console.error(`Error reading \"${filePath}\": ${err.message}`)\n    return null\n  }\n}\n\nfunction warn(warning: string) {\n  if (typeof process.send === 'function') {\n    process.send({type: 'warning', warning})\n  } else {\n    console.warn(warning)\n  }\n}\n"],"names":["getCliWorkerPath","Worker","path","fs"],"mappings":"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"}