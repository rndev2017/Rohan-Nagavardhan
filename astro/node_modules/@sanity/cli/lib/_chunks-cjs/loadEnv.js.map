{"version":3,"file":"loadEnv.js","sources":["../../src/debug.ts","../../src/util/resolveRootDir.ts","../../../../../node_modules/.pnpm/dotenv@16.4.5/node_modules/dotenv/lib/main.js","../../../../../node_modules/.pnpm/dotenv-expand@9.0.0/node_modules/dotenv-expand/lib/main.js","../../src/util/loadEnv.ts"],"sourcesContent":["import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:cli')\n","/* eslint-disable no-sync */\nimport fs from 'node:fs'\nimport path from 'node:path'\n\nimport {debug} from '../debug'\n\n/**\n * Resolve project root directory, falling back to cwd if it cannot be found\n */\nexport function resolveRootDir(cwd: string): string {\n  try {\n    return resolveProjectRoot(cwd) || cwd\n  } catch (err) {\n    throw new Error(`Error occurred trying to resolve project root:\\n${err.message}`)\n  }\n}\n\nfunction hasStudioConfig(basePath: string): boolean {\n  const buildConfigs = [\n    fileExists(path.join(basePath, 'sanity.config.js')),\n    fileExists(path.join(basePath, 'sanity.config.ts')),\n    isSanityV2StudioRoot(basePath),\n  ]\n\n  return buildConfigs.some(Boolean)\n}\n\nfunction resolveProjectRoot(basePath: string, iterations = 0): string | false {\n  if (hasStudioConfig(basePath)) {\n    return basePath\n  }\n\n  const parentDir = path.resolve(basePath, '..')\n  if (parentDir === basePath || iterations > 30) {\n    // Reached root (or max depth), give up\n    return false\n  }\n\n  return resolveProjectRoot(parentDir, iterations + 1)\n}\n\nfunction isSanityV2StudioRoot(basePath: string): boolean {\n  try {\n    const content = fs.readFileSync(path.join(basePath, 'sanity.json'), 'utf8')\n    const sanityJson = JSON.parse(content)\n    const isRoot = Boolean(sanityJson?.root)\n    if (isRoot) {\n      debug('Found Sanity v2 studio root at %s', basePath)\n    }\n    return isRoot\n  } catch (err) {\n    return false\n  }\n}\n\nfunction fileExists(filePath: string): boolean {\n  return fs.existsSync(filePath)\n}\n","const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n    err.code = 'MISSING_DATA'\n    throw err\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\n    throw err\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let possibleVaultPath = null\n\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\n  }\n\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath\n  }\n\n  return null\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault')\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options && options.encoding) {\n    encoding = options.encoding\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default')\n    }\n  }\n\n  let optionPaths = [dotenvPath] // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)]\n    } else {\n      optionPaths = [] // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath))\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError\n  const parsedAll = {}\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\n\n      DotenvModule.populate(parsedAll, parsed, options)\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`)\n      }\n      lastError = e\n    }\n  }\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsedAll, options)\n\n  if (lastError) {\n    return { parsed: parsedAll, error: lastError }\n  } else {\n    return { parsed: parsedAll }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  const vaultPath = _vaultPath(options)\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.subarray(0, 12)\n  const authTag = ciphertext.subarray(-16)\n  ciphertext = ciphertext.subarray(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\n      err.code = 'DECRYPTION_FAILED'\n      throw err\n    } else {\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n    err.code = 'OBJECT_REQUIRED'\n    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n","'use strict'\n\nfunction _interpolate (envValue, environment, config) {\n  const matches = envValue.match(/(.?\\${*[\\w]*(?::-[\\w/]*)?}*)/g) || []\n\n  return matches.reduce(function (newEnv, match, index) {\n    const parts = /(.?)\\${*([\\w]*(?::-[\\w/]*)?)?}*/g.exec(match)\n    if (!parts || parts.length === 0) {\n      return newEnv\n    }\n\n    const prefix = parts[1]\n\n    let value, replacePart\n\n    if (prefix === '\\\\') {\n      replacePart = parts[0]\n      value = replacePart.replace('\\\\$', '$')\n    } else {\n      const keyParts = parts[2].split(':-')\n      const key = keyParts[0]\n      replacePart = parts[0].substring(prefix.length)\n      // process.env value 'wins' over .env file's value\n      value = Object.prototype.hasOwnProperty.call(environment, key)\n        ? environment[key]\n        : (config.parsed[key] || keyParts[1] || '')\n\n      // If the value is found, remove nested expansions.\n      if (keyParts.length > 1 && value) {\n        const replaceNested = matches[index + 1]\n        matches[index + 1] = ''\n\n        newEnv = newEnv.replace(replaceNested, '')\n      }\n      // Resolve recursive interpolations\n      value = _interpolate(value, environment, config)\n    }\n\n    return newEnv.replace(replacePart, value)\n  }, envValue)\n}\n\nfunction expand (config) {\n  // if ignoring process.env, use a blank object\n  const environment = config.ignoreProcessEnv ? {} : process.env\n\n  for (const configKey in config.parsed) {\n    const value = Object.prototype.hasOwnProperty.call(environment, configKey) ? environment[configKey] : config.parsed[configKey]\n\n    config.parsed[configKey] = _interpolate(value, environment, config)\n  }\n\n  for (const processKey in config.parsed) {\n    environment[processKey] = config.parsed[processKey]\n  }\n\n  return config\n}\n\nmodule.exports.expand = expand\n","/**\n * This is an \"inlined\" version of Vite's `loadEnv` function,\n * simplified somewhat to only support our use case.\n *\n * Ideally we'd just use `loadEnv` from Vite, but importing it\n * causes bundling issues due to node APIs and downstream dependencies.\n *\n * Vite is MIT licensed, copyright (c) Yuxi (Evan) You and Vite contributors.\n */\n\n/* eslint-disable no-process-env */\nimport fs from 'node:fs'\nimport path from 'node:path'\n\nimport {parse} from 'dotenv'\nimport {expand} from 'dotenv-expand'\n\nexport function loadEnv(\n  mode: string,\n  envDir: string,\n  prefixes: string[] = ['VITE_'],\n): Record<string, string> {\n  if (mode === 'local') {\n    throw new Error(\n      `\"local\" cannot be used as a mode name because it conflicts with ` +\n        `the .local postfix for .env files.`,\n    )\n  }\n\n  const env: Record<string, string> = {}\n  const envFiles = [\n    /** default file */ `.env`,\n    /** local file */ `.env.local`,\n    /** mode file */ `.env.${mode}`,\n    /** mode local file */ `.env.${mode}.local`,\n  ]\n\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((file) => {\n      const envPath = lookupFile(envDir, [file], {\n        rootDir: envDir,\n      })\n      if (!envPath) return []\n      return Object.entries(parse(fs.readFileSync(envPath)))\n    }),\n  )\n\n  // test NODE_ENV override before expand as otherwise process.env.NODE_ENV would override this\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === undefined) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV\n  }\n  // support BROWSER and BROWSER_ARGS env variables\n  if (parsed.BROWSER && process.env.BROWSER === undefined) {\n    process.env.BROWSER = parsed.BROWSER\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === undefined) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS\n  }\n\n  try {\n    // let environment variables use each other\n    expand({parsed})\n  } catch (e) {\n    // custom error handling until https://github.com/motdotla/dotenv-expand/issues/65 is fixed upstream\n    // check for message \"TypeError: Cannot read properties of undefined (reading 'split')\"\n    if (e.message.includes('split')) {\n      throw new Error('dotenv-expand failed to expand env vars. Maybe you need to escape `$`?')\n    }\n    throw e\n  }\n\n  // only keys that start with prefix are exposed to client\n  for (const [key, value] of Object.entries(parsed)) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = value\n    }\n  }\n\n  // check if there are actual env variables starting with VITE_*\n  // these are typically provided inline and should be prioritized\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key] as string\n    }\n  }\n\n  return env\n}\n\nfunction lookupFile(\n  dir: string,\n  formats: string[],\n  options?: {\n    rootDir?: string\n  },\n): string | undefined {\n  for (const format of formats) {\n    const fullPath = path.join(dir, format)\n    // eslint-disable-next-line no-sync\n    if (fs.existsSync(fullPath) && fs.statSync(fullPath).isFile()) {\n      return fullPath\n    }\n  }\n  const parentDir = path.dirname(dir)\n  if (parentDir !== dir && (!options?.rootDir || parentDir.startsWith(options?.rootDir))) {\n    return lookupFile(parentDir, formats, options)\n  }\n\n  return undefined\n}\n"],"names":["debugIt","path","fs","require$$0","require$$1","require$$2","require$$3","debug","mainModule","config","parse","expand"],"mappings":"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","x_google_ignoreList":[2,3]}