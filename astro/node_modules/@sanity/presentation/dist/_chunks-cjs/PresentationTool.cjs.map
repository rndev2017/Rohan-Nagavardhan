{"version":3,"file":"PresentationTool.cjs","sources":["../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/rng.js","../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/stringify.js","../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/native.js","../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js","../../../channels/src/constants.ts","../../../channels/src/helpers.ts","../../../channels/src/controller.ts","../../../../node_modules/.pnpm/valibot@0.30.0/node_modules/valibot/dist/index.js","../../../visual-editing-helpers/dist/_chunks-es/transformSanityNodeData.js","../../../visual-editing-helpers/dist/index.js","../../src/lib/debounce.ts","../../src/panels/PanelsContext.tsx","../../src/panels/Panel.tsx","../../src/panels/usePanelsStorage.ts","../../src/panels/util.ts","../../src/panels/Panels.tsx","../../src/components/ErrorCard.tsx","../../src/editor/PresentationPaneRouterProvider.tsx","../../src/editor/DocumentListPane.tsx","../../src/editor/DocumentPane.tsx","../../src/editor/DocumentPanel.tsx","../../src/editor/ContentEditor.tsx","../../src/panels/PanelResizer.tsx","../../src/panels/usePanelId.ts","../../src/PresentationContent.tsx","../../src/PresentationNavigateProvider.tsx","../../src/PresentationNavigator.tsx","../../src/useLocalState.ts","../../src/PresentationParamsProvider.tsx","../../src/PresentationProvider.tsx","../../src/reducers/presentationReducer.ts","../../src/preview/IFrame.tsx","../../src/preview/PreviewLocationInput.tsx","../../src/preview/ShareUrlMenuItems.tsx","../../src/preview/PreviewFrame.tsx","../../src/useDocumentsOnPage.ts","../../src/useMainDocument.ts","../../src/lib/parse.ts","../../src/useParams.ts","../../src/usePreviewUrl.ts","../../src/PresentationTool.tsx"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import type {ChannelMsgType} from './types'\n\nexport const RESPONSE_TIMEOUT = 1000\nexport const HEARTBEAT_INTERVAL = 1000\nexport const HANDSHAKE_INTERVAL = 500\n\nexport const INTERNAL_MSG_TYPES = [\n  'channel/disconnect',\n  'channel/response',\n  'channel/heartbeat',\n] satisfies ChannelMsgType[]\n\nexport const HANDSHAKE_MSG_TYPES = [\n  'handshake/syn',\n  'handshake/syn-ack',\n  'handshake/ack',\n] satisfies ChannelMsgType[]\n","import {HANDSHAKE_MSG_TYPES, INTERNAL_MSG_TYPES} from './constants'\nimport type {ChannelMsgType, HandshakeMsgType, InternalMsgType} from './types'\n\nexport const isInternalMessage = (\n  type: ChannelMsgType | InternalMsgType,\n): type is InternalMsgType => {\n  return INTERNAL_MSG_TYPES.some((t) => t === type)\n}\n\nexport const isHandshakeMessage = (\n  type: ChannelMsgType | InternalMsgType,\n): type is HandshakeMsgType => {\n  return HANDSHAKE_MSG_TYPES.some((t) => t === type)\n}\n\nexport const isLegacyHandshakeMessage = ({data = {}}: MessageEvent): boolean => {\n  return (\n    // Check data is a record type\n    typeof data === 'object' &&\n    data !== null &&\n    !Array.isArray(data) &&\n    // The \"domain\" key was introduced in commit 4854e7f\n    !('domain' in data) &&\n    // Check the rest of the object shape is present\n    ['id', 'type', 'from', 'to'].every((key) => key in data) &&\n    // Prior to 4854e7f only handshake events were emitted prior to an established connection\n    data.type.startsWith('handshake/')\n  )\n}\n","import {v4 as uuid} from 'uuid'\n\nimport {HANDSHAKE_INTERVAL, HEARTBEAT_INTERVAL, RESPONSE_TIMEOUT} from './constants'\nimport {isHandshakeMessage, isLegacyHandshakeMessage} from './helpers'\nimport type {\n  ChannelMsg,\n  ChannelsController,\n  ChannelsControllerChannel,\n  ChannelsControllerOptions,\n  ChannelStatus,\n  InternalMsgType,\n  ProtocolMsg,\n  ToArgs,\n} from './types'\n\nexport function createChannelsController<\n  ConnectionIds extends string,\n  Sends extends ChannelMsg,\n  Receives extends ChannelMsg,\n>(\n  config: ChannelsControllerOptions<ConnectionIds, Receives>,\n): ChannelsController<ConnectionIds, Sends> {\n  type Controller = ChannelsController<ConnectionIds, Sends>\n\n  const {destroy, send} = createChannelsControllerInternal<ConnectionIds, Sends, Receives>(config)\n  const sources = new Set<MessageEventSource>()\n  const sendToSource = new WeakMap<MessageEventSource, Controller['send']>()\n  const destroySource = new Set<Controller['destroy']>()\n\n  const sendToMany = ((id, ...args) => {\n    send(id, ...args)\n    for (const source of sources) {\n      if (source && 'closed' in source && !source.closed && sendToSource.has(source)) {\n        const send = sendToSource.get(source)\n        send!(id, ...args)\n      }\n    }\n  }) satisfies Controller['send']\n\n  const destroyMany = (() => {\n    destroy()\n    for (const destroy of destroySource) {\n      destroy()\n    }\n  }) satisfies Controller['destroy']\n\n  return {\n    destroy: destroyMany,\n    send: sendToMany,\n    addSource(source) {\n      if (sources.has(source)) {\n        return\n      }\n      if (!('closed' in source)) {\n        // eslint-disable-next-line no-console\n        console.warn('Source is unsupported', {source})\n        throw new Error('Source is unsupported')\n      }\n      if (source.closed) {\n        throw new Error('Source is closed')\n      }\n      const {send, destroy} = createChannelsControllerInternal<ConnectionIds, Sends, Receives>({\n        ...config,\n        target: source,\n        // @TODO temporary workaround for onStatusUpdate and onEvent not differentiating\n        //       iframes from popups\n        connectTo: config.connectTo.map((prevConnectTo) => {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {onStatusUpdate, onEvent, ...connectTo} = prevConnectTo\n\n          return {\n            ...connectTo,\n            onEvent: onEvent\n              ? (((...args) => {\n                  const [type] = args\n                  if (\n                    type === 'preview-kit/documents' ||\n                    type === 'overlay/navigate' ||\n                    type === 'loader/documents'\n                  ) {\n                    return\n                  }\n\n                  return onEvent(...args)\n                }) satisfies typeof onEvent)\n              : undefined,\n          }\n        }),\n      })\n      destroySource.add(destroy)\n      sendToSource.set(source, send)\n      sources.add(source)\n    },\n  }\n}\n\nfunction createChannelsControllerInternal<\n  ConnectionIds extends string,\n  Sends extends ChannelMsg,\n  Receives extends ChannelMsg,\n>(\n  config: ChannelsControllerOptions<ConnectionIds, Receives>,\n): Omit<ChannelsController<ConnectionIds, Sends>, 'addSource'> {\n  type Channel = ChannelsControllerChannel<ConnectionIds, Receives>\n\n  const target = config.target\n\n  const channels: Channel[] = config.connectTo.map((config) => ({\n    buffer: [],\n    config,\n    id: '',\n    handler: handshakeHandler,\n    status: 'connecting',\n    interval: undefined,\n    heartbeat: undefined,\n  }))\n\n  function startHandshake(channel: Channel) {\n    channel.id = uuid()\n    channel.interval = window.setInterval(() => {\n      sendHandshake(channel, 'handshake/syn', {id: channel.id})\n    }, HANDSHAKE_INTERVAL)\n  }\n\n  function stopHandshake(channel: Channel) {\n    window.clearInterval(channel.interval)\n  }\n\n  function isValidMessageEvent(e: MessageEvent): e is MessageEvent<ProtocolMsg<Receives>> {\n    const {data, origin} = e\n    return (\n      data.domain === 'sanity/channels' &&\n      data.to == config.id &&\n      channels.map((channel) => channel.config.id).includes(data.from) &&\n      data.type !== 'channel/response' &&\n      origin === config.targetOrigin\n    )\n  }\n\n  function handshakeHandler(e: MessageEvent<ProtocolMsg<Receives>>) {\n    const {data} = e\n    if (isHandshakeMessage(data.type)) {\n      const channel = channels.find((channel) => channel.config.id === data.from)\n      if (channel && data.type === 'handshake/syn-ack') {\n        setChannelStatus(channel, 'connected')\n        sendHandshake(channel, 'handshake/ack', {id: channel.id})\n      }\n    }\n  }\n\n  const messageHandler = ((e: MessageEvent<ProtocolMsg<Receives>>) => {\n    const data = e.data as ProtocolMsg<Receives>\n    if (\n      !isHandshakeMessage(data.type) &&\n      channels.find((channel) => channel.id === data.connectionId)\n    ) {\n      const channel = channels.find((channel) => channel.config.id === data.from)\n      if (channel) {\n        const args = [data.type, data.data] as ToArgs<Receives>\n        channel.config.onEvent?.(...args)\n        config.onEvent?.(...args)\n        send(channel, 'channel/response', {responseTo: data.id}, false)\n      }\n    }\n  }) satisfies Channel['handler']\n\n  function handleEvents(e: MessageEvent<ProtocolMsg<Receives>>) {\n    if (isLegacyHandshakeMessage(e)) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Visual editing package mismatch detected! Please ensure you are using the latest version of Sanity Studio and any packages listed here:\\nhttps://github.com/sanity-io/visual-editing',\n      )\n      return\n    }\n\n    if (isValidMessageEvent(e)) {\n      const {data} = e\n      channels.find((channel) => channel.config.id === data.from)?.handler(e)\n    }\n  }\n\n  function flush(channel: Channel) {\n    const toFlush = [...channel.buffer]\n    channel.buffer.splice(0, channel.buffer.length)\n    toFlush.forEach(({type, data}) => {\n      send(channel, type, data)\n    })\n  }\n\n  function startHeartbeat(channel: Channel) {\n    stopHeartbeat(channel)\n    if (channel.config.heartbeat) {\n      const heartbeatInverval =\n        typeof channel.config.heartbeat === 'number' ? channel.config.heartbeat : HEARTBEAT_INTERVAL\n      channel.heartbeat = window.setInterval(() => {\n        send(channel, 'channel/heartbeat')\n      }, heartbeatInverval)\n    }\n  }\n\n  function stopHeartbeat(channel: Channel) {\n    if (channel.heartbeat) {\n      window.clearInterval(channel.heartbeat)\n    }\n  }\n\n  function setChannelStatus(channel: Channel, next: ChannelStatus) {\n    channel.status = next\n    channel.config.onStatusUpdate?.(next, channel.config.id)\n    config.onStatusUpdate?.(next, channel.config.id)\n    if (next === 'connecting' || next === 'reconnecting') {\n      channel.handler = handshakeHandler\n      stopHeartbeat(channel)\n      startHandshake(channel)\n    } else if (next === 'connected') {\n      channel.handler = messageHandler\n      stopHandshake(channel)\n      startHeartbeat(channel)\n      flush(channel)\n    } else if (next === 'disconnected') {\n      channel.id = null\n      channel.handler = handshakeHandler\n      stopHandshake(channel)\n      stopHeartbeat(channel)\n    }\n  }\n\n  function sendHandshake<T extends Sends['type']>(\n    channel: Channel,\n    type: T,\n    data?: Extract<Sends, {type: T}>['data'],\n  ) {\n    if (!channel.id) {\n      throw new Error('No channel ID set')\n    }\n\n    const msg = {\n      connectionId: channel.id,\n      data,\n      domain: 'sanity/channels',\n      from: config.id,\n      id: uuid(),\n      to: channel.config.id,\n      type,\n    } satisfies ProtocolMsg<Sends>\n\n    try {\n      target?.postMessage(msg, {targetOrigin: '*'})\n    } catch (e) {\n      throw new Error(`Failed to postMessage '${msg.id}' on '${config.id}'`)\n    }\n  }\n\n  function send<T extends Sends['type']>(\n    channel: Channel,\n    type: T | InternalMsgType,\n    data?: Extract<Sends, {type: T}>['data'],\n    expectResponse = true,\n  ) {\n    const id = uuid()\n\n    // If there is no active channel, push to the buffer\n    if (\n      channel.status === 'connecting' ||\n      channel.status === 'reconnecting' ||\n      channel.status === 'disconnected'\n    ) {\n      channel.buffer.push({type, data})\n      return\n    }\n\n    if (!channel.id) {\n      throw new Error('No channel ID set')\n    }\n\n    const msg = {\n      connectionId: channel.id,\n      data,\n      domain: 'sanity/channels',\n      from: config.id,\n      id,\n      to: channel.config.id,\n      type,\n    } satisfies ProtocolMsg<Sends>\n\n    if (expectResponse) {\n      const maxWait = setTimeout(() => {\n        // The channel may have changed, so only reject if the IDs match\n        if (msg.connectionId === channel.id) {\n          // Cleanup the transaction listener\n          window.removeEventListener('message', transact, false)\n          // Push the message to the buffer\n          if (type !== 'channel/heartbeat') {\n            channel.buffer.push({type, data})\n          }\n          // Try to reconnect\n          setChannelStatus(channel, 'reconnecting')\n          // eslint-disable-next-line no-console\n          console.warn(\n            `Received no response to message '${msg.type}' on client '${config.id}' (ID: '${msg.id}').`,\n          )\n        }\n      }, RESPONSE_TIMEOUT)\n\n      const transact = (e: MessageEvent<ChannelMsg>) => {\n        const {data: eventData} = e\n        if (\n          eventData.type === 'channel/response' &&\n          eventData.data?.['responseTo'] &&\n          eventData.data['responseTo'] === msg.id\n        ) {\n          window.removeEventListener('message', transact, false)\n          clearTimeout(maxWait)\n        }\n      }\n      window.addEventListener('message', transact, false)\n    }\n\n    try {\n      target?.postMessage(msg, {targetOrigin: config.targetOrigin})\n    } catch (e) {\n      throw new Error(`Failed to postMessage '${msg.id}' on client '${config.id}'`)\n    }\n  }\n\n  function disconnect() {\n    channels.forEach((channel) => {\n      if (['disconnected'].includes(channel.status)) return\n      send(channel, 'channel/disconnect', {id: channel.id}, false)\n      setChannelStatus(channel, 'disconnected')\n    })\n  }\n\n  function destroy() {\n    disconnect()\n    window.removeEventListener('message', handleEvents, false)\n    channels.forEach((channel) => {\n      stopHeartbeat(channel)\n      stopHandshake(channel)\n    })\n  }\n\n  function initialise() {\n    window.addEventListener('message', handleEvents, false)\n    channels.forEach((channel) => {\n      setChannelStatus(channel, 'connecting')\n    })\n  }\n\n  initialise()\n\n  function sendPublic<T extends Sends['type']>(\n    id: string | string[] | undefined,\n    type: T,\n    data?: Extract<Sends, {type: T}>['data'],\n  ) {\n    const channelsToSend = id ? (Array.isArray(id) ? [...id] : [id]) : channels\n\n    channelsToSend.forEach((id) => {\n      const channel = channels.find((channel) => channel.config.id === id)\n      if (!channel) throw new Error('Invalid channel ID')\n      send(channel, type, data)\n    })\n  }\n\n  return {\n    destroy,\n    send: sendPublic,\n  }\n}\n","// src/error/flatten/flatten.ts\nfunction flatten(arg1) {\n  return (Array.isArray(arg1) ? arg1 : arg1.issues).reduce(\n    (flatErrors, issue) => {\n      if (issue.path) {\n        if (issue.path.every(\n          ({ key }) => typeof key === \"string\" || typeof key === \"number\"\n        )) {\n          const path = issue.path.map(({ key }) => key).join(\".\");\n          if (flatErrors.nested[path]) {\n            flatErrors.nested[path].push(issue.message);\n          } else {\n            flatErrors.nested[path] = [issue.message];\n          }\n        }\n      } else {\n        if (flatErrors.root) {\n          flatErrors.root.push(issue.message);\n        } else {\n          flatErrors.root = [issue.message];\n        }\n      }\n      return flatErrors;\n    },\n    { nested: {} }\n  );\n}\n\n// src/error/ValiError/ValiError.ts\nvar ValiError = class extends Error {\n  issues;\n  /**\n   * Creates a Valibot error with useful information.\n   *\n   * @param issues The error issues.\n   */\n  constructor(issues) {\n    super(issues[0].message);\n    this.name = \"ValiError\";\n    this.issues = issues;\n  }\n};\n\n// src/methods/brand/brand.ts\nvar BrandSymbol = Symbol(\"brand\");\nfunction brand(schema, name) {\n  return schema;\n}\n\n// src/methods/coerce/coerce.ts\nfunction coerce(schema, action) {\n  return {\n    ...schema,\n    _parse(input, config) {\n      return schema._parse(action(input), config);\n    }\n  };\n}\n\n// src/methods/coerce/coerceAsync.ts\nfunction coerceAsync(schema, action) {\n  return {\n    ...schema,\n    async _parse(input, config) {\n      return schema._parse(await action(input), config);\n    }\n  };\n}\n\n// src/utils/actionIssue/actionIssue.ts\nfunction actionIssue(context, reference, input, label, received) {\n  return {\n    issues: [{ context, reference, input, label, received }]\n  };\n}\n\n// src/utils/actionOutput/actionOutput.ts\nfunction actionOutput(output) {\n  return { output };\n}\n\n// src/utils/defaultArgs/defaultArgs.ts\nfunction defaultArgs(arg1, arg2) {\n  return Array.isArray(arg1) ? [void 0, arg1] : [arg1, arg2];\n}\n\n// src/storages/globalConfig/globalConfig.ts\nvar store;\nfunction setGlobalConfig(config) {\n  store = { ...store, ...config };\n}\nfunction getGlobalConfig(config) {\n  return {\n    lang: config?.lang ?? store?.lang,\n    message: config?.message,\n    abortEarly: config?.abortEarly ?? store?.abortEarly,\n    abortPipeEarly: config?.abortPipeEarly ?? store?.abortPipeEarly,\n    skipPipe: config?.skipPipe ?? store?.skipPipe\n  };\n}\nfunction deleteGlobalConfig() {\n  store = void 0;\n}\n\n// src/storages/globalMessage/globalMessage.ts\nvar store2;\nfunction setGlobalMessage(message, lang) {\n  if (!store2)\n    store2 = /* @__PURE__ */ new Map();\n  store2.set(lang, message);\n}\nfunction getGlobalMessage(lang) {\n  return store2?.get(lang);\n}\nfunction deleteGlobalMessage(lang) {\n  store2?.delete(lang);\n}\n\n// src/storages/schemaMessage/schemaMessage.ts\nvar store3;\nfunction setSchemaMessage(message, lang) {\n  if (!store3)\n    store3 = /* @__PURE__ */ new Map();\n  store3.set(lang, message);\n}\nfunction getSchemaMessage(lang) {\n  return store3?.get(lang);\n}\nfunction deleteSchemaMessage(lang) {\n  store3?.delete(lang);\n}\n\n// src/storages/specificMessage/specificMessage.ts\nvar store4;\nfunction setSpecificMessage(reference, message, lang) {\n  if (!store4)\n    store4 = /* @__PURE__ */ new Map();\n  if (!store4.get(reference))\n    store4.set(reference, /* @__PURE__ */ new Map());\n  store4.get(reference).set(lang, message);\n}\nfunction getSpecificMessage(reference, lang) {\n  return store4?.get(reference)?.get(lang);\n}\nfunction deleteSpecificMessage(reference, lang) {\n  store4?.get(reference)?.delete(lang);\n}\n\n// src/utils/i18n/i18n.ts\nfunction i18n(schema, context, reference, config, issue) {\n  const message = context.message ?? getSpecificMessage(reference, issue.lang) ?? (schema ? getSchemaMessage(issue.lang) : null) ?? config?.message ?? getGlobalMessage(issue.lang) ?? issue.message;\n  return typeof message === \"function\" ? message(issue) : message;\n}\n\n// src/utils/isLuhnAlgo/isLuhnAlgo.ts\nvar NON_DIGIT_REGEX = /\\D/gu;\nfunction isLuhnAlgo(input) {\n  const number2 = input.replace(NON_DIGIT_REGEX, \"\");\n  let length2 = number2.length;\n  let bit = 1;\n  let sum = 0;\n  while (length2) {\n    const value2 = +number2[--length2];\n    bit ^= 1;\n    sum += bit ? [0, 2, 4, 6, 8, 1, 3, 5, 7, 9][value2] : value2;\n  }\n  return sum % 10 === 0;\n}\n\n// src/utils/isOfType/isOfType.ts\nfunction isOfType(type, object2) {\n  return object2.type === type;\n}\n\n// src/utils/schemaResult/schemaResult.ts\nfunction schemaResult(typed, output, issues) {\n  return { typed, output, issues };\n}\n\n// src/utils/stringify/stringify.ts\nfunction stringify(input) {\n  let type = typeof input;\n  if (type === \"object\") {\n    type = input ? Object.getPrototypeOf(input).constructor.name : \"null\";\n  }\n  return type === \"string\" ? `\"${input}\"` : type === \"number\" || type === \"bigint\" || type === \"boolean\" ? `${input}` : type;\n}\n\n// src/utils/pipeResult/utils/pipeIssue/pipeIssue.ts\nfunction pipeIssue(context, config, issue) {\n  const received = issue.received ?? stringify(issue.input);\n  const schemaIssue2 = {\n    reason: context.type,\n    context: issue.context.type,\n    expected: issue.context.expects,\n    received,\n    message: `Invalid ${issue.label}: ${issue.context.expects ? `Expected ${issue.context.expects} but r` : \"R\"}eceived ${received}`,\n    input: issue.input,\n    requirement: issue.context.requirement,\n    path: issue.path,\n    lang: config?.lang,\n    abortEarly: config?.abortEarly,\n    abortPipeEarly: config?.abortPipeEarly,\n    skipPipe: config?.skipPipe\n  };\n  schemaIssue2.message = i18n(\n    false,\n    issue.context,\n    issue.reference,\n    config,\n    schemaIssue2\n  );\n  return schemaIssue2;\n}\n\n// src/utils/pipeResult/pipeResult.ts\nfunction pipeResult(context, input, config, issues) {\n  if (context.pipe && !config?.skipPipe) {\n    for (const action of context.pipe) {\n      const result = action._parse(input);\n      if (result.issues) {\n        for (const actionIssue2 of result.issues) {\n          const schemaIssue2 = pipeIssue(context, config, actionIssue2);\n          issues ? issues.push(schemaIssue2) : issues = [schemaIssue2];\n        }\n        if (config?.abortEarly || config?.abortPipeEarly) {\n          break;\n        }\n      } else {\n        input = result.output;\n      }\n    }\n  }\n  return schemaResult(true, input, issues);\n}\n\n// src/utils/pipeResult/pipeResultAsync.ts\nasync function pipeResultAsync(context, input, config, issues) {\n  if (context.pipe && !config?.skipPipe) {\n    for (const action of context.pipe) {\n      const result = await action._parse(input);\n      if (result.issues) {\n        for (const actionIssue2 of result.issues) {\n          const schemaIssue2 = pipeIssue(context, config, actionIssue2);\n          issues ? issues.push(schemaIssue2) : issues = [schemaIssue2];\n        }\n        if (config?.abortEarly || config?.abortPipeEarly) {\n          break;\n        }\n      } else {\n        input = result.output;\n      }\n    }\n  }\n  return schemaResult(true, input, issues);\n}\n\n// src/utils/restAndDefaultArgs/restAndDefaultArgs.ts\nfunction restAndDefaultArgs(arg1, arg2, arg3) {\n  if (!arg1 || typeof arg1 === \"object\" && !Array.isArray(arg1)) {\n    const [error2, pipe2] = defaultArgs(arg2, arg3);\n    return [arg1, error2, pipe2];\n  }\n  const [error, pipe] = defaultArgs(\n    arg1,\n    arg2\n  );\n  return [void 0, error, pipe];\n}\n\n// src/utils/schemaIssue/schemaIssue.ts\nfunction schemaIssue(context, reference, input, config, other) {\n  const received = stringify(input);\n  const expected = other?.expected ?? context.expects;\n  const issue = {\n    reason: other?.reason ?? \"type\",\n    context: context.type,\n    expected,\n    received,\n    message: `Invalid type: Expected ${expected} but received ${received}`,\n    input,\n    path: other?.path,\n    issues: other?.issues,\n    lang: config?.lang,\n    abortEarly: config?.abortEarly,\n    abortPipeEarly: config?.abortPipeEarly,\n    skipPipe: config?.skipPipe\n  };\n  issue.message = i18n(true, context, reference, config, issue);\n  return { typed: false, output: input, issues: [issue] };\n}\n\n// src/methods/getFallback/getFallback.ts\nfunction getFallback(schema, info) {\n  return typeof schema.fallback === \"function\" ? schema.fallback(info) : schema.fallback;\n}\n\n// src/methods/getFallback/getFallbackAsync.ts\nasync function getFallbackAsync(schema, info) {\n  return typeof schema.fallback === \"function\" ? await schema.fallback(info) : schema.fallback;\n}\n\n// src/methods/fallback/fallback.ts\nfunction fallback(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    _parse(input, config) {\n      const result = schema._parse(input, config);\n      return result.issues ? schemaResult(\n        true,\n        getFallback(this, { input, issues: result.issues })\n      ) : result;\n    }\n  };\n}\n\n// src/methods/fallback/fallbackAsync.ts\nfunction fallbackAsync(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    async _parse(input, config) {\n      const result = await schema._parse(input, config);\n      return result.issues ? schemaResult(\n        true,\n        await getFallbackAsync(this, { input, issues: result.issues })\n      ) : result;\n    }\n  };\n}\n\n// src/methods/forward/forward.ts\nfunction forward(validation, pathList) {\n  return {\n    ...validation,\n    _parse(input) {\n      const result = validation._parse(input);\n      if (result.issues) {\n        for (const issue of result.issues) {\n          let pathInput = input;\n          for (const key of pathList) {\n            const pathValue = pathInput[key];\n            issue.input = pathValue;\n            const pathItem = {\n              type: \"unknown\",\n              origin: \"value\",\n              input: pathInput,\n              key,\n              value: pathValue\n            };\n            issue.path ? issue.path.push(pathItem) : issue.path = [pathItem];\n            if (!pathValue) {\n              break;\n            }\n            pathInput = pathValue;\n          }\n        }\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/forward/forwardAsync.ts\nfunction forwardAsync(validation, pathList) {\n  return {\n    ...validation,\n    async _parse(input) {\n      const result = await validation._parse(input);\n      if (result.issues) {\n        for (const issue of result.issues) {\n          let pathInput = input;\n          for (const key of pathList) {\n            const pathValue = pathInput[key];\n            issue.input = pathValue;\n            const pathItem = {\n              type: \"unknown\",\n              origin: \"value\",\n              input: pathInput,\n              key,\n              value: pathValue\n            };\n            issue.path ? issue.path.push(pathItem) : issue.path = [pathItem];\n            if (!pathValue) {\n              break;\n            }\n            pathInput = pathValue;\n          }\n        }\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/getDefault/getDefault.ts\nfunction getDefault(schema) {\n  return typeof schema.default === \"function\" ? schema.default() : schema.default;\n}\n\n// src/methods/getDefault/getDefaultAsync.ts\nasync function getDefaultAsync(schema) {\n  return typeof schema.default === \"function\" ? await schema.default() : schema.default;\n}\n\n// src/methods/getDefaults/getDefaults.ts\nfunction getDefaults(schema) {\n  if (schema.default !== void 0) {\n    return getDefault(schema);\n  }\n  if (isOfType(\"object\", schema)) {\n    return Object.fromEntries(\n      Object.entries(schema.entries).map(([key, value2]) => [\n        key,\n        getDefaults(value2)\n      ])\n    );\n  }\n  if (isOfType(\"tuple\", schema)) {\n    return schema.items.map(getDefaults);\n  }\n  return void 0;\n}\n\n// src/methods/getDefaults/getDefaultsAsync.ts\nasync function getDefaultsAsync(schema) {\n  if (schema.default !== void 0) {\n    return getDefaultAsync(schema);\n  }\n  if (isOfType(\"object\", schema)) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getDefaultsAsync(value2)\n        ])\n      )\n    );\n  }\n  if (isOfType(\"tuple\", schema)) {\n    return Promise.all(\n      schema.items.map(getDefaultsAsync)\n    );\n  }\n  return void 0;\n}\n\n// src/methods/getFallbacks/getFallbacks.ts\nfunction getFallbacks(schema) {\n  if (schema.fallback !== void 0) {\n    return getFallback(schema);\n  }\n  if (isOfType(\"object\", schema)) {\n    return Object.fromEntries(\n      Object.entries(schema.entries).map(([key, value2]) => [\n        key,\n        getFallbacks(value2)\n      ])\n    );\n  }\n  if (isOfType(\"tuple\", schema)) {\n    return schema.items.map(getFallbacks);\n  }\n  return void 0;\n}\n\n// src/methods/getFallbacks/getFallbacksAsync.ts\nasync function getFallbacksAsync(schema) {\n  if (schema.fallback !== void 0) {\n    return getFallbackAsync(schema);\n  }\n  if (isOfType(\"object\", schema)) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getFallbacksAsync(value2)\n        ])\n      )\n    );\n  }\n  if (isOfType(\"tuple\", schema)) {\n    return Promise.all(\n      schema.items.map(getFallbacksAsync)\n    );\n  }\n  return void 0;\n}\n\n// src/methods/is/is.ts\nfunction is(schema, input, config) {\n  return !schema._parse(input, {\n    abortEarly: true,\n    skipPipe: getGlobalConfig(config)?.skipPipe\n  }).issues;\n}\n\n// src/schemas/any/any.ts\nfunction any(pipe) {\n  return {\n    type: \"any\",\n    expects: \"any\",\n    async: false,\n    pipe,\n    _parse(input, config) {\n      return pipeResult(this, input, config);\n    }\n  };\n}\n\n// src/schemas/any/anyAsync.ts\nfunction anyAsync(pipe) {\n  return {\n    type: \"any\",\n    expects: \"any\",\n    async: true,\n    pipe,\n    async _parse(input, config) {\n      return pipeResultAsync(this, input, config);\n    }\n  };\n}\n\n// src/schemas/array/array.ts\nfunction array(item, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"array\",\n    expects: \"Array\",\n    async: false,\n    item,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (Array.isArray(input)) {\n        let typed = true;\n        let issues;\n        const output = [];\n        for (let key = 0; key < input.length; key++) {\n          const value2 = input[key];\n          const result = this.item._parse(value2, config);\n          if (result.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of result.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = result.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!result.typed) {\n            typed = false;\n          }\n          output.push(result.output);\n        }\n        if (typed) {\n          return pipeResult(this, output, config, issues);\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, array, input, config);\n    }\n  };\n}\n\n// src/schemas/array/arrayAsync.ts\nfunction arrayAsync(item, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"array\",\n    expects: \"Array\",\n    async: true,\n    item,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (Array.isArray(input)) {\n        let typed = true;\n        let issues;\n        const output = [];\n        await Promise.all(\n          input.map(async (value2, key) => {\n            if (!(config?.abortEarly && issues)) {\n              const result = await this.item._parse(value2, config);\n              if (!(config?.abortEarly && issues)) {\n                if (result.issues) {\n                  const pathItem = {\n                    type: \"array\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: value2\n                  };\n                  for (const issue of result.issues) {\n                    if (issue.path) {\n                      issue.path.unshift(pathItem);\n                    } else {\n                      issue.path = [pathItem];\n                    }\n                    issues?.push(issue);\n                  }\n                  if (!issues) {\n                    issues = result.issues;\n                  }\n                  if (config?.abortEarly) {\n                    typed = false;\n                    throw null;\n                  }\n                }\n                if (!result.typed) {\n                  typed = false;\n                }\n                output[key] = result.output;\n              }\n            }\n          })\n        ).catch(() => null);\n        if (typed) {\n          return pipeResultAsync(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, arrayAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/bigint/bigint.ts\nfunction bigint(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"bigint\",\n    expects: \"bigint\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (typeof input === \"bigint\") {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, bigint, input, config);\n    }\n  };\n}\n\n// src/schemas/bigint/bigintAsync.ts\nfunction bigintAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"bigint\",\n    expects: \"bigint\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (typeof input === \"bigint\") {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, bigintAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/blob/blob.ts\nfunction blob(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"blob\",\n    expects: \"Blob\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input instanceof Blob) {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, blob, input, config);\n    }\n  };\n}\n\n// src/schemas/blob/blobAsync.ts\nfunction blobAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"blob\",\n    expects: \"Blob\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input instanceof Blob) {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, blobAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/boolean/boolean.ts\nfunction boolean(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"boolean\",\n    expects: \"boolean\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (typeof input === \"boolean\") {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, boolean, input, config);\n    }\n  };\n}\n\n// src/schemas/boolean/booleanAsync.ts\nfunction booleanAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"boolean\",\n    expects: \"boolean\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (typeof input === \"boolean\") {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, booleanAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/date/date.ts\nfunction date(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"date\",\n    expects: \"Date\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input instanceof Date && !isNaN(input.getTime())) {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, date, input, config);\n    }\n  };\n}\n\n// src/schemas/date/dateAsync.ts\nfunction dateAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"date\",\n    expects: \"Date\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input instanceof Date && !isNaN(input.getTime())) {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, dateAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/enum/enum.ts\nfunction enum_(enum__, message) {\n  const values = Object.values(enum__);\n  return {\n    type: \"enum\",\n    expects: values.map(stringify).join(\" | \"),\n    async: false,\n    enum: enum__,\n    message,\n    _parse(input, config) {\n      if (values.includes(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, enum_, input, config);\n    }\n  };\n}\n\n// src/schemas/enum/enumAsync.ts\nfunction enumAsync(enum_2, message) {\n  const values = Object.values(enum_2);\n  return {\n    type: \"enum\",\n    expects: values.map(stringify).join(\" | \"),\n    async: true,\n    enum: enum_2,\n    message,\n    async _parse(input, config) {\n      if (values.includes(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, enumAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/instance/instance.ts\nfunction instance(class_, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"instance\",\n    expects: class_.name,\n    async: false,\n    class: class_,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input instanceof this.class) {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, instance, input, config);\n    }\n  };\n}\n\n// src/schemas/instance/instanceAsync.ts\nfunction instanceAsync(class_, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"instance\",\n    expects: class_.name,\n    async: true,\n    class: class_,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input instanceof this.class) {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, instanceAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/intersect/utils/mergeOutputs/mergeOutputs.ts\nfunction mergeOutputs(output1, output2) {\n  if (typeof output1 === typeof output2) {\n    if (output1 === output2 || output1 instanceof Date && output2 instanceof Date && +output1 === +output2) {\n      return { output: output1 };\n    }\n    if (Array.isArray(output1) && Array.isArray(output2)) {\n      if (output1.length === output2.length) {\n        const array2 = [];\n        for (let index = 0; index < output1.length; index++) {\n          const result = mergeOutputs(output1[index], output2[index]);\n          if (result.invalid) {\n            return result;\n          }\n          array2.push(result.output);\n        }\n        return { output: array2 };\n      }\n      return { invalid: true };\n    }\n    if (output1 && output2 && output1.constructor === Object && output2.constructor === Object) {\n      const object2 = { ...output1, ...output2 };\n      for (const key in output1) {\n        if (key in output2) {\n          const result = mergeOutputs(output1[key], output2[key]);\n          if (result.invalid) {\n            return result;\n          }\n          object2[key] = result.output;\n        }\n      }\n      return { output: object2 };\n    }\n  }\n  return { invalid: true };\n}\n\n// src/schemas/intersect/intersect.ts\nfunction intersect(options, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"intersect\",\n    expects: [...new Set(options.map((option) => option.expects))].join(\" & \"),\n    async: false,\n    options,\n    message,\n    pipe,\n    _parse(input, config) {\n      let typed = true;\n      let issues;\n      let output;\n      const outputs = [];\n      for (const schema of this.options) {\n        const result = schema._parse(input, config);\n        if (result.issues) {\n          if (issues) {\n            for (const issue of result.issues) {\n              issues.push(issue);\n            }\n          } else {\n            issues = result.issues;\n          }\n          if (config?.abortEarly) {\n            typed = false;\n            break;\n          }\n        }\n        if (!result.typed) {\n          typed = false;\n        }\n        outputs.push(result.output);\n      }\n      if (typed) {\n        output = outputs[0];\n        for (let index = 1; index < outputs.length; index++) {\n          const result = mergeOutputs(output, outputs[index]);\n          if (result.invalid) {\n            return schemaIssue(this, intersect, input, config);\n          }\n          output = result.output;\n        }\n        return pipeResult(this, output, config, issues);\n      }\n      return schemaResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/intersect/intersectAsync.ts\nfunction intersectAsync(options, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"intersect\",\n    expects: [...new Set(options.map((option) => option.expects))].join(\" & \"),\n    async: true,\n    options,\n    message,\n    pipe,\n    async _parse(input, config) {\n      let typed = true;\n      let issues;\n      let output;\n      const outputs = [];\n      await Promise.all(\n        this.options.map(async (schema) => {\n          if (!(config?.abortEarly && issues)) {\n            const result = await schema._parse(input, config);\n            if (!(config?.abortEarly && issues)) {\n              if (result.issues) {\n                if (issues) {\n                  for (const issue of result.issues) {\n                    issues.push(issue);\n                  }\n                } else {\n                  issues = result.issues;\n                }\n                if (config?.abortEarly) {\n                  typed = false;\n                  throw null;\n                }\n              }\n              if (!result.typed) {\n                typed = false;\n              }\n              outputs.push(result.output);\n            }\n          }\n        })\n      ).catch(() => null);\n      if (typed) {\n        output = outputs[0];\n        for (let index = 1; index < outputs.length; index++) {\n          const result = mergeOutputs(output, outputs[index]);\n          if (result.invalid) {\n            return schemaIssue(this, intersectAsync, input, config);\n          }\n          output = result.output;\n        }\n        return pipeResultAsync(this, output, config, issues);\n      }\n      return schemaResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/lazy/lazy.ts\nfunction lazy(getter) {\n  return {\n    type: \"lazy\",\n    expects: \"unknown\",\n    async: false,\n    getter,\n    _parse(input, config) {\n      return this.getter(input)._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/lazy/lazyAsync.ts\nfunction lazyAsync(getter) {\n  return {\n    type: \"lazy\",\n    expects: \"unknown\",\n    async: true,\n    getter,\n    async _parse(input, config) {\n      return (await this.getter(input))._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/literal/literal.ts\nfunction literal(literal_, message) {\n  return {\n    type: \"literal\",\n    expects: stringify(literal_),\n    async: false,\n    literal: literal_,\n    message,\n    _parse(input, config) {\n      if (input === this.literal) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, literal, input, config);\n    }\n  };\n}\n\n// src/schemas/literal/literalAsync.ts\nfunction literalAsync(literal2, message) {\n  return {\n    type: \"literal\",\n    expects: stringify(literal2),\n    async: true,\n    literal: literal2,\n    message,\n    async _parse(input, config) {\n      if (input === this.literal) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, literalAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/map/map.ts\nfunction map(key, value2, arg3, arg4) {\n  const [message, pipe] = defaultArgs(arg3, arg4);\n  return {\n    type: \"map\",\n    expects: \"Map\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input instanceof Map) {\n        let typed = true;\n        let issues;\n        const output = /* @__PURE__ */ new Map();\n        for (const [inputKey, inputValue] of input.entries()) {\n          let pathItem;\n          const keyResult = this.key._parse(inputKey, config);\n          if (keyResult.issues) {\n            pathItem = {\n              type: \"map\",\n              origin: \"key\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of keyResult.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = keyResult.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          const valueResult = this.value._parse(inputValue, config);\n          if (valueResult.issues) {\n            pathItem = pathItem ?? {\n              type: \"map\",\n              origin: \"value\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of valueResult.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = valueResult.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!keyResult.typed || !valueResult.typed) {\n            typed = false;\n          }\n          output.set(keyResult.output, valueResult.output);\n        }\n        if (typed) {\n          return pipeResult(this, output, config, issues);\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, map, input, config);\n    }\n  };\n}\n\n// src/schemas/map/mapAsync.ts\nfunction mapAsync(key, value2, arg3, arg4) {\n  const [message, pipe] = defaultArgs(arg3, arg4);\n  return {\n    type: \"map\",\n    expects: \"Map\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input instanceof Map) {\n        let typed = true;\n        let issues;\n        const output = /* @__PURE__ */ new Map();\n        await Promise.all(\n          Array.from(input.entries()).map(async ([inputKey, inputValue]) => {\n            let pathItem;\n            const [keyResult, valueResult] = await Promise.all(\n              [\n                { schema: this.key, value: inputKey, origin: \"key\" },\n                { schema: this.value, value: inputValue, origin: \"value\" }\n              ].map(async ({ schema, value: value3, origin }) => {\n                if (!(config?.abortEarly && issues)) {\n                  const result = await schema._parse(value3, config);\n                  if (!(config?.abortEarly && issues)) {\n                    if (result.issues) {\n                      pathItem = pathItem ?? {\n                        type: \"map\",\n                        origin,\n                        input,\n                        key: inputKey,\n                        value: inputValue\n                      };\n                      for (const issue of result.issues) {\n                        if (issue.path) {\n                          issue.path.unshift(pathItem);\n                        } else {\n                          issue.path = [pathItem];\n                        }\n                        issues?.push(issue);\n                      }\n                      if (!issues) {\n                        issues = result.issues;\n                      }\n                      if (config?.abortEarly) {\n                        throw null;\n                      }\n                    }\n                    return result;\n                  }\n                }\n              })\n            ).catch(() => []);\n            if (!keyResult?.typed || !valueResult?.typed) {\n              typed = false;\n            }\n            if (keyResult && valueResult) {\n              output.set(keyResult.output, valueResult.output);\n            }\n          })\n        );\n        if (typed) {\n          return pipeResultAsync(this, output, config, issues);\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, mapAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/nan/nan.ts\nfunction nan(message) {\n  return {\n    type: \"nan\",\n    expects: \"NaN\",\n    async: false,\n    message,\n    _parse(input, config) {\n      if (Number.isNaN(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, nan, input, config);\n    }\n  };\n}\n\n// src/schemas/nan/nanAsync.ts\nfunction nanAsync(message) {\n  return {\n    type: \"nan\",\n    expects: \"NaN\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      if (Number.isNaN(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, nanAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/never/never.ts\nfunction never(message) {\n  return {\n    type: \"never\",\n    expects: \"never\",\n    async: false,\n    message,\n    _parse(input, config) {\n      return schemaIssue(this, never, input, config);\n    }\n  };\n}\n\n// src/schemas/never/neverAsync.ts\nfunction neverAsync(message) {\n  return {\n    type: \"never\",\n    expects: \"never\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      return schemaIssue(this, neverAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullable.ts\nfunction nonNullable(wrapped, message) {\n  return {\n    type: \"non_nullable\",\n    expects: \"!null\",\n    async: false,\n    wrapped,\n    message,\n    _parse(input, config) {\n      if (input === null) {\n        return schemaIssue(this, nonNullable, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullableAsync.ts\nfunction nonNullableAsync(wrapped, message) {\n  return {\n    type: \"non_nullable\",\n    expects: \"!null\",\n    async: true,\n    wrapped,\n    message,\n    async _parse(input, config) {\n      if (input === null) {\n        return schemaIssue(this, nonNullableAsync, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullish.ts\nfunction nonNullish(wrapped, message) {\n  return {\n    type: \"non_nullish\",\n    expects: \"!null & !undefined\",\n    async: false,\n    wrapped,\n    message,\n    _parse(input, config) {\n      if (input === null || input === void 0) {\n        return schemaIssue(this, nonNullish, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullishAsync.ts\nfunction nonNullishAsync(wrapped, message) {\n  return {\n    type: \"non_nullish\",\n    expects: \"!null & !undefined\",\n    async: true,\n    wrapped,\n    message,\n    async _parse(input, config) {\n      if (input === null || input === void 0) {\n        return schemaIssue(this, nonNullishAsync, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptional.ts\nfunction nonOptional(wrapped, message) {\n  return {\n    type: \"non_optional\",\n    expects: \"!undefined\",\n    async: false,\n    wrapped,\n    message,\n    _parse(input, config) {\n      if (input === void 0) {\n        return schemaIssue(this, nonOptional, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptionalAsync.ts\nfunction nonOptionalAsync(wrapped, message) {\n  return {\n    type: \"non_optional\",\n    expects: \"!undefined\",\n    async: true,\n    wrapped,\n    message,\n    async _parse(input, config) {\n      if (input === void 0) {\n        return schemaIssue(this, nonOptionalAsync, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nullable/nullable.ts\nfunction nullable(wrapped, default_) {\n  return {\n    type: \"nullable\",\n    expects: `${wrapped.expects} | null`,\n    async: false,\n    wrapped,\n    default: default_,\n    _parse(input, config) {\n      if (input === null) {\n        const override = getDefault(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nullable/nullableAsync.ts\nfunction nullableAsync(wrapped, default_) {\n  return {\n    type: \"nullable\",\n    expects: `${wrapped.expects} | null`,\n    async: true,\n    wrapped,\n    default: default_,\n    async _parse(input, config) {\n      if (input === null) {\n        const override = await getDefaultAsync(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nullish/nullish.ts\nfunction nullish(wrapped, default_) {\n  return {\n    type: \"nullish\",\n    expects: `${wrapped.expects} | null | undefined`,\n    async: false,\n    wrapped,\n    default: default_,\n    _parse(input, config) {\n      if (input === null || input === void 0) {\n        const override = getDefault(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nullish/nullishAsync.ts\nfunction nullishAsync(wrapped, default_) {\n  return {\n    type: \"nullish\",\n    expects: `${wrapped.expects} | null | undefined`,\n    async: true,\n    wrapped,\n    default: default_,\n    async _parse(input, config) {\n      if (input === null || input === void 0) {\n        const override = await getDefaultAsync(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/null/null.ts\nfunction null_(message) {\n  return {\n    type: \"null\",\n    expects: \"null\",\n    async: false,\n    message,\n    _parse(input, config) {\n      if (input === null) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, null_, input, config);\n    }\n  };\n}\n\n// src/schemas/null/nullAsync.ts\nfunction nullAsync(message) {\n  return {\n    type: \"null\",\n    expects: \"null\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      if (input === null) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, nullAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/number/number.ts\nfunction number(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"number\",\n    expects: \"number\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (typeof input === \"number\" && !isNaN(input)) {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, number, input, config);\n    }\n  };\n}\n\n// src/schemas/number/numberAsync.ts\nfunction numberAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"number\",\n    expects: \"number\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (typeof input === \"number\" && !isNaN(input)) {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, numberAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/object/object.ts\nfunction object(entries, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  let cachedEntries;\n  return {\n    type: \"object\",\n    expects: \"Object\",\n    async: false,\n    entries,\n    rest,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        cachedEntries = cachedEntries ?? Object.entries(this.entries);\n        let typed = true;\n        let issues;\n        const output = {};\n        for (const [key, schema] of cachedEntries) {\n          const value2 = input[key];\n          const result = schema._parse(value2, config);\n          if (result.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of result.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = result.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!result.typed) {\n            typed = false;\n          }\n          if (result.output !== void 0 || key in input) {\n            output[key] = result.output;\n          }\n        }\n        if (this.rest && !(config?.abortEarly && issues)) {\n          for (const key in input) {\n            if (!(key in this.entries)) {\n              const value2 = input[key];\n              const result = this.rest._parse(value2, config);\n              if (result.issues) {\n                const pathItem = {\n                  type: \"object\",\n                  origin: \"value\",\n                  input,\n                  key,\n                  value: value2\n                };\n                for (const issue of result.issues) {\n                  if (issue.path) {\n                    issue.path.unshift(pathItem);\n                  } else {\n                    issue.path = [pathItem];\n                  }\n                  issues?.push(issue);\n                }\n                if (!issues) {\n                  issues = result.issues;\n                }\n                if (config?.abortEarly) {\n                  typed = false;\n                  break;\n                }\n              }\n              if (!result.typed) {\n                typed = false;\n              }\n              output[key] = result.output;\n            }\n          }\n        }\n        if (typed) {\n          return pipeResult(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, object, input, config);\n    }\n  };\n}\n\n// src/schemas/object/objectAsync.ts\nfunction objectAsync(entries, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  let cachedEntries;\n  return {\n    type: \"object\",\n    expects: \"Object\",\n    async: true,\n    entries,\n    rest,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        cachedEntries = cachedEntries ?? Object.entries(this.entries);\n        let typed = true;\n        let issues;\n        const output = {};\n        await Promise.all([\n          Promise.all(\n            cachedEntries.map(async ([key, schema]) => {\n              if (!(config?.abortEarly && issues)) {\n                const value2 = input[key];\n                const result = await schema._parse(value2, config);\n                if (!(config?.abortEarly && issues)) {\n                  if (result.issues) {\n                    const pathItem = {\n                      type: \"object\",\n                      origin: \"value\",\n                      input,\n                      key,\n                      value: value2\n                    };\n                    for (const issue of result.issues) {\n                      if (issue.path) {\n                        issue.path.unshift(pathItem);\n                      } else {\n                        issue.path = [pathItem];\n                      }\n                      issues?.push(issue);\n                    }\n                    if (!issues) {\n                      issues = result.issues;\n                    }\n                    if (config?.abortEarly) {\n                      typed = false;\n                      throw null;\n                    }\n                  }\n                  if (!result.typed) {\n                    typed = false;\n                  }\n                  if (result.output !== void 0 || key in input) {\n                    output[key] = result.output;\n                  }\n                }\n              }\n            })\n          ),\n          this.rest && Promise.all(\n            Object.entries(input).map(async ([key, value2]) => {\n              if (!(config?.abortEarly && issues)) {\n                if (!(key in this.entries)) {\n                  const result = await this.rest._parse(value2, config);\n                  if (!(config?.abortEarly && issues)) {\n                    if (result.issues) {\n                      const pathItem = {\n                        type: \"object\",\n                        origin: \"value\",\n                        input,\n                        key,\n                        value: value2\n                      };\n                      for (const issue of result.issues) {\n                        if (issue.path) {\n                          issue.path.unshift(pathItem);\n                        } else {\n                          issue.path = [pathItem];\n                        }\n                        issues?.push(issue);\n                      }\n                      if (!issues) {\n                        issues = result.issues;\n                      }\n                      if (config?.abortEarly) {\n                        typed = false;\n                        throw null;\n                      }\n                    }\n                    if (!result.typed) {\n                      typed = false;\n                    }\n                    output[key] = result.output;\n                  }\n                }\n              }\n            })\n          )\n        ]).catch(() => null);\n        if (typed) {\n          return pipeResultAsync(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, objectAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/optional/optional.ts\nfunction optional(wrapped, default_) {\n  return {\n    type: \"optional\",\n    expects: `${wrapped.expects} | undefined`,\n    async: false,\n    wrapped,\n    default: default_,\n    _parse(input, config) {\n      if (input === void 0) {\n        const override = getDefault(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/optional/optionalAsync.ts\nfunction optionalAsync(wrapped, default_) {\n  return {\n    type: \"optional\",\n    expects: `${wrapped.expects} | undefined`,\n    async: true,\n    wrapped,\n    default: default_,\n    async _parse(input, config) {\n      if (input === void 0) {\n        const override = await getDefaultAsync(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/picklist/picklist.ts\nfunction picklist(options, message) {\n  return {\n    type: \"picklist\",\n    expects: options.map(stringify).join(\" | \"),\n    async: false,\n    options,\n    message,\n    _parse(input, config) {\n      if (this.options.includes(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, picklist, input, config);\n    }\n  };\n}\n\n// src/schemas/picklist/picklistAsync.ts\nfunction picklistAsync(options, message) {\n  return {\n    type: \"picklist\",\n    expects: options.map(stringify).join(\" | \"),\n    async: true,\n    options,\n    message,\n    async _parse(input, config) {\n      if (this.options.includes(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, picklistAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/string/string.ts\nfunction string(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"string\",\n    expects: \"string\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (typeof input === \"string\") {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, string, input, config);\n    }\n  };\n}\n\n// src/schemas/string/stringAsync.ts\nfunction stringAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"string\",\n    expects: \"string\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (typeof input === \"string\") {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, stringAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/record/utils/recordArgs/recordArgs.ts\nfunction recordArgs(arg1, arg2, arg3, arg4) {\n  if (typeof arg2 === \"object\" && !Array.isArray(arg2)) {\n    const [message2, pipe2] = defaultArgs(arg3, arg4);\n    return [arg1, arg2, message2, pipe2];\n  }\n  const [message, pipe] = defaultArgs(\n    arg2,\n    arg3\n  );\n  return [string(), arg1, message, pipe];\n}\n\n// src/schemas/record/values.ts\nvar BLOCKED_KEYS = [\"__proto__\", \"prototype\", \"constructor\"];\n\n// src/schemas/record/record.ts\nfunction record(arg1, arg2, arg3, arg4) {\n  const [key, value2, message, pipe] = recordArgs(arg1, arg2, arg3, arg4);\n  return {\n    type: \"record\",\n    expects: \"Object\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        let typed = true;\n        let issues;\n        const output = {};\n        for (const [inputKey, inputValue] of Object.entries(input)) {\n          if (!BLOCKED_KEYS.includes(inputKey)) {\n            let pathItem;\n            const keyResult = this.key._parse(inputKey, config);\n            if (keyResult.issues) {\n              pathItem = {\n                type: \"record\",\n                origin: \"key\",\n                input,\n                key: inputKey,\n                value: inputValue\n              };\n              for (const issue of keyResult.issues) {\n                issue.path = [pathItem];\n                issues?.push(issue);\n              }\n              if (!issues) {\n                issues = keyResult.issues;\n              }\n              if (config?.abortEarly) {\n                typed = false;\n                break;\n              }\n            }\n            const valueResult = this.value._parse(inputValue, config);\n            if (valueResult.issues) {\n              pathItem = pathItem ?? {\n                type: \"record\",\n                origin: \"value\",\n                input,\n                key: inputKey,\n                value: inputValue\n              };\n              for (const issue of valueResult.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                issues?.push(issue);\n              }\n              if (!issues) {\n                issues = valueResult.issues;\n              }\n              if (config?.abortEarly) {\n                typed = false;\n                break;\n              }\n            }\n            if (!keyResult.typed || !valueResult.typed) {\n              typed = false;\n            }\n            if (keyResult.typed) {\n              output[keyResult.output] = valueResult.output;\n            }\n          }\n        }\n        if (typed) {\n          return pipeResult(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, record, input, config);\n    }\n  };\n}\n\n// src/schemas/record/recordAsync.ts\nfunction recordAsync(arg1, arg2, arg3, arg4) {\n  const [key, value2, message, pipe] = recordArgs(arg1, arg2, arg3, arg4);\n  return {\n    type: \"record\",\n    expects: \"Object\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        let typed = true;\n        let issues;\n        const output = {};\n        await Promise.all(\n          // Note: `Object.entries(...)` converts each key to a string\n          Object.entries(input).map(async ([inputKey, inputValue]) => {\n            if (!BLOCKED_KEYS.includes(inputKey)) {\n              let pathItem;\n              const [keyResult, valueResult] = await Promise.all(\n                [\n                  { schema: this.key, value: inputKey, origin: \"key\" },\n                  { schema: this.value, value: inputValue, origin: \"value\" }\n                ].map(async ({ schema, value: value3, origin }) => {\n                  if (!(config?.abortEarly && issues)) {\n                    const result = await schema._parse(value3, config);\n                    if (!(config?.abortEarly && issues)) {\n                      if (result.issues) {\n                        pathItem = pathItem ?? {\n                          type: \"record\",\n                          origin,\n                          input,\n                          key: inputKey,\n                          value: inputValue\n                        };\n                        for (const issue of result.issues) {\n                          if (issue.path) {\n                            issue.path.unshift(pathItem);\n                          } else {\n                            issue.path = [pathItem];\n                          }\n                          issues?.push(issue);\n                        }\n                        if (!issues) {\n                          issues = result.issues;\n                        }\n                        if (config?.abortEarly) {\n                          throw null;\n                        }\n                      }\n                      return result;\n                    }\n                  }\n                })\n              ).catch(() => []);\n              if (!keyResult?.typed || !valueResult?.typed) {\n                typed = false;\n              }\n              if (keyResult?.typed && valueResult) {\n                output[keyResult.output] = valueResult.output;\n              }\n            }\n          })\n        );\n        if (typed) {\n          return pipeResultAsync(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, recordAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/set/set.ts\nfunction set(value2, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"set\",\n    expects: \"Set\",\n    async: false,\n    value: value2,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input instanceof Set) {\n        let key = 0;\n        let typed = true;\n        let issues;\n        const output = /* @__PURE__ */ new Set();\n        for (const inputValue of input) {\n          const result = this.value._parse(inputValue, config);\n          if (result.issues) {\n            const pathItem = {\n              type: \"set\",\n              origin: \"value\",\n              input,\n              key,\n              value: inputValue\n            };\n            for (const issue of result.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = result.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!result.typed) {\n            typed = false;\n          }\n          output.add(result.output);\n          key++;\n        }\n        if (typed) {\n          return pipeResult(this, output, config, issues);\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, set, input, config);\n    }\n  };\n}\n\n// src/schemas/set/setAsync.ts\nfunction setAsync(value2, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"set\",\n    expects: \"Set\",\n    async: true,\n    value: value2,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input instanceof Set) {\n        let typed = true;\n        let issues;\n        const output = /* @__PURE__ */ new Set();\n        await Promise.all(\n          Array.from(input.values()).map(async (inputValue, key) => {\n            if (!(config?.abortEarly && issues)) {\n              const result = await this.value._parse(inputValue, config);\n              if (!(config?.abortEarly && issues)) {\n                if (result.issues) {\n                  const pathItem = {\n                    type: \"set\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: inputValue\n                  };\n                  for (const issue of result.issues) {\n                    if (issue.path) {\n                      issue.path.unshift(pathItem);\n                    } else {\n                      issue.path = [pathItem];\n                    }\n                    issues?.push(issue);\n                  }\n                  if (!issues) {\n                    issues = result.issues;\n                  }\n                  if (config?.abortEarly) {\n                    typed = false;\n                    throw null;\n                  }\n                }\n                if (!result.typed) {\n                  typed = false;\n                }\n                output.add(result.output);\n              }\n            }\n          })\n        ).catch(() => null);\n        if (typed) {\n          return pipeResultAsync(this, output, config, issues);\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, setAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/special/special.ts\nfunction special(check, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"special\",\n    expects: \"unknown\",\n    async: false,\n    check,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (this.check(input)) {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, special, input, config);\n    }\n  };\n}\n\n// src/schemas/special/specialAsync.ts\nfunction specialAsync(check, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"special\",\n    expects: \"unknown\",\n    async: true,\n    check,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (await this.check(input)) {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, specialAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/symbol/symbol.ts\nfunction symbol(message) {\n  return {\n    type: \"symbol\",\n    expects: \"symbol\",\n    async: false,\n    message,\n    _parse(input, config) {\n      if (typeof input === \"symbol\") {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, symbol, input, config);\n    }\n  };\n}\n\n// src/schemas/symbol/symbolAsync.ts\nfunction symbolAsync(message) {\n  return {\n    type: \"symbol\",\n    expects: \"symbol\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      if (typeof input === \"symbol\") {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, symbolAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/tuple/tuple.ts\nfunction tuple(items, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return {\n    type: \"tuple\",\n    expects: \"Array\",\n    async: false,\n    items,\n    rest,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (Array.isArray(input)) {\n        let typed = true;\n        let issues;\n        const output = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const result = this.items[key]._parse(value2, config);\n          if (result.issues) {\n            const pathItem = {\n              type: \"tuple\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of result.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = result.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!result.typed) {\n            typed = false;\n          }\n          output[key] = result.output;\n        }\n        if (this.rest && !(config?.abortEarly && issues)) {\n          for (let key = this.items.length; key < input.length; key++) {\n            const value2 = input[key];\n            const result = this.rest._parse(value2, config);\n            if (result.issues) {\n              const pathItem = {\n                type: \"tuple\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of result.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                issues?.push(issue);\n              }\n              if (!issues) {\n                issues = result.issues;\n              }\n              if (config?.abortEarly) {\n                typed = false;\n                break;\n              }\n            }\n            if (!result.typed) {\n              typed = false;\n            }\n            output[key] = result.output;\n          }\n        }\n        if (typed) {\n          return pipeResult(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, tuple, input, config);\n    }\n  };\n}\n\n// src/schemas/tuple/tupleAsync.ts\nfunction tupleAsync(items, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return {\n    type: \"tuple\",\n    expects: \"Array\",\n    async: true,\n    items,\n    rest,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (Array.isArray(input)) {\n        let typed = true;\n        let issues;\n        const output = [];\n        await Promise.all([\n          // Parse schema of each tuple item\n          Promise.all(\n            this.items.map(async (schema, key) => {\n              if (!(config?.abortEarly && issues)) {\n                const value2 = input[key];\n                const result = await schema._parse(value2, config);\n                if (!(config?.abortEarly && issues)) {\n                  if (result.issues) {\n                    const pathItem = {\n                      type: \"tuple\",\n                      origin: \"value\",\n                      input,\n                      key,\n                      value: value2\n                    };\n                    for (const issue of result.issues) {\n                      if (issue.path) {\n                        issue.path.unshift(pathItem);\n                      } else {\n                        issue.path = [pathItem];\n                      }\n                      issues?.push(issue);\n                    }\n                    if (!issues) {\n                      issues = result.issues;\n                    }\n                    if (config?.abortEarly) {\n                      typed = false;\n                      throw null;\n                    }\n                  }\n                  if (!result.typed) {\n                    typed = false;\n                  }\n                  output[key] = result.output;\n                }\n              }\n            })\n          ),\n          // If necessary parse schema of each rest item\n          this.rest && Promise.all(\n            input.slice(this.items.length).map(async (value2, index) => {\n              if (!(config?.abortEarly && issues)) {\n                const key = this.items.length + index;\n                const result = await this.rest._parse(value2, config);\n                if (!(config?.abortEarly && issues)) {\n                  if (result.issues) {\n                    const pathItem = {\n                      type: \"tuple\",\n                      origin: \"value\",\n                      input,\n                      key,\n                      value: value2\n                    };\n                    for (const issue of result.issues) {\n                      if (issue.path) {\n                        issue.path.unshift(pathItem);\n                      } else {\n                        issue.path = [pathItem];\n                      }\n                      issues?.push(issue);\n                    }\n                    if (!issues) {\n                      issues = result.issues;\n                    }\n                    if (config?.abortEarly) {\n                      typed = false;\n                      throw null;\n                    }\n                  }\n                  if (!result.typed) {\n                    typed = false;\n                  }\n                  output[key] = result.output;\n                }\n              }\n            })\n          )\n        ]).catch(() => null);\n        if (typed) {\n          return pipeResultAsync(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, tupleAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/undefined/undefined.ts\nfunction undefined_(message) {\n  return {\n    type: \"undefined\",\n    expects: \"undefined\",\n    async: false,\n    message,\n    _parse(input, config) {\n      if (input === void 0) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, undefined_, input, config);\n    }\n  };\n}\n\n// src/schemas/undefined/undefinedAsync.ts\nfunction undefinedAsync(message) {\n  return {\n    type: \"undefined\",\n    expects: \"undefined\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      if (input === void 0) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, undefinedAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/union/utils/subissues/subissues.ts\nfunction subissues(results) {\n  let issues;\n  if (results) {\n    for (const result of results) {\n      if (issues) {\n        for (const issue of result.issues) {\n          issues.push(issue);\n        }\n      } else {\n        issues = result.issues;\n      }\n    }\n  }\n  return issues;\n}\n\n// src/schemas/union/union.ts\nfunction union(options, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"union\",\n    expects: [...new Set(options.map((option) => option.expects))].join(\" | \"),\n    async: false,\n    options,\n    message,\n    pipe,\n    _parse(input, config) {\n      let validResult;\n      let untypedResults;\n      let typedResults;\n      for (const schema of this.options) {\n        const result = schema._parse(input, config);\n        if (result.typed) {\n          if (!result.issues) {\n            validResult = result;\n            break;\n          } else {\n            typedResults ? typedResults.push(result) : typedResults = [result];\n          }\n        } else {\n          untypedResults ? untypedResults.push(result) : untypedResults = [result];\n        }\n      }\n      if (validResult) {\n        return pipeResult(this, validResult.output, config);\n      }\n      if (typedResults?.length) {\n        const firstResult = typedResults[0];\n        return pipeResult(\n          this,\n          firstResult.output,\n          config,\n          // Hint: If there is more than one typed result, we use a general\n          // union issue with subissues because the issues could contradict\n          // each other.\n          typedResults.length === 1 ? firstResult.issues : schemaIssue(this, union, input, config, {\n            reason: \"union\",\n            issues: subissues(typedResults)\n          }).issues\n        );\n      }\n      if (untypedResults?.length === 1) {\n        return untypedResults[0];\n      }\n      return schemaIssue(this, union, input, config, {\n        issues: subissues(untypedResults)\n      });\n    }\n  };\n}\n\n// src/schemas/union/unionAsync.ts\nfunction unionAsync(options, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"union\",\n    expects: [...new Set(options.map((option) => option.expects))].join(\" | \"),\n    async: true,\n    options,\n    message,\n    pipe,\n    async _parse(input, config) {\n      let validResult;\n      let untypedResults;\n      let typedResults;\n      for (const schema of this.options) {\n        const result = await schema._parse(input, config);\n        if (result.typed) {\n          if (!result.issues) {\n            validResult = result;\n            break;\n          } else {\n            typedResults ? typedResults.push(result) : typedResults = [result];\n          }\n        } else {\n          untypedResults ? untypedResults.push(result) : untypedResults = [result];\n        }\n      }\n      if (validResult) {\n        return pipeResultAsync(this, validResult.output, config);\n      }\n      if (typedResults?.length) {\n        const firstResult = typedResults[0];\n        return pipeResultAsync(\n          this,\n          firstResult.output,\n          config,\n          // Hint: If there is more than one typed result, we use a general\n          // union issue with subissues because the issues could contradict\n          // each other.\n          typedResults.length === 1 ? firstResult.issues : schemaIssue(this, unionAsync, input, config, {\n            reason: \"union\",\n            issues: subissues(typedResults)\n          }).issues\n        );\n      }\n      if (untypedResults?.length === 1) {\n        return untypedResults[0];\n      }\n      return schemaIssue(this, unionAsync, input, config, {\n        issues: subissues(untypedResults)\n      });\n    }\n  };\n}\n\n// src/schemas/unknown/unknown.ts\nfunction unknown(pipe) {\n  return {\n    type: \"unknown\",\n    expects: \"unknown\",\n    async: false,\n    pipe,\n    _parse(input, config) {\n      return pipeResult(this, input, config);\n    }\n  };\n}\n\n// src/schemas/unknown/unknownAsync.ts\nfunction unknownAsync(pipe) {\n  return {\n    type: \"unknown\",\n    expects: \"unknown\",\n    async: true,\n    pipe,\n    async _parse(input, config) {\n      return pipeResultAsync(this, input, config);\n    }\n  };\n}\n\n// src/schemas/variant/variant.ts\nfunction variant(key, options, arg3, arg4) {\n  const [message, pipe] = defaultArgs(arg3, arg4);\n  let cachedExpectedKey;\n  return {\n    type: \"variant\",\n    expects: \"Object\",\n    async: false,\n    key,\n    options,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        if (this.key in input || !cachedExpectedKey) {\n          let expectedKey;\n          let variantResult;\n          const parseOptions = (options2) => {\n            for (const schema of options2) {\n              if (schema.type === \"object\") {\n                const keySchema = schema.entries[this.key];\n                const keyResult = keySchema._parse(\n                  input[this.key],\n                  config\n                );\n                if (!cachedExpectedKey) {\n                  expectedKey ? expectedKey.push(keySchema.expects) : expectedKey = [keySchema.expects];\n                }\n                if (!keyResult.issues) {\n                  const dataResult = schema._parse(input, config);\n                  if (!dataResult.issues) {\n                    variantResult = dataResult;\n                    break;\n                  }\n                  if (!variantResult || !variantResult.typed && dataResult.typed) {\n                    variantResult = dataResult;\n                  }\n                }\n              } else if (schema.type === \"variant\") {\n                parseOptions(schema.options);\n                if (variantResult && !variantResult.issues) {\n                  break;\n                }\n              }\n            }\n          };\n          parseOptions(this.options);\n          cachedExpectedKey = cachedExpectedKey || [...new Set(expectedKey)].join(\" | \");\n          if (variantResult) {\n            if (variantResult.typed) {\n              return pipeResult(\n                this,\n                variantResult.output,\n                config,\n                variantResult.issues\n              );\n            }\n            return variantResult;\n          }\n        }\n        const value2 = input[this.key];\n        return schemaIssue(this, variant, value2, config, {\n          expected: cachedExpectedKey,\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: this.key,\n              value: value2\n            }\n          ]\n        });\n      }\n      return schemaIssue(this, variant, input, config);\n    }\n  };\n}\n\n// src/schemas/variant/variantAsync.ts\nfunction variantAsync(key, options, arg3, arg4) {\n  const [message, pipe] = defaultArgs(arg3, arg4);\n  let cachedExpectedKey;\n  return {\n    type: \"variant\",\n    expects: \"Object\",\n    async: true,\n    key,\n    options,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        if (this.key in input || !cachedExpectedKey) {\n          let expectedKey;\n          let variantResult;\n          const parseOptions = async (options2) => {\n            for (const schema of options2) {\n              if (schema.type === \"object\") {\n                const keySchema = schema.entries[this.key];\n                const keyResult = await keySchema._parse(\n                  input[this.key],\n                  config\n                );\n                if (!cachedExpectedKey) {\n                  expectedKey ? expectedKey.push(keySchema.expects) : expectedKey = [keySchema.expects];\n                }\n                if (!keyResult.issues) {\n                  const dataResult = await schema._parse(input, config);\n                  if (!dataResult.issues) {\n                    variantResult = dataResult;\n                    break;\n                  }\n                  if (!variantResult || !variantResult.typed && dataResult.typed) {\n                    variantResult = dataResult;\n                  }\n                }\n              } else if (schema.type === \"variant\") {\n                await parseOptions(schema.options);\n                if (variantResult && !variantResult.issues) {\n                  break;\n                }\n              }\n            }\n          };\n          await parseOptions(this.options);\n          cachedExpectedKey = cachedExpectedKey || [...new Set(expectedKey)].join(\" | \");\n          if (variantResult) {\n            if (variantResult.typed) {\n              return pipeResultAsync(\n                this,\n                variantResult.output,\n                config,\n                variantResult.issues\n              );\n            }\n            return variantResult;\n          }\n        }\n        const value2 = input[this.key];\n        return schemaIssue(this, variantAsync, value2, config, {\n          expected: cachedExpectedKey,\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: this.key,\n              value: value2\n            }\n          ]\n        });\n      }\n      return schemaIssue(this, variantAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/void/void.ts\nfunction void_(message) {\n  return {\n    type: \"void\",\n    expects: \"void\",\n    async: false,\n    message,\n    _parse(input, config) {\n      if (input === void 0) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, void_, input, config);\n    }\n  };\n}\n\n// src/schemas/void/voidAsync.ts\nfunction voidAsync(message) {\n  return {\n    type: \"void\",\n    expects: \"void\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      if (input === void 0) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, voidAsync, input, config);\n    }\n  };\n}\n\n// src/methods/keyof/keyof.ts\nfunction keyof(schema) {\n  return picklist(\n    Object.keys(schema.entries)\n  );\n}\n\n// src/methods/merge/merge.ts\nfunction merge(schemas, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return object(\n    schemas.reduce(\n      (entries, schema) => ({ ...entries, ...schema.entries }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/merge/mergeAsync.ts\nfunction mergeAsync(schemas, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return objectAsync(\n    schemas.reduce(\n      (entries, schema) => ({ ...entries, ...schema.entries }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/omit/omit.ts\nfunction omit(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? entries : { ...entries, [key]: schema2 },\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/omit/omitAsync.ts\nfunction omitAsync(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? entries : { ...entries, [key]: schema2 },\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/parse/parse.ts\nfunction parse(schema, input, config) {\n  const result = schema._parse(input, getGlobalConfig(config));\n  if (result.issues) {\n    throw new ValiError(result.issues);\n  }\n  return result.output;\n}\n\n// src/methods/parse/parseAsync.ts\nasync function parseAsync(schema, input, config) {\n  const result = await schema._parse(input, getGlobalConfig(config));\n  if (result.issues) {\n    throw new ValiError(result.issues);\n  }\n  return result.output;\n}\n\n// src/methods/partial/partial.ts\nfunction partial(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: optional(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/partial/partialAsync.ts\nfunction partialAsync(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: optionalAsync(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/pick/pick.ts\nfunction pick(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? { ...entries, [key]: schema2 } : entries,\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/pick/pickAsync.ts\nfunction pickAsync(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? { ...entries, [key]: schema2 } : entries,\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/required/required.ts\nfunction required(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: nonOptional(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/required/requiredAsync.ts\nfunction requiredAsync(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: nonOptionalAsync(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/safeParse/safeParse.ts\nfunction safeParse(schema, input, config) {\n  const result = schema._parse(input, getGlobalConfig(config));\n  return {\n    typed: result.typed,\n    success: !result.issues,\n    output: result.output,\n    issues: result.issues\n  };\n}\n\n// src/methods/safeParse/safeParseAsync.ts\nasync function safeParseAsync(schema, input, config) {\n  const result = await schema._parse(input, getGlobalConfig(config));\n  return {\n    typed: result.typed,\n    success: !result.issues,\n    output: result.output,\n    issues: result.issues\n  };\n}\n\n// src/methods/transform/transform.ts\nfunction transform(schema, action, arg1) {\n  return {\n    ...schema,\n    _parse(input, config) {\n      const result = schema._parse(input, config);\n      if (result.issues) {\n        result.typed = false;\n      } else {\n        result.output = action(result.output, { issues: result.issues });\n        if (arg1) {\n          if (Array.isArray(arg1)) {\n            return pipeResult(\n              { type: typeof result.output, pipe: arg1 },\n              result.output,\n              config\n            );\n          }\n          return arg1._parse(result.output, config);\n        }\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/transform/transformAsync.ts\nfunction transformAsync(schema, action, arg1) {\n  return {\n    ...schema,\n    async: true,\n    async _parse(input, config) {\n      const result = await schema._parse(input, config);\n      if (result.issues) {\n        result.typed = false;\n      } else {\n        result.output = await action(result.output, { issues: result.issues });\n        if (arg1) {\n          if (Array.isArray(arg1)) {\n            return pipeResultAsync(\n              { type: typeof result.output, pipe: arg1 },\n              result.output,\n              config\n            );\n          }\n          return arg1._parse(result.output, config);\n        }\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/unwrap/unwrap.ts\nfunction unwrap(schema) {\n  return schema.wrapped;\n}\n\n// src/regex.ts\nvar BIC_REGEX = /^[A-Z]{6}(?!00)[A-Z\\d]{2}(?:[A-Z\\d]{3})?$/u;\nvar CUID2_REGEX = /^[a-z][\\da-z]*$/u;\nvar DECIMAL_REGEX = /^\\d+$/u;\nvar EMAIL_REGEX = /^[\\w+-]+(?:\\.[\\w+-]+)*@[\\da-z]+(?:[.-][\\da-z]+)*\\.[a-z]{2,}$/iu;\nvar EMOJI_REGEX = /^[\\p{Extended_Pictographic}\\p{Emoji_Component}]+$/u;\nvar HEXADECIMAL_REGEX = /^(0h|0x)?[\\da-f]+$/iu;\nvar HEX_COLOR_REGEX = /^#([\\da-f]{3}|[\\da-f]{4}|[\\da-f]{6}|[\\da-f]{8})$/iu;\nvar IMEI_REGEX = /^\\d{2}(?:[ /|-]?\\d{6}){2}[ /|-]?\\d$/u;\nvar IPV4_REGEX = (\n  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive\n  /^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$/u\n);\nvar IPV6_REGEX = /^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar ISO_DATE_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])$/u;\nvar ISO_DATE_TIME_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_REGEX = /^(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_SECOND_REGEX = /^(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}$/u;\nvar ISO_TIMESTAMP_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}(?:\\.\\d{1,9})?Z$/u;\nvar ISO_WEEK_REGEX = /^\\d{4}-W(?:0[1-9]|[1-4]\\d|5[0-3])$/u;\nvar MAC48_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$/iu;\nvar MAC64_REGEX = /^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar OCTAL_REGEX = /^(0o)?[0-7]+$/iu;\nvar ULID_REGEX = /^[\\da-hjkmnp-tv-z]{26}$/iu;\nvar UUID_REGEX = /^[\\da-f]{8}(?:-[\\da-f]{4}){3}-[\\da-f]{12}$/iu;\n\n// src/transformations/toCustom/toCustom.ts\nfunction toCustom(action) {\n  return {\n    type: \"to_custom\",\n    async: false,\n    _parse(input) {\n      return actionOutput(action(input));\n    }\n  };\n}\n\n// src/transformations/toCustom/toCustomAsync.ts\nfunction toCustomAsync(action) {\n  return {\n    type: \"to_custom\",\n    async: true,\n    async _parse(input) {\n      return actionOutput(await action(input));\n    }\n  };\n}\n\n// src/transformations/toLowerCase/toLowerCase.ts\nfunction toLowerCase() {\n  return {\n    type: \"to_lower_case\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.toLocaleLowerCase());\n    }\n  };\n}\n\n// src/transformations/toMaxValue/toMaxValue.ts\nfunction toMaxValue(requirement) {\n  return {\n    type: \"to_max_value\",\n    async: false,\n    requirement,\n    _parse(input) {\n      return actionOutput(input > this.requirement ? this.requirement : input);\n    }\n  };\n}\n\n// src/transformations/toMinValue/toMinValue.ts\nfunction toMinValue(requirement) {\n  return {\n    type: \"to_min_value\",\n    async: false,\n    requirement,\n    _parse(input) {\n      return actionOutput(input < this.requirement ? this.requirement : input);\n    }\n  };\n}\n\n// src/transformations/toTrimmed/toTrimmed.ts\nfunction toTrimmed() {\n  return {\n    type: \"to_trimmed\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.trim());\n    }\n  };\n}\n\n// src/transformations/toTrimmedEnd/toTrimmedEnd.ts\nfunction toTrimmedEnd() {\n  return {\n    type: \"to_trimmed_end\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.trimEnd());\n    }\n  };\n}\n\n// src/transformations/toTrimmedStart/toTrimmedStart.ts\nfunction toTrimmedStart() {\n  return {\n    type: \"to_trimmed_start\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.trimStart());\n    }\n  };\n}\n\n// src/transformations/toUpperCase/toUpperCase.ts\nfunction toUpperCase() {\n  return {\n    type: \"to_upper_case\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.toUpperCase());\n    }\n  };\n}\n\n// src/validations/bic/bic.ts\nfunction bic(message) {\n  return {\n    type: \"bic\",\n    expects: null,\n    async: false,\n    message,\n    requirement: BIC_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, bic, input, \"BIC\");\n    }\n  };\n}\n\n// src/validations/bytes/bytes.ts\nfunction bytes(requirement, message) {\n  return {\n    type: \"bytes\",\n    expects: `${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      const length2 = new TextEncoder().encode(input).length;\n      if (length2 === this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, bytes, input, \"bytes\", `${length2}`);\n    }\n  };\n}\n\n// src/validations/creditCard/creditCard.ts\nvar SANITIZE_REGEX = /[- ]+/gu;\nvar PROVIDER_REGEX_LIST = [\n  // American Express\n  /^3[47]\\d{13}$/u,\n  // Diners Club\n  /^3(?:0[0-5]|[68]\\d)\\d{11}$/u,\n  // Discover\n  /^6(?:011|5\\d{2})\\d{12,15}$/u,\n  // JCB\n  /^(?:2131|1800|35\\d{3})\\d{11}$/u,\n  // Mastercard\n  /^5[1-5]\\d{2}|(222\\d|22[3-9]\\d|2[3-6]\\d{2}|27[01]\\d|2720)\\d{12}$/u,\n  // UnionPay\n  /^(6[27]\\d{14}|81\\d{14,17})$/u,\n  // Visa\n  /^4\\d{12}(?:\\d{3,6})?$/u\n];\nfunction creditCard(message) {\n  return {\n    type: \"credit_card\",\n    expects: null,\n    async: false,\n    message,\n    requirement: (input) => {\n      const sanitized = input.replace(SANITIZE_REGEX, \"\");\n      return PROVIDER_REGEX_LIST.some((regex2) => regex2.test(sanitized)) && isLuhnAlgo(sanitized);\n    },\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, creditCard, input, \"credit card\");\n    }\n  };\n}\n\n// src/validations/cuid2/cuid2.ts\nfunction cuid2(message) {\n  return {\n    type: \"cuid2\",\n    expects: null,\n    async: false,\n    message,\n    requirement: CUID2_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, cuid2, input, \"Cuid2\");\n    }\n  };\n}\n\n// src/validations/custom/custom.ts\nfunction custom(requirement, message) {\n  return {\n    type: \"custom\",\n    expects: null,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, custom, input, \"input\");\n    }\n  };\n}\n\n// src/validations/custom/customAsync.ts\nfunction customAsync(requirement, message) {\n  return {\n    type: \"custom\",\n    expects: null,\n    async: true,\n    message,\n    requirement,\n    async _parse(input) {\n      if (await this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, customAsync, input, \"input\");\n    }\n  };\n}\n\n// src/validations/decimal/decimal.ts\nfunction decimal(message) {\n  return {\n    type: \"decimal\",\n    expects: null,\n    async: false,\n    message,\n    requirement: DECIMAL_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, decimal, input, \"decimal\");\n    }\n  };\n}\n\n// src/validations/email/email.ts\nfunction email(message) {\n  return {\n    type: \"email\",\n    expects: null,\n    async: false,\n    message,\n    requirement: EMAIL_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, email, input, \"email\");\n    }\n  };\n}\n\n// src/validations/emoji/emoji.ts\nfunction emoji(message) {\n  return {\n    type: \"emoji\",\n    expects: null,\n    async: false,\n    message,\n    requirement: EMOJI_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, emoji, input, \"emoji\");\n    }\n  };\n}\n\n// src/validations/endsWith/endsWith.ts\nfunction endsWith(requirement, message) {\n  return {\n    type: \"ends_with\",\n    expects: `\"${requirement}\"`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.endsWith(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        endsWith,\n        input,\n        \"end\",\n        `\"${input.slice(-this.requirement.length)}\"`\n      );\n    }\n  };\n}\n\n// src/validations/every/every.ts\nfunction every(requirement, message) {\n  return {\n    type: \"every\",\n    expects: null,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.every(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, every, input, \"input\");\n    }\n  };\n}\n\n// src/validations/excludes/excludes.ts\nfunction excludes(requirement, message) {\n  const received = stringify(requirement);\n  return {\n    type: \"excludes\",\n    expects: `!${received}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (!input.includes(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, excludes, input, \"content\", received);\n    }\n  };\n}\n\n// src/validations/finite/finite.ts\nfunction finite(message) {\n  return {\n    type: \"finite\",\n    expects: null,\n    async: false,\n    message,\n    requirement: Number.isFinite,\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, finite, input, \"finite\");\n    }\n  };\n}\n\n// src/validations/hash/hash.ts\nvar HASH_LENGTHS = {\n  md4: 32,\n  md5: 32,\n  sha1: 40,\n  sha256: 64,\n  sha384: 96,\n  sha512: 128,\n  ripemd128: 32,\n  ripemd160: 40,\n  tiger128: 32,\n  tiger160: 40,\n  tiger192: 48,\n  crc32: 8,\n  crc32b: 8,\n  adler32: 8\n};\nfunction hash(types, message) {\n  return {\n    type: \"hash\",\n    expects: null,\n    async: false,\n    message,\n    requirement: RegExp(\n      types.map((type) => `^[a-f0-9]{${HASH_LENGTHS[type]}}$`).join(\"|\"),\n      \"iu\"\n    ),\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, hash, input, \"hash\");\n    }\n  };\n}\n\n// src/validations/hexadecimal/hexadecimal.ts\nfunction hexadecimal(message) {\n  return {\n    type: \"hexadecimal\",\n    expects: null,\n    async: false,\n    message,\n    requirement: HEXADECIMAL_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, hexadecimal, input, \"hexadecimal\");\n    }\n  };\n}\n\n// src/validations/hexColor/hexColor.ts\nfunction hexColor(message) {\n  return {\n    type: \"hex_color\",\n    expects: null,\n    async: false,\n    message,\n    requirement: HEX_COLOR_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, hexColor, input, \"hex color\");\n    }\n  };\n}\n\n// src/validations/imei/imei.ts\nfunction imei(message) {\n  return {\n    type: \"imei\",\n    expects: null,\n    async: false,\n    message,\n    requirement: [IMEI_REGEX, isLuhnAlgo],\n    _parse(input) {\n      if (this.requirement[0].test(input) && this.requirement[1](input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, imei, input, \"IMEI\");\n    }\n  };\n}\n\n// src/validations/includes/includes.ts\nfunction includes(requirement, message) {\n  const expects = stringify(requirement);\n  return {\n    type: \"includes\",\n    expects,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.includes(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, includes, input, \"content\", `!${expects}`);\n    }\n  };\n}\n\n// src/validations/integer/integer.ts\nfunction integer(message) {\n  return {\n    type: \"integer\",\n    expects: null,\n    async: false,\n    message,\n    requirement: Number.isInteger,\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, integer, input, \"integer\");\n    }\n  };\n}\n\n// src/validations/ip/ip.ts\nfunction ip(message) {\n  return {\n    type: \"ip\",\n    expects: null,\n    async: false,\n    message,\n    // TODO: It is strange that we have an OR relationship between requirements\n    requirement: [IPV4_REGEX, IPV6_REGEX],\n    _parse(input) {\n      if (this.requirement[0].test(input) || this.requirement[1].test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, ip, input, \"IP\");\n    }\n  };\n}\n\n// src/validations/ipv4/ipv4.ts\nfunction ipv4(message) {\n  return {\n    type: \"ipv4\",\n    expects: null,\n    async: false,\n    message,\n    requirement: IPV4_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, ipv4, input, \"IPv4\");\n    }\n  };\n}\n\n// src/validations/ipv6/ipv6.ts\nfunction ipv6(message) {\n  return {\n    type: \"ipv6\",\n    expects: null,\n    async: false,\n    message,\n    requirement: IPV6_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, ipv6, input, \"IPv6\");\n    }\n  };\n}\n\n// src/validations/isoDate/isoDate.ts\nfunction isoDate(message) {\n  return {\n    type: \"iso_date\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_DATE_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoDate, input, \"date\");\n    }\n  };\n}\n\n// src/validations/isoDateTime/isoDateTime.ts\nfunction isoDateTime(message) {\n  return {\n    type: \"iso_date_time\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_DATE_TIME_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoDateTime, input, \"date-time\");\n    }\n  };\n}\n\n// src/validations/isoTime/isoTime.ts\nfunction isoTime(message) {\n  return {\n    type: \"iso_time\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_TIME_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoTime, input, \"time\");\n    }\n  };\n}\n\n// src/validations/isoTimeSecond/isoTimeSecond.ts\nfunction isoTimeSecond(message) {\n  return {\n    type: \"iso_time_second\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_TIME_SECOND_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoTimeSecond, input, \"time second\");\n    }\n  };\n}\n\n// src/validations/isoTimestamp/isoTimestamp.ts\nfunction isoTimestamp(message) {\n  return {\n    type: \"iso_timestamp\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_TIMESTAMP_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoTimestamp, input, \"timestamp\");\n    }\n  };\n}\n\n// src/validations/isoWeek/isoWeek.ts\nfunction isoWeek(message) {\n  return {\n    type: \"iso_week\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_WEEK_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoWeek, input, \"week\");\n    }\n  };\n}\n\n// src/validations/length/length.ts\nfunction length(requirement, message) {\n  return {\n    type: \"length\",\n    expects: `${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.length === this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, length, input, \"length\", `${input.length}`);\n    }\n  };\n}\n\n// src/validations/mac/mac.ts\nfunction mac(message) {\n  return {\n    type: \"mac\",\n    expects: null,\n    async: false,\n    message,\n    // TODO: It is strange that we have an OR relationship between requirements\n    requirement: [MAC48_REGEX, MAC64_REGEX],\n    _parse(input) {\n      if (this.requirement[0].test(input) || this.requirement[1].test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, mac, input, \"MAC\");\n    }\n  };\n}\n\n// src/validations/mac48/mac48.ts\nfunction mac48(message) {\n  return {\n    type: \"mac48\",\n    expects: null,\n    async: false,\n    message,\n    requirement: MAC48_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, mac48, input, \"48-bit MAC\");\n    }\n  };\n}\n\n// src/validations/mac64/mac64.ts\nfunction mac64(message) {\n  return {\n    type: \"mac64\",\n    expects: null,\n    async: false,\n    message,\n    requirement: MAC64_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, mac64, input, \"64-bit MAC\");\n    }\n  };\n}\n\n// src/validations/maxBytes/maxBytes.ts\nfunction maxBytes(requirement, message) {\n  return {\n    type: \"max_bytes\",\n    expects: `<=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      const length2 = new TextEncoder().encode(input).length;\n      if (length2 <= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, maxBytes, input, \"bytes\", `${length2}`);\n    }\n  };\n}\n\n// src/validations/maxLength/maxLength.ts\nfunction maxLength(requirement, message) {\n  return {\n    type: \"max_length\",\n    expects: `<=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.length <= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, maxLength, input, \"length\", `${input.length}`);\n    }\n  };\n}\n\n// src/validations/maxSize/maxSize.ts\nfunction maxSize(requirement, message) {\n  return {\n    type: \"max_size\",\n    expects: `<=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.size <= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, maxSize, input, \"size\", `${input.size}`);\n    }\n  };\n}\n\n// src/validations/maxValue/maxValue.ts\nfunction maxValue(requirement, message) {\n  return {\n    type: \"max_value\",\n    expects: `<=${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input <= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        maxValue,\n        input,\n        \"value\",\n        input instanceof Date ? input.toJSON() : stringify(input)\n      );\n    }\n  };\n}\n\n// src/validations/minBytes/minBytes.ts\nfunction minBytes(requirement, message) {\n  return {\n    type: \"min_bytes\",\n    expects: `>=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      const length2 = new TextEncoder().encode(input).length;\n      if (length2 >= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, minBytes, input, \"bytes\", `${length2}`);\n    }\n  };\n}\n\n// src/validations/mimeType/mimeType.ts\nfunction mimeType(requirement, message) {\n  return {\n    type: \"mime_type\",\n    expects: requirement.map((option) => `\"${option}\"`).join(\" | \"),\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (this.requirement.includes(input.type)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, mimeType, input, \"MIME type\");\n    }\n  };\n}\n\n// src/validations/minLength/minLength.ts\nfunction minLength(requirement, message) {\n  return {\n    type: \"min_length\",\n    expects: `>=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.length >= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, minLength, input, \"length\", `${input.length}`);\n    }\n  };\n}\n\n// src/validations/minSize/minSize.ts\nfunction minSize(requirement, message) {\n  return {\n    type: \"min_size\",\n    expects: `>=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.size >= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, minSize, input, \"size\", `${input.size}`);\n    }\n  };\n}\n\n// src/validations/minValue/minValue.ts\nfunction minValue(requirement, message) {\n  return {\n    type: \"min_value\",\n    expects: `>=${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input >= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        minValue,\n        input,\n        \"value\",\n        input instanceof Date ? input.toJSON() : stringify(input)\n      );\n    }\n  };\n}\n\n// src/validations/multipleOf/multipleOf.ts\nfunction multipleOf(requirement, message) {\n  return {\n    type: \"multiple_of\",\n    expects: `%${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input % this.requirement === 0) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, multipleOf, input, \"multiple\", `${input}`);\n    }\n  };\n}\n\n// src/validations/notBytes/notBytes.ts\nfunction notBytes(requirement, message) {\n  return {\n    type: \"not_bytes\",\n    expects: `!${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      const length2 = new TextEncoder().encode(input).length;\n      if (length2 !== this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, notBytes, input, \"bytes\", `${length2}`);\n    }\n  };\n}\n\n// src/validations/notLength/notLength.ts\nfunction notLength(requirement, message) {\n  return {\n    type: \"not_length\",\n    expects: `!${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.length !== this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, notLength, input, \"length\", `${input.length}`);\n    }\n  };\n}\n\n// src/validations/notSize/notSize.ts\nfunction notSize(requirement, message) {\n  return {\n    type: \"not_size\",\n    expects: `!${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.size !== this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, notSize, input, \"size\", `${input.size}`);\n    }\n  };\n}\n\n// src/validations/notValue/notValue.ts\nfunction notValue(requirement, message) {\n  return {\n    type: \"not_value\",\n    expects: `!${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input < this.requirement || input > this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        notValue,\n        input,\n        \"value\",\n        input instanceof Date ? input.toJSON() : stringify(input)\n      );\n    }\n  };\n}\n\n// src/validations/octal/octal.ts\nfunction octal(message) {\n  return {\n    type: \"octal\",\n    expects: null,\n    async: false,\n    message,\n    requirement: OCTAL_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, octal, input, \"octal\");\n    }\n  };\n}\n\n// src/validations/regex/regex.ts\nfunction regex(requirement, message) {\n  return {\n    type: \"regex\",\n    expects: `${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, regex, input, \"format\");\n    }\n  };\n}\n\n// src/validations/safeInteger/safeInteger.ts\nfunction safeInteger(message) {\n  return {\n    type: \"safe_integer\",\n    expects: null,\n    async: false,\n    message,\n    requirement: Number.isSafeInteger,\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, safeInteger, input, \"safe integer\");\n    }\n  };\n}\n\n// src/validations/size/size.ts\nfunction size(requirement, message) {\n  return {\n    type: \"size\",\n    expects: `${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.size === this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, size, input, \"size\", `${input.size}`);\n    }\n  };\n}\n\n// src/validations/some/some.ts\nfunction some(requirement, message) {\n  return {\n    type: \"some\",\n    expects: null,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.some(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, some, input, \"input\");\n    }\n  };\n}\n\n// src/validations/startsWith/startsWith.ts\nfunction startsWith(requirement, message) {\n  return {\n    type: \"starts_with\",\n    expects: `\"${requirement}\"`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.startsWith(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        startsWith,\n        input,\n        \"start\",\n        `\"${input.slice(0, this.requirement.length)}\"`\n      );\n    }\n  };\n}\n\n// src/validations/ulid/ulid.ts\nfunction ulid(message) {\n  return {\n    type: \"ulid\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ULID_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, ulid, input, \"ULID\");\n    }\n  };\n}\n\n// src/validations/url/url.ts\nfunction url(message) {\n  return {\n    type: \"url\",\n    expects: null,\n    async: false,\n    message,\n    requirement(input) {\n      try {\n        new URL(input);\n        return true;\n      } catch {\n        return false;\n      }\n    },\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, url, input, \"URL\");\n    }\n  };\n}\n\n// src/validations/uuid/uuid.ts\nfunction uuid(message) {\n  return {\n    type: \"uuid\",\n    expects: null,\n    async: false,\n    message,\n    requirement: UUID_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, uuid, input, \"UUID\");\n    }\n  };\n}\n\n// src/validations/value/value.ts\nfunction value(requirement, message) {\n  return {\n    type: \"value\",\n    expects: `${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input <= this.requirement && input >= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        value,\n        input,\n        \"value\",\n        input instanceof Date ? input.toJSON() : stringify(input)\n      );\n    }\n  };\n}\nexport {\n  BIC_REGEX,\n  BrandSymbol,\n  CUID2_REGEX,\n  DECIMAL_REGEX,\n  EMAIL_REGEX,\n  EMOJI_REGEX,\n  HEXADECIMAL_REGEX,\n  HEX_COLOR_REGEX,\n  IMEI_REGEX,\n  IPV4_REGEX,\n  IPV6_REGEX,\n  ISO_DATE_REGEX,\n  ISO_DATE_TIME_REGEX,\n  ISO_TIMESTAMP_REGEX,\n  ISO_TIME_REGEX,\n  ISO_TIME_SECOND_REGEX,\n  ISO_WEEK_REGEX,\n  MAC48_REGEX,\n  MAC64_REGEX,\n  OCTAL_REGEX,\n  ULID_REGEX,\n  UUID_REGEX,\n  ValiError,\n  actionIssue,\n  actionOutput,\n  any,\n  anyAsync,\n  array,\n  arrayAsync,\n  bic,\n  bigint,\n  bigintAsync,\n  blob,\n  blobAsync,\n  boolean,\n  booleanAsync,\n  brand,\n  bytes,\n  coerce,\n  coerceAsync,\n  creditCard,\n  cuid2,\n  custom,\n  customAsync,\n  date,\n  dateAsync,\n  decimal,\n  defaultArgs,\n  deleteGlobalConfig,\n  deleteGlobalMessage,\n  deleteSchemaMessage,\n  deleteSpecificMessage,\n  email,\n  emoji,\n  endsWith,\n  enumAsync,\n  enum_,\n  every,\n  excludes,\n  fallback,\n  fallbackAsync,\n  finite,\n  flatten,\n  forward,\n  forwardAsync,\n  getDefault,\n  getDefaultAsync,\n  getDefaults,\n  getDefaultsAsync,\n  getFallback,\n  getFallbackAsync,\n  getFallbacks,\n  getFallbacksAsync,\n  getGlobalConfig,\n  getGlobalMessage,\n  getSchemaMessage,\n  getSpecificMessage,\n  hash,\n  hexColor,\n  hexadecimal,\n  i18n,\n  imei,\n  includes,\n  instance,\n  instanceAsync,\n  integer,\n  intersect,\n  intersectAsync,\n  ip,\n  ipv4,\n  ipv6,\n  is,\n  isLuhnAlgo,\n  isOfType,\n  isoDate,\n  isoDateTime,\n  isoTime,\n  isoTimeSecond,\n  isoTimestamp,\n  isoWeek,\n  keyof,\n  lazy,\n  lazyAsync,\n  length,\n  literal,\n  literalAsync,\n  mac,\n  mac48,\n  mac64,\n  map,\n  mapAsync,\n  maxBytes,\n  maxLength,\n  maxSize,\n  maxValue,\n  merge,\n  mergeAsync,\n  mimeType,\n  minBytes,\n  minLength,\n  minSize,\n  minValue,\n  multipleOf,\n  nan,\n  nanAsync,\n  never,\n  neverAsync,\n  nonNullable,\n  nonNullableAsync,\n  nonNullish,\n  nonNullishAsync,\n  nonOptional,\n  nonOptionalAsync,\n  notBytes,\n  notLength,\n  notSize,\n  notValue,\n  nullAsync,\n  null_,\n  nullable,\n  nullableAsync,\n  nullish,\n  nullishAsync,\n  number,\n  numberAsync,\n  object,\n  objectAsync,\n  octal,\n  omit,\n  omitAsync,\n  optional,\n  optionalAsync,\n  parse,\n  parseAsync,\n  partial,\n  partialAsync,\n  pick,\n  pickAsync,\n  picklist,\n  picklistAsync,\n  pipeResult,\n  pipeResultAsync,\n  record,\n  recordAsync,\n  regex,\n  required,\n  requiredAsync,\n  restAndDefaultArgs,\n  safeInteger,\n  safeParse,\n  safeParseAsync,\n  schemaIssue,\n  schemaResult,\n  set,\n  setAsync,\n  setGlobalConfig,\n  setGlobalMessage,\n  setSchemaMessage,\n  setSpecificMessage,\n  size,\n  some,\n  special,\n  specialAsync,\n  startsWith,\n  string,\n  stringAsync,\n  stringify,\n  symbol,\n  symbolAsync,\n  toCustom,\n  toCustomAsync,\n  toLowerCase,\n  toMaxValue,\n  toMinValue,\n  toTrimmed,\n  toTrimmedEnd,\n  toTrimmedStart,\n  toUpperCase,\n  transform,\n  transformAsync,\n  tuple,\n  tupleAsync,\n  ulid,\n  undefinedAsync,\n  undefined_,\n  union,\n  unionAsync,\n  unknown,\n  unknownAsync,\n  unwrap,\n  url,\n  uuid,\n  value,\n  variant,\n  variantAsync,\n  voidAsync,\n  void_\n};\n","import{getPublishedId as t,studioPath as e}from\"@sanity/client/csm\";import{string as r,minLength as o,optional as s,object as n,record as a,unknown as c,is as i,safeParse as u,parse as p}from\"valibot\";function f(t){return\"object\"==typeof t&&null!==t&&!Array.isArray(t)}function l(t){return null!==t&&Array.isArray(t)}function d(t){let e=\"\";for(const r of t)\"string\"!=typeof r?\"number\"!=typeof r?l(r)?(e&&(e+=\":\"),e+=`${r.join(\",\")}}`):r._key&&(e&&(e+=\":\"),e+=`${r._key}`):(e&&(e+=\":\"),e+=`${r}`):(e&&(e+=\".\"),e+=r);return e}const b=/^([A-Za-z]+):([0-9]+)$/,y=/^([A-Za-z]+):([0-9]+),([0-9]+)$/,m=/^([A-Za-z]+):([a-z0-9]+)$/;function h(t){const e=[];for(const r of t.split(\".\")){const t=b.exec(r);if(t){e.push(t[1],Number(t[2]));continue}const o=y.exec(r);if(o){e.push(o[1],[Number(o[2]),Number(o[3])]);continue}const s=m.exec(r);s?e.push(s[1],{_key:s[2]}):e.push(r)}return e}const k=\"drafts.\",j=r([o(1)]),w=s(j),A=n({baseUrl:j,dataset:w,id:j,path:j,projectId:w,tool:w,type:w,workspace:w,isDraft:s(r())}),U=n({origin:j,href:j,data:s(a(r(),c()))});function $(t){return i(A,t)}function g(t){return i(U,t)}function x(r){const{id:o,path:s,baseUrl:n,tool:a,workspace:c,type:i}=r;return $(r)?[[\"id\",t(o)],[\"type\",i],[\"path\",d(e.fromString(s))],[\"base\",encodeURIComponent(n)],[\"workspace\",c],[\"tool\",a],[\"isDraft\",o.startsWith(k)]].filter((([,t])=>!!t)).map((t=>{const[e,r]=t;return!0===r?e:t.join(\"=\")})).join(\";\"):void 0}function z(t){const r=t.split(\";\").reduce(((t,r)=>{const[o,s]=r.split(\"=\");if(!o||r.includes(\"=\")&&!s)return t;switch(o){case\"id\":t.id=s;break;case\"type\":t.type=s;break;case\"path\":t.path=e.toString(h(s));break;case\"base\":t.baseUrl=decodeURIComponent(s);break;case\"tool\":t.tool=s;break;case\"workspace\":t.workspace=s;break;case\"projectId\":t.projectId=s;break;case\"dataset\":t.dataset=s;break;case\"isDraft\":t.isDraft=\"\"}return t}),{});if($(r))return r}function D(t){const e=u(A,t);if(e.success)return e.output;const r=u(U,t);if(r.success)try{const t=new URL(r.output.href,typeof document>\"u\"?\"https://example.com\":location.origin);return t.searchParams.size>0?p(A,Object.fromEntries(t.searchParams.entries())):r.output}catch(t){return console.error(\"Failed to parse sanity node\",t),r.output}}function I(t){if(\"object\"==typeof t&&null!==t)return D(t);try{return D(JSON.parse(t))}catch{return z(t)}}export{k as D,l as a,$ as b,g as c,z as d,x as e,I as f,f as i,d as p,h as u};//# sourceMappingURL=transformSanityNodeData.js.map\n","import{studioPath as t}from\"@sanity/client/csm\";import{e as r}from\"./_chunks-es/transformSanityNodeData.js\";import{p as e,u as n}from\"./_chunks-es/transformSanityNodeData.js\";function o(e){function n(r){return r?\"string\"==typeof r?t.fromString(r):r:[]}function a(e){if(!e.id)throw new Error(\"`id` is required to create a data attribute\");if(!e.type)throw new Error(\"`type` is required to create a data attribute\");if(!e.path||!e.path.length)throw new Error(\"`path` is required to create a data attribute\");const n={baseUrl:e.baseUrl||\"/\",workspace:e.workspace,tool:e.tool,type:e.type,id:e.id,path:\"string\"==typeof e.path?e.path:t.toString(e.path)};return r(n)}const i=t=>a({...e,path:[...n(e.path),...n(t)]});return i.toString=function(){return a(e)},i.combine=function(t){return o({...e,...t})},i.scope=function(t){return o({...e,path:[...n(e.path),...n(t)]})},i}function a(t,r){return`${t}-${\"string\"==typeof r?r:JSON.stringify(r)}`}const i=typeof window<\"u\"&&/Mac|iPod|iPhone|iPad/.test(window.navigator.platform),s={alt:\"altKey\",ctrl:\"ctrlKey\",mod:i?\"metaKey\":\"ctrlKey\",shift:\"shiftKey\"};function p(t,r){return t.every((t=>s[t]?r[s[t]]:r.key===t.toUpperCase()))}function u(t){return t.key===(i?\"Meta\":\"Ctrl\")}function c(t){return\"Alt\"===t.key}export{o as createDataAttribute,a as getQueryCacheKey,c as isAltKey,p as isHotkey,u as isModKey,e as pathToUrlString,n as urlStringToPath};//# sourceMappingURL=index.js.map\n","export function debounce<F extends (...args: Parameters<F>) => ReturnType<F>>(\n  fn: F,\n  timeout: number,\n): F {\n  let timer: ReturnType<typeof setTimeout>\n  return ((...args: Parameters<F>) => {\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      fn.apply(fn, args)\n    }, timeout)\n  }) as F\n}\n","import {createContext, type CSSProperties} from 'react'\n\nimport type {PanelElement, ResizerElement} from './types'\n\nexport const PanelsContext = createContext<{\n  activeResizer: string | null\n  drag: (id: string, event: MouseEvent) => void\n  getPanelStyle: (id: string) => CSSProperties\n  registerElement: (id: string, panel: PanelElement | ResizerElement) => void\n  startDragging: (id: string, event: MouseEvent) => void\n  stopDragging: () => void\n  unregisterElement: (id: string) => void\n} | null>(null)\n\nPanelsContext.displayName = 'PanelsContext'\n","import {type FunctionComponent, type PropsWithChildren, useContext, useLayoutEffect} from 'react'\nimport {styled} from 'styled-components'\n\nimport {PanelsContext} from './PanelsContext'\n\ninterface PanelProps extends PropsWithChildren {\n  defaultSize?: number | null\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  order?: number\n}\n\nconst Root = styled.div`\n  overflow: hidden;\n  flex-basis: 0;\n  flex-shrink: 1;\n`\n\nexport const Panel: FunctionComponent<PanelProps> = function ({\n  children,\n  defaultSize = null,\n  id,\n  minWidth,\n  maxWidth,\n  order = 0,\n}) {\n  const context = useContext(PanelsContext)\n\n  if (context === null) {\n    throw Error(`Panel components must be rendered within a PanelGroup container`)\n  }\n\n  const {getPanelStyle, registerElement, unregisterElement} = context\n\n  const style = getPanelStyle(id)\n\n  useLayoutEffect(() => {\n    registerElement(id, {\n      id,\n      type: 'panel',\n      defaultSize,\n      maxWidth: maxWidth ?? null,\n      minWidth: minWidth ?? 0,\n      order,\n    })\n\n    return () => {\n      unregisterElement(id)\n    }\n  }, [id, defaultSize, order, maxWidth, minWidth, registerElement, unregisterElement])\n\n  return <Root style={style}>{children}</Root>\n}\n","import {useMemo} from 'react'\n\nimport {debounce} from '../lib/debounce'\nimport type {PanelElement} from './types'\n\nconst itemKey = 'presentation/panels'\n\ntype StoredPanelsState = Record<string, number[]>\n\nconst getStoredItem = () => {\n  // @todo Validate\n  return JSON.parse(localStorage.getItem(itemKey) || '{}') as StoredPanelsState\n}\nconst setStoredItem = (data: StoredPanelsState) => {\n  localStorage.setItem(itemKey, JSON.stringify(data))\n}\n\nconst getKeyForPanels = (panels: PanelElement[]) => {\n  return panels.map((panel) => [panel.id, panel.order].join(':')).join(',')\n}\n\nexport function usePanelsStorage(): {\n  get: (panels: PanelElement[]) => number[] | undefined\n  set: (panels: PanelElement[], widths: number[]) => void\n  setDebounced: (panels: PanelElement[], widths: number[]) => void\n} {\n  return useMemo(() => {\n    const get = (panels: PanelElement[]) => {\n      const stored = getStoredItem()\n      const key = getKeyForPanels(panels)\n      return Array.isArray(stored[key]) && stored[key].some((val) => val === null)\n        ? undefined\n        : stored[key]\n    }\n\n    const set = (panels: PanelElement[], widths: number[]) => {\n      const stored = getStoredItem()\n      const key = getKeyForPanels(panels)\n      const data = {\n        ...stored,\n        [key]: widths,\n      }\n      setStoredItem(data)\n    }\n\n    const setDebounced = debounce(set, 100)\n    return {\n      get,\n      set,\n      setDebounced,\n    }\n  }, [])\n}\n","import type {ElementMap, InitialDragState, PanelElement, PanelsState, ResizerElement} from './types'\n\nfunction getNextWidth(panel: PanelElement, nextWidth: number, containerWidth: number) {\n  const {maxWidth: maxWidthPx, minWidth: minWidthPx} = panel\n  const maxWidth = maxWidthPx == null ? 100 : (maxWidthPx / containerWidth) * 100\n  const minWidth = (minWidthPx / containerWidth) * 100\n  return Math.min(maxWidth, Math.max(minWidth, nextWidth))\n}\n\nexport function getNextWidths(\n  delta: number,\n  containerWidth: number,\n  panelBefore: PanelElement,\n  panelAfter: PanelElement,\n  panelsState: PanelsState,\n  initialDragState: InitialDragState,\n): number[] {\n  const {panels, widths: prevWidths} = panelsState\n  const {widths: initialWidths} = initialDragState\n\n  const widths = initialWidths || prevWidths\n  const nextWidths = [...widths]\n\n  {\n    const pivotPanel = delta < 0 ? panelAfter : panelBefore\n    const index = panels.findIndex((panel) => panel.id === pivotPanel.id)\n    const width = widths[index]\n    const nextWidth = getNextWidth(pivotPanel, width + Math.abs(delta), containerWidth)\n    if (width === nextWidth) {\n      return widths\n    } else {\n      delta = delta < 0 ? width - nextWidth : nextWidth - width\n    }\n  }\n\n  let deltaApplied = 0\n  let pivotPanel = delta < 0 ? panelBefore : panelAfter\n  let index = panels.findIndex((panel) => panel.id === pivotPanel.id)\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const panel = panels[index]\n    const width = widths[index]\n\n    const deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied)\n\n    const nextWidth = getNextWidth(panel, width - deltaRemaining, containerWidth)\n\n    if (width !== nextWidth) {\n      deltaApplied += width - nextWidth\n      nextWidths[index] = nextWidth\n\n      if (\n        deltaApplied.toPrecision(10).localeCompare(Math.abs(delta).toPrecision(10), undefined, {\n          numeric: true,\n        }) >= 0\n      ) {\n        break\n      }\n    }\n\n    if (delta < 0) {\n      if (--index < 0) {\n        break\n      }\n    } else {\n      if (++index >= panels.length) {\n        break\n      }\n    }\n  }\n\n  if (deltaApplied === 0) {\n    return widths\n  }\n\n  pivotPanel = delta < 0 ? panelAfter : panelBefore\n  index = panels.findIndex((panel) => panel.id === pivotPanel.id)\n  nextWidths[index] = widths[index] + deltaApplied\n\n  return nextWidths\n}\n\nexport function getPanelWidth(panels: PanelElement[], id: string, widths: number[]): string {\n  if (panels.length === 1) return '100'\n\n  const index = panels.findIndex((panel) => panel.id === id)\n  const width = widths[index]\n\n  if (width == null) return '0'\n\n  return width.toPrecision(10)\n}\n\nexport function getOffset(\n  event: MouseEvent,\n  handleElement: HTMLDivElement,\n  initialOffset: number = 0,\n  initialHandleElementRect: DOMRect | null = null,\n): number {\n  const pointerOffset = event.clientX\n\n  const rect = initialHandleElementRect || handleElement.getBoundingClientRect()\n  const elementOffset = rect.left\n\n  return pointerOffset - elementOffset - initialOffset\n}\n\nexport function isPanel(element: PanelElement | ResizerElement): element is PanelElement {\n  return element.type === 'panel'\n}\n\nexport function isResizer(element: PanelElement | ResizerElement): element is ResizerElement {\n  return element.type === 'resizer'\n}\n\nexport function getSortedElements(elements: ElementMap): Array<PanelElement | ResizerElement> {\n  return Array.from(elements.values()).sort(({order: a}, {order: b}) => {\n    if (a == null && b == null) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n    return a - b\n  })\n}\n\nexport function validateWidths(\n  panels: PanelElement[],\n  widthsToValidate: number[],\n  containerWidth: number,\n): number[] {\n  // Clamp widths proportionally to total 100\n  const total = widthsToValidate.reduce((total, width) => total + width, 0)\n  const widths = [...widthsToValidate].map((width) => (width / total) * 100)\n\n  let remainingWidth = 0\n\n  for (let index = 0; index < panels.length; index++) {\n    const panel = panels[index]\n    const width = widths[index]\n    const nextWidth = getNextWidth(panel, width, containerWidth)\n    if (width != nextWidth) {\n      remainingWidth += width - nextWidth\n      widths[index] = nextWidth\n    }\n  }\n\n  if (remainingWidth.toFixed(3) !== '0.000') {\n    for (let index = 0; index < panels.length; index++) {\n      const panel = panels[index]\n\n      let {maxWidth, minWidth} = panel\n\n      minWidth = (minWidth / containerWidth) * 100\n      if (maxWidth != null) {\n        maxWidth = (maxWidth / containerWidth) * 100\n      }\n\n      const width = Math.min(\n        maxWidth != null ? maxWidth : 100,\n        Math.max(minWidth, widths[index] + remainingWidth),\n      )\n\n      if (width !== widths[index]) {\n        remainingWidth -= width - widths[index]\n        widths[index] = width\n\n        if (Math.abs(remainingWidth).toFixed(3) === '0.000') {\n          break\n        }\n      }\n    }\n  }\n\n  return widths\n}\n\nexport function getDefaultWidths(panels: PanelElement[]): number[] {\n  let panelsWithoutWidth = panels.length\n  let remainingWidthTotal = 100\n\n  const widthsWithNulls = panels.map((panel) => {\n    if (panel.defaultSize) {\n      remainingWidthTotal = remainingWidthTotal - panel.defaultSize\n      panelsWithoutWidth = panelsWithoutWidth - 1\n      return panel.defaultSize\n    }\n    return null\n  })\n\n  const defaultWidth = remainingWidthTotal / panelsWithoutWidth\n  const widths = widthsWithNulls.map((width) => {\n    if (width === null) return defaultWidth\n    return width\n  })\n\n  return widths\n}\n","// Slightly modified version of react-resizable-panels\n// https://github.com/bvaughn/react-resizable-panels/tree/main/packages/react-resizable-panels\n\nimport {\n  type CSSProperties,\n  type FunctionComponent,\n  type PropsWithChildren,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {styled} from 'styled-components'\n\nimport {PanelsContext} from './PanelsContext'\nimport type {ElementMap, InitialDragState, PanelElement, PanelsState, ResizerElement} from './types'\nimport {usePanelsStorage} from './usePanelsStorage'\nimport {\n  getDefaultWidths,\n  getNextWidths,\n  getOffset,\n  getPanelWidth,\n  getSortedElements,\n  isPanel,\n  isResizer,\n  validateWidths,\n} from './util'\n\nconst PanelsWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  overflow: hidden;\n  width: 100%;\n`\n\nexport const Panels: FunctionComponent<PropsWithChildren> = function ({children}) {\n  const panelsEl = useRef<HTMLDivElement | null>(null)\n\n  const [elements, setElements] = useState<ElementMap>(new Map())\n\n  const panels = useMemo(() => getSortedElements(elements).filter(isPanel), [elements])\n\n  const [widths, setWidths] = useState<number[]>([])\n  const [activeResizer, setActiveResizer] = useState<string | null>(null)\n\n  const panelsRef = useRef<PanelsState>({\n    elements,\n    panels,\n    widths,\n  })\n\n  const getPanelStyle = useCallback(\n    (id: string): CSSProperties => {\n      return {\n        flexGrow: getPanelWidth(panels, id, widths),\n        pointerEvents: activeResizer === null ? undefined : 'none',\n      }\n    },\n    [activeResizer, panels, widths],\n  )\n\n  const registerElement = useCallback((id: string, data: PanelElement | ResizerElement) => {\n    setElements((prev) => {\n      if (prev.has(id)) return prev\n      const next = new Map(prev)\n      next.set(id, data)\n      return next\n    })\n  }, [])\n  const unregisterElement = useCallback((id: string) => {\n    setElements((prev) => {\n      if (!prev.has(id)) return prev\n      const next = new Map(prev)\n      next.delete(id)\n      return next\n    })\n  }, [])\n\n  const dragRef = useRef<InitialDragState>({\n    containerWidth: window.innerWidth,\n    dragOffset: 0,\n    panelAfter: null,\n    panelBefore: null,\n    resizerIndex: -1,\n    resizerRect: null,\n    startX: 0,\n    widths: [],\n  })\n\n  const startDragging = useCallback(\n    (id: string, event: MouseEvent) => {\n      const elementsArr = getSortedElements(elements)\n      const index = elementsArr.findIndex((el) => el.id === id)\n\n      const resizer = elements.get(id)\n      if (!resizer || !isResizer(resizer)) return\n      const resizeElement = resizer.el.current\n      if (!resizeElement) return\n\n      dragRef.current = {\n        resizerIndex: index,\n        panelBefore: elementsArr.reduce(\n          (acc, el, i) => (isPanel(el) && i < index ? el : acc),\n          null as PanelElement | null,\n        ),\n        panelAfter: elementsArr.reduce(\n          (acc, el, i) => (acc === null && isPanel(el) && i > index ? el : acc),\n          null as PanelElement | null,\n        ),\n        containerWidth: window.innerWidth,\n        startX: event.pageX,\n        dragOffset: getOffset(event, resizeElement),\n        resizerRect: resizeElement.getBoundingClientRect(),\n        widths: panelsRef.current.widths,\n      }\n\n      setActiveResizer(id)\n    },\n    [elements],\n  )\n\n  const stopDragging = useCallback(() => {\n    setActiveResizer(null)\n  }, [])\n\n  const drag = useCallback(\n    (id: string, event: MouseEvent) => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      const {containerWidth, dragOffset, panelBefore, panelAfter, resizerRect} = dragRef.current\n\n      if (panelBefore == null || panelAfter == null) {\n        return\n      }\n\n      const resizer = elements.get(id)\n      if (!resizer || !isResizer(resizer)) return\n      const resizeElement = resizer.el.current\n      if (!resizeElement) return\n\n      const offset = getOffset(event, resizeElement, dragOffset, resizerRect)\n\n      if (offset === 0) {\n        return\n      }\n\n      const {widths: prevWidths} = panelsRef.current\n      const rect = panelsEl.current!.getBoundingClientRect()\n      const delta = (offset / rect.width) * 100\n\n      const nextWidths = getNextWidths(\n        delta,\n        containerWidth,\n        panelBefore,\n        panelAfter,\n        panelsRef.current,\n        dragRef.current,\n      )\n\n      const widthsChanged = prevWidths.some((prevWidth, i) => prevWidth !== nextWidths[i])\n\n      if (widthsChanged) {\n        setWidths(nextWidths)\n      }\n    },\n    [elements],\n  )\n\n  // For setting the panels state\n  useLayoutEffect(() => {\n    panelsRef.current.elements = elements\n    panelsRef.current.panels = panels\n    panelsRef.current.widths = widths\n  }, [elements, panels, widths])\n\n  const storage = usePanelsStorage()\n\n  // For setting default sizing when panels are updated\n  useLayoutEffect(() => {\n    const {widths} = panelsRef.current\n\n    if (widths.length === panels.length) {\n      return\n    }\n\n    const storedWidths = storage.get(panels)\n\n    if (storedWidths) {\n      const validatedStoredWidths = validateWidths(panels, storedWidths, window.innerWidth)\n      setWidths(validatedStoredWidths)\n      return\n    }\n\n    const defaultWidths = getDefaultWidths(panels)\n    setWidths(defaultWidths)\n  }, [storage, panels])\n\n  // For storing current widths in localStorage\n  useEffect(() => {\n    if (!widths.length) return\n    storage.setDebounced(panels, widths)\n  }, [storage, panels, widths])\n\n  useLayoutEffect(() => {\n    const resizeObserver = new ResizeObserver(() => {\n      const {panels, widths: prevWidths} = panelsRef.current\n\n      const nextWidths = validateWidths(panels, prevWidths, window.innerWidth)\n\n      const widthsChanged = prevWidths.some((prevWidth, i) => prevWidth !== nextWidths[i])\n      if (widthsChanged) {\n        setWidths(nextWidths)\n      }\n    })\n\n    resizeObserver.observe(panelsEl.current!)\n\n    return () => {\n      resizeObserver.disconnect()\n    }\n  }, [])\n\n  const context = useMemo(\n    () => ({\n      activeResizer,\n      drag,\n      getPanelStyle,\n      registerElement,\n      startDragging,\n      stopDragging,\n      unregisterElement,\n    }),\n    [\n      activeResizer,\n      drag,\n      getPanelStyle,\n      registerElement,\n      startDragging,\n      stopDragging,\n      unregisterElement,\n    ],\n  )\n\n  return (\n    <PanelsContext.Provider value={context}>\n      <PanelsWrapper ref={panelsEl}>{children}</PanelsWrapper>\n    </PanelsContext.Provider>\n  )\n}\n","import {Box, Button, Card, type CardProps, Container, Flex, Inline, Stack, Text} from '@sanity/ui'\nimport type {ReactElement, ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {presentationLocaleNamespace} from '../i18n'\n\nexport function ErrorCard(\n  props: {\n    children?: ReactNode\n    message: string\n    onRetry?: () => void\n    onContinueAnyway?: () => void\n  } & CardProps,\n): ReactElement {\n  const {children, message, onRetry, onContinueAnyway, ...restProps} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n\n  const retryButton = (\n    <Button fontSize={1} mode=\"ghost\" onClick={onRetry} text={t('error-card.retry-button.text')} />\n  )\n  const continueAnywayButton = (\n    <Button\n      fontSize={1}\n      mode=\"ghost\"\n      tone=\"critical\"\n      onClick={onContinueAnyway}\n      text={t('error-card.continue-button.text')}\n    />\n  )\n\n  return (\n    <Card height=\"fill\" {...restProps}>\n      <Flex align=\"center\" height=\"fill\" justify=\"center\">\n        <Container padding={4} sizing=\"border\" width={0}>\n          <Stack space={4}>\n            <Stack space={3}>\n              <Text size={1} weight=\"semibold\">\n                {t('error-card.title')}\n              </Text>\n              <Text muted size={1}>\n                {message}\n              </Text>\n            </Stack>\n\n            {children}\n\n            {onRetry && onContinueAnyway ? (\n              <Inline space={2}>\n                {retryButton}\n                {continueAnywayButton}\n              </Inline>\n            ) : onRetry ? (\n              <Box>{retryButton}</Box>\n            ) : onContinueAnyway ? (\n              <Box>{continueAnywayButton}</Box>\n            ) : null}\n          </Stack>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n","/* eslint-disable no-console */\n\nimport {forwardRef, type PropsWithChildren, type ReactElement, useCallback, useMemo} from 'react'\nimport {StateLink, useRouter} from 'sanity/router'\n\nimport {\n  type BackLinkProps,\n  getPublishedId,\n  PaneRouterContext,\n  type PaneRouterContextValue,\n  type ReferenceChildLinkProps,\n  useUnique,\n} from '../internals'\nimport type {PresentationParams, StructureDocumentPaneParams} from '../types'\nimport {usePresentationTool} from '../usePresentationTool'\n\nfunction encodeQueryString(params: Record<string, unknown> = {}): string {\n  const parts = Object.entries(params)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&')\n\n  return parts.length ? `?${parts}` : ''\n}\n\nfunction resolveQueryStringFromParams(nextParams: Record<string, string | undefined>) {\n  const allowed = [\n    'comment',\n    'inspect',\n    'instruction',\n    'pathKey',\n    'rev',\n    'since',\n    'template',\n    'prefersLatestPublished',\n    'view',\n  ] satisfies Array<keyof PresentationParams> as string[]\n\n  const safeNextParams = Object.entries(nextParams)\n    .filter(([key]) => allowed.includes(key))\n    .reduce((obj, [key, value]) => {\n      if (value == undefined) return obj\n      return {...obj, [key]: value}\n    }, {})\n\n  return encodeQueryString(safeNextParams)\n}\n\nconst BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: React.ForwardedRef<HTMLAnchorElement>,\n) {\n  const {params, structureParams} = usePresentationTool()\n\n  return (\n    <StateLink\n      {...props}\n      ref={ref}\n      state={{\n        type: undefined,\n        _searchParams: Object.entries({\n          ...structureParams,\n          perspective: params.perspective,\n          preview: params.preview,\n        }),\n      }}\n      title={undefined}\n    />\n  )\n})\n\nconst ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  props: ReferenceChildLinkProps & {previewUrl?: string},\n  ref: React.ForwardedRef<HTMLAnchorElement>,\n) {\n  const {\n    documentId,\n    documentType,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    parentRefPath,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    template,\n    previewUrl,\n    ...restProps\n  } = props\n  const {params} = usePresentationTool()\n\n  return (\n    <StateLink\n      {...restProps}\n      ref={ref}\n      state={{\n        id: documentId,\n        type: documentType,\n        _searchParams: Object.entries({\n          preview: previewUrl,\n          prefersLatestPublished: params.perspective === 'published' ? 'true' : undefined,\n        }),\n      }}\n      title={undefined}\n    />\n  )\n})\n\nexport function PresentationPaneRouterProvider(\n  props: PropsWithChildren<{\n    onStructureParams: (params: StructureDocumentPaneParams) => void\n    params: StructureDocumentPaneParams\n    previewUrl?: string\n    refs?: {_id: string; _type: string}[]\n  }>,\n): ReactElement {\n  const {children, onStructureParams, params, previewUrl, refs} = props\n\n  const {state: routerState, resolvePathFromState} = useRouter()\n\n  const routerSearchParams = useUnique(Object.fromEntries(routerState._searchParams || []))\n\n  const createPathWithParams: PaneRouterContextValue['createPathWithParams'] = useCallback(\n    (nextParams) => {\n      const path = resolvePathFromState(routerState)\n      const qs = resolveQueryStringFromParams({\n        ...routerSearchParams,\n        ...nextParams,\n      })\n      return `${path}${qs}`\n    },\n    [resolvePathFromState, routerSearchParams, routerState],\n  )\n\n  const context: PaneRouterContextValue = useMemo(() => {\n    return {\n      index: 0,\n      groupIndex: 0,\n      siblingIndex: 0,\n      payload: {},\n      params: params as any,\n      hasGroupSiblings: false,\n      groupLength: 1,\n      routerPanesState: [],\n      ChildLink: (childLinkProps) => {\n        const {childId, ...restProps} = childLinkProps\n        const ref = refs?.find((r) => r._id === childId || getPublishedId(r._id) === childId)\n        const {params} = usePresentationTool()\n\n        if (ref) {\n          return (\n            <StateLink\n              {...restProps}\n              state={{\n                id: childId,\n                type: ref._type,\n                _searchParams: Object.entries({\n                  preview: previewUrl,\n                  prefersLatestPublished: params.perspective === 'published' ? 'true' : undefined,\n                }),\n              }}\n            />\n          )\n        }\n\n        return <div {...restProps} />\n      },\n      BackLink,\n      ReferenceChildLink: (childLinkProps) => (\n        <ReferenceChildLink {...childLinkProps} previewUrl={previewUrl} />\n      ),\n      ParameterizedLink: () => <>ParameterizedLink</>,\n      closeCurrentAndAfter: () => {\n        console.warn('closeCurrentAndAfter')\n      },\n      handleEditReference: (options) => {\n        console.warn('handleEditReference', options)\n      },\n      replaceCurrent: (pane) => {\n        console.warn('replaceCurrent', pane)\n      },\n      closeCurrent: () => {\n        console.warn('closeCurrent')\n      },\n      duplicateCurrent: (pane) => {\n        console.warn('duplicateCurrent', pane)\n      },\n      setView: (viewId) => {\n        console.warn('setView', viewId)\n      },\n      setParams: (nextParams) => {\n        // eslint-disable-next-line no-warning-comments\n        // @todo set inspect param to undefined manually as param is missing from object when closing inspector\n        onStructureParams({\n          ...nextParams,\n          inspect: nextParams['inspect'] ?? undefined,\n        } as StructureDocumentPaneParams)\n      },\n      setPayload: (payload) => {\n        console.warn('setPayload', payload)\n      },\n      navigateIntent: (intentName, intentParams, options) => {\n        console.warn('navigateIntent', intentName, intentParams, options)\n      },\n      createPathWithParams,\n    }\n  }, [createPathWithParams, onStructureParams, params, previewUrl, refs])\n\n  return <PaneRouterContext.Provider value={context}>{children}</PaneRouterContext.Provider>\n}\n","import {Card, Code, ErrorBoundary, Flex, Label, Stack} from '@sanity/ui'\nimport {type ErrorInfo, type ReactElement, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {ErrorCard} from '../components/ErrorCard'\nimport {presentationLocaleNamespace} from '../i18n'\nimport {\n  DocumentListPane as StructureDocumentListPane,\n  getPublishedId,\n  PaneLayout,\n  type PaneNode,\n  StructureToolProvider,\n} from '../internals'\nimport type {MainDocumentState, StructureDocumentPaneParams} from '../types'\nimport {usePresentationTool} from '../usePresentationTool'\nimport {PresentationPaneRouterProvider} from './PresentationPaneRouterProvider'\n\nconst RootLayout = styled(PaneLayout)`\n  height: 100%;\n`\n\nconst Root = styled(Flex)`\n  & > div {\n    min-width: none !important;\n    max-width: none !important;\n  }\n`\n\nconst WrappedCode = styled(Code)`\n  white-space: pre-wrap;\n`\n\nexport function DocumentListPane(props: {\n  mainDocumentState?: MainDocumentState\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  previewUrl?: string\n  refs: {_id: string; _type: string}[]\n}): ReactElement {\n  const {mainDocumentState, onStructureParams, previewUrl, refs} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {devMode} = usePresentationTool()\n\n  const ids = useMemo(\n    () =>\n      refs\n        .filter((r) => getPublishedId(r._id) !== mainDocumentState?.document?._id)\n        .map((r) => r._id),\n    [mainDocumentState, refs],\n  )\n\n  const pane: Extract<PaneNode, {type: 'documentList'}> = useMemo(\n    () => ({\n      id: '$root',\n      options: {\n        filter: '_id in $ids',\n        params: {ids},\n        // defaultOrdering: [{field: '_updatedAt', direction: 'desc'}],\n      },\n      schemaTypeName: '',\n      title: t('document-list-pane.document-list.title'),\n      type: 'documentList',\n    }),\n    [ids, t],\n  )\n\n  const [errorParams, setErrorParams] = useState<{\n    info: ErrorInfo\n    error: Error\n  } | null>(null)\n\n  const handleRetry = useCallback(() => setErrorParams(null), [])\n\n  const [structureParams] = useState(() => ({}))\n\n  // Reset error state when `refs` value schanges\n  useEffect(() => setErrorParams(null), [refs])\n\n  if (errorParams) {\n    return (\n      <ErrorCard flex={1} message={t('document-list-pane.error.text')} onRetry={handleRetry}>\n        {devMode && (\n          // show runtime error message in dev mode\n          <Card overflow=\"auto\" padding={3} radius={2} tone=\"critical\">\n            <Stack space={3}>\n              <Label muted size={0}>\n                {t('presentation-error.label')}\n              </Label>\n              <WrappedCode size={1}>{errorParams.error.message}</WrappedCode>\n            </Stack>\n          </Card>\n        )}\n      </ErrorCard>\n    )\n  }\n\n  return (\n    <ErrorBoundary onCatch={setErrorParams}>\n      <RootLayout>\n        <StructureToolProvider>\n          <PresentationPaneRouterProvider\n            onStructureParams={onStructureParams}\n            params={structureParams}\n            previewUrl={previewUrl}\n            refs={refs}\n          >\n            <Root direction=\"column\" flex={1}>\n              <StructureDocumentListPane index={0} itemId=\"$root\" pane={pane} paneKey=\"$root\" />\n            </Root>\n          </PresentationPaneRouterProvider>\n        </StructureToolProvider>\n      </RootLayout>\n    </ErrorBoundary>\n  )\n}\n","import {Card, Code, ErrorBoundary, Label, Stack} from '@sanity/ui'\nimport {type ErrorInfo, type ReactElement, useCallback, useEffect, useMemo, useState} from 'react'\nimport {type Path, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {ErrorCard} from '../components/ErrorCard'\nimport {presentationLocaleNamespace} from '../i18n'\nimport {\n  decodeJsonParams,\n  DocumentPane as StructureDocumentPane,\n  type DocumentPaneNode,\n  PaneLayout,\n} from '../internals'\nimport type {StructureDocumentPaneParams} from '../types'\nimport {usePresentationTool} from '../usePresentationTool'\nimport {PresentationPaneRouterProvider} from './PresentationPaneRouterProvider'\n\nconst WrappedCode = styled(Code)`\n  white-space: pre-wrap;\n`\n\nexport function DocumentPane(props: {\n  documentId: string\n  documentType: string\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  params: StructureDocumentPaneParams\n  previewUrl?: string\n}): ReactElement {\n  const {documentId, documentType, onFocusPath, onStructureParams, params, previewUrl} = props\n  const {template, templateParams} = params\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {devMode} = usePresentationTool()\n\n  const paneDocumentNode: DocumentPaneNode = useMemo(\n    () => ({\n      id: documentId,\n      options: {\n        id: documentId,\n        type: documentType,\n        template,\n        templateParameters: decodeJsonParams(templateParams),\n      },\n      title: '',\n      type: 'document',\n    }),\n    [documentId, documentType, template, templateParams],\n  )\n\n  const [errorParams, setErrorParams] = useState<{\n    info: ErrorInfo\n    error: Error\n  } | null>(null)\n\n  const handleRetry = useCallback(() => setErrorParams(null), [])\n\n  // Reset error state when parameters change\n  useEffect(() => {\n    setErrorParams(null)\n  }, [documentId, documentType, params])\n\n  if (errorParams) {\n    return (\n      <ErrorCard flex={1} message={t('document-pane.error.text')} onRetry={handleRetry}>\n        {devMode && (\n          // show runtime error message in dev mode\n          <Card overflow=\"auto\" padding={3} radius={2} tone=\"critical\">\n            <Stack space={3}>\n              <Label muted size={0}>\n                {t('presentation-error.label')}\n              </Label>\n              <WrappedCode size={1}>{errorParams.error.message}</WrappedCode>\n            </Stack>\n          </Card>\n        )}\n      </ErrorCard>\n    )\n  }\n\n  return (\n    <ErrorBoundary onCatch={setErrorParams}>\n      <PaneLayout style={{height: '100%'}}>\n        <PresentationPaneRouterProvider\n          onStructureParams={onStructureParams}\n          params={params}\n          previewUrl={previewUrl}\n        >\n          <StructureDocumentPane\n            paneKey=\"document\"\n            index={1}\n            itemId=\"document\"\n            pane={paneDocumentNode}\n            onFocusPath={onFocusPath}\n          />\n        </PresentationPaneRouterProvider>\n      </PaneLayout>\n    </ErrorBoundary>\n  )\n}\n","import {type ReactElement} from 'react'\nimport {type Path} from 'sanity'\n\nimport {StructureToolProvider} from '../internals'\nimport type {StructureDocumentPaneParams} from '../types'\nimport {DocumentPane} from './DocumentPane'\n\nexport function DocumentPanel(props: {\n  documentId: string\n  documentType: string\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  previewUrl?: string\n  structureParams: StructureDocumentPaneParams\n}): ReactElement {\n  const {documentId, documentType, onFocusPath, onStructureParams, previewUrl, structureParams} =\n    props\n  return (\n    <StructureToolProvider>\n      <DocumentPane\n        documentId={documentId}\n        documentType={documentType}\n        onFocusPath={onFocusPath}\n        onStructureParams={onStructureParams}\n        params={structureParams}\n        previewUrl={previewUrl}\n      />\n    </StructureToolProvider>\n  )\n}\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {Badge, Box, Card, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactElement, useCallback} from 'react'\nimport {type Path, Translate, useSchema, useTranslation} from 'sanity'\nimport {StateLink} from 'sanity/router'\n\nimport {presentationLocaleNamespace} from '../i18n'\nimport {Preview} from '../internals'\nimport type {MainDocumentState, StructureDocumentPaneParams} from '../types'\nimport {DocumentListPane} from './DocumentListPane'\nimport {DocumentPanel} from './DocumentPanel'\n\nexport function ContentEditor(props: {\n  documentId?: string\n  documentType?: string\n  mainDocumentState?: MainDocumentState\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  previewUrl?: string\n  refs: {_id: string; _type: string}[]\n  structureParams: StructureDocumentPaneParams\n}): ReactElement {\n  const {\n    documentId,\n    documentType,\n    mainDocumentState,\n    onFocusPath,\n    onStructureParams,\n    previewUrl,\n    refs,\n    structureParams,\n  } = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const schema = useSchema()\n\n  const MainDocumentLink = useCallback(\n    (props: HTMLProps<HTMLAnchorElement>) => {\n      return (\n        <StateLink\n          {...props}\n          state={{\n            id: mainDocumentState!.document!._id,\n            type: mainDocumentState!.document!._type,\n            _searchParams: Object.entries({preview: previewUrl}),\n          }}\n        />\n      )\n    },\n    [mainDocumentState, previewUrl],\n  )\n\n  if (documentId && documentType) {\n    return (\n      <DocumentPanel\n        documentId={documentId}\n        documentType={documentType}\n        onFocusPath={onFocusPath}\n        onStructureParams={onStructureParams}\n        previewUrl={previewUrl}\n        structureParams={structureParams}\n      />\n    )\n  }\n\n  return (\n    <Flex direction=\"column\" flex={1} height=\"fill\">\n      {mainDocumentState && (\n        <Card padding={3} tone={mainDocumentState.document ? 'inherit' : 'caution'}>\n          {mainDocumentState.document ? (\n            <Card as={MainDocumentLink} data-as=\"a\" padding={0} radius={2}>\n              <Preview\n                schemaType={schema.get(mainDocumentState.document._type)!}\n                status={<Badge>{t('main-document.label')}</Badge>}\n                value={mainDocumentState.document}\n              />\n            </Card>\n          ) : (\n            <Card padding={2} radius={2} tone=\"inherit\">\n              <Flex gap={3}>\n                <Box flex=\"none\">\n                  <Text size={1}>\n                    <WarningOutlineIcon />\n                  </Text>\n                </Box>\n                <Box flex={1}>\n                  <Text size={1}>\n                    <Translate\n                      t={t}\n                      i18nKey=\"main-document.missing.text\"\n                      components={{Code: 'code'}}\n                      values={{path: mainDocumentState.path}}\n                    />\n                  </Text>\n                </Box>\n              </Flex>\n            </Card>\n          )}\n        </Card>\n      )}\n\n      <DocumentListPane\n        mainDocumentState={mainDocumentState}\n        onStructureParams={onStructureParams}\n        previewUrl={previewUrl}\n        refs={refs}\n      />\n    </Flex>\n  )\n}\n","import {\n  type FunctionComponent,\n  type MouseEvent as ReactMouseEvent,\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from 'react'\nimport {styled} from 'styled-components'\n\nimport {PanelsContext} from './PanelsContext'\nimport {usePanelId} from './usePanelId'\n\nconst Resizer = styled.div`\n  position: relative;\n`\nconst ResizerInner = styled.div<{\n  $disabled: boolean\n}>`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: -5px;\n  width: 9px;\n  z-index: 10;\n  cursor: ${({$disabled}) => ($disabled ? 'auto' : 'ew-resize')};\n\n  /* Border */\n  & > span:nth-child(1) {\n    display: block;\n    border-left: 1px solid var(--card-border-color);\n    position: absolute;\n    top: 0;\n    left: 4px;\n    bottom: 0;\n    transition: opacity 200ms;\n  }\n\n  ${({$disabled}) =>\n    !$disabled &&\n    `\n    /* Hover effect */\n    & > span:nth-child(2) {\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    @media (hover: hover) {\n      &:hover > span:nth-child(2) {\n        opacity: 0.2;\n      }\n    }\n  `}\n`\n\nexport const PanelResizer: FunctionComponent<{\n  id?: string\n  order: number\n  disabled?: boolean\n}> = function ({id: propId, order, disabled = false}) {\n  const el = useRef<HTMLDivElement>(null)\n\n  const context = useContext(PanelsContext)\n\n  if (context === null) {\n    throw Error(`Panel components must be rendered within a PanelGroup container`)\n  }\n\n  const id = usePanelId(propId)\n\n  const {activeResizer, drag, startDragging, stopDragging, registerElement, unregisterElement} =\n    context\n\n  const isDragging = activeResizer === id\n\n  if (context === null) {\n    throw Error(`Panel components must be rendered within a PanelGroup container`)\n  }\n\n  const onMouseDown = useCallback(\n    (event: ReactMouseEvent) => {\n      startDragging(id, event.nativeEvent)\n    },\n    [id, startDragging],\n  )\n\n  const onDrag = useCallback(\n    (e: MouseEvent) => {\n      drag(id, e)\n    },\n    [id, drag],\n  )\n\n  const onDragStop = useCallback(() => {\n    el.current!.blur()\n    stopDragging()\n  }, [stopDragging])\n\n  useEffect(() => {\n    if (!isDragging || disabled) return\n\n    window.addEventListener('mousemove', onDrag)\n    window.addEventListener('mouseup', onDragStop)\n\n    return () => {\n      window.removeEventListener('mousemove', onDrag)\n      window.removeEventListener('mouseup', onDragStop)\n    }\n  }, [disabled, isDragging, onDrag, onDragStop])\n\n  useLayoutEffect(() => {\n    registerElement(id, {id, order, type: 'resizer', el})\n\n    return () => {\n      unregisterElement(id)\n    }\n  }, [id, order, registerElement, unregisterElement])\n\n  return (\n    <Resizer onMouseDown={onMouseDown} ref={el}>\n      <ResizerInner $disabled={disabled}>\n        <span />\n        <span />\n      </ResizerInner>\n    </Resizer>\n  )\n}\n","import {useRef} from 'react'\nimport {v4 as uuid} from 'uuid'\n\nexport function usePanelId(id?: string): string {\n  const idRef = useRef(id || uuid())\n  return idRef.current\n}\n","import {\n  type Dispatch,\n  type FunctionComponent,\n  type PropsWithChildren,\n  type SetStateAction,\n} from 'react'\nimport type {Path, SanityDocument} from 'sanity'\n\nimport {ContentEditor} from './editor/ContentEditor'\nimport {type CommentIntentGetter, CommentsIntentProvider} from './internals'\nimport {DisplayedDocumentBroadcasterProvider} from './loader/DisplayedDocumentBroadcaster'\nimport {Panel} from './panels/Panel'\nimport {PanelResizer} from './panels/PanelResizer'\nimport type {MainDocumentState, PresentationParams, StructureDocumentPaneParams} from './types'\n\nexport interface PresentationContentProps {\n  mainDocumentState: MainDocumentState | undefined\n  params: PresentationParams\n  documentsOnPage: {_id: string; _type: string}[]\n  getCommentIntent: CommentIntentGetter\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  setDisplayedDocument: Dispatch<SetStateAction<Partial<SanityDocument> | null | undefined>>\n  structureParams: StructureDocumentPaneParams\n}\n\nconst PresentationContentWrapper: FunctionComponent<\n  PropsWithChildren<{\n    documentId?: string\n    getCommentIntent: CommentIntentGetter\n    setDisplayedDocument: Dispatch<SetStateAction<Partial<SanityDocument> | null | undefined>>\n  }>\n> = (props) => {\n  const {documentId, setDisplayedDocument, getCommentIntent} = props\n  return (\n    <>\n      <PanelResizer order={4} />\n      <Panel id=\"content\" minWidth={325} order={5}>\n        <DisplayedDocumentBroadcasterProvider\n          documentId={documentId}\n          setDisplayedDocument={setDisplayedDocument}\n        >\n          <CommentsIntentProvider getIntent={getCommentIntent}>\n            {props.children}\n          </CommentsIntentProvider>\n        </DisplayedDocumentBroadcasterProvider>\n      </Panel>\n    </>\n  )\n}\n\nexport const PresentationContent: FunctionComponent<PresentationContentProps> = (props) => {\n  const {\n    documentsOnPage,\n    getCommentIntent,\n    mainDocumentState,\n    onFocusPath,\n    onStructureParams,\n    params,\n    setDisplayedDocument,\n    structureParams,\n  } = props\n\n  return (\n    <PresentationContentWrapper\n      documentId={params.id}\n      getCommentIntent={getCommentIntent}\n      setDisplayedDocument={setDisplayedDocument}\n    >\n      <ContentEditor\n        documentId={params.id}\n        documentType={params.type}\n        mainDocumentState={mainDocumentState}\n        onFocusPath={onFocusPath}\n        onStructureParams={onStructureParams}\n        previewUrl={params.preview}\n        refs={documentsOnPage}\n        structureParams={structureParams}\n      />\n    </PresentationContentWrapper>\n  )\n}\n","import {type FunctionComponent, type PropsWithChildren, useCallback} from 'react'\n\nimport {\n  PresentationNavigateContext,\n  type PresentationNavigateContextValue,\n} from './PresentationNavigateContext'\nimport type {PresentationNavigate} from './types'\n\nexport const PresentationNavigateProvider: FunctionComponent<\n  PropsWithChildren<{\n    navigate: PresentationNavigate\n  }>\n> = function (props) {\n  const {children, navigate: _navigate} = props\n\n  const navigate = useCallback<PresentationNavigateContextValue>(\n    (preview, document = undefined) => {\n      _navigate(document || {}, preview ? {preview} : {})\n    },\n    [_navigate],\n  )\n\n  return (\n    <PresentationNavigateContext.Provider value={navigate}>\n      {children}\n    </PresentationNavigateContext.Provider>\n  )\n}\n","import {memo, useCallback, useMemo} from 'react'\n\nimport {Panel} from './panels/Panel'\nimport {PanelResizer} from './panels/PanelResizer'\nimport type {NavigatorOptions} from './types'\nimport {useLocalState} from './useLocalState'\n\n/** @internal */\nexport interface UsePresentationNavigatorProps {\n  unstable_navigator?: NavigatorOptions\n}\n\n/** @internal */\nexport interface UsePresentationNavigatorState {\n  navigatorEnabled: boolean\n  toggleNavigator: (() => void) | undefined\n}\n\n/** @internal */\nexport function usePresentationNavigator(\n  props: UsePresentationNavigatorProps,\n): [UsePresentationNavigatorState, () => JSX.Element] {\n  const {unstable_navigator} = props\n\n  const navigatorProvided = !!unstable_navigator?.component\n  const [_navigatorEnabled, setNavigatorEnabled] = useLocalState<boolean>(\n    'presentation/navigator',\n    navigatorProvided,\n  )\n  const navigatorEnabled = navigatorProvided ? _navigatorEnabled : false\n  const toggleNavigator = useMemo(() => {\n    if (!navigatorProvided) return undefined\n\n    return () => setNavigatorEnabled((enabled) => !enabled)\n  }, [navigatorProvided, setNavigatorEnabled])\n\n  const Component = useCallback(\n    function PresentationNavigator() {\n      return <>{navigatorEnabled && <Navigator {...unstable_navigator!} />}</>\n    },\n    [navigatorEnabled, unstable_navigator],\n  )\n\n  return [{navigatorEnabled, toggleNavigator}, Component]\n}\n\nfunction NavigatorComponent(props: NavigatorOptions) {\n  const {minWidth, maxWidth, component: NavigatorComponent} = props\n  const navigatorDisabled = minWidth != null && maxWidth != null && minWidth === maxWidth\n  return (\n    <>\n      <Panel id=\"navigator\" minWidth={minWidth} maxWidth={maxWidth} order={1}>\n        <NavigatorComponent />\n      </Panel>\n      <PanelResizer order={2} disabled={navigatorDisabled} />\n    </>\n  )\n}\nconst Navigator = memo(NavigatorComponent)\n","import {type Dispatch, type SetStateAction, useEffect, useState} from 'react'\n\nexport function useLocalState<T>(key: string, defaultValue: T): [T, Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() =>\n    JSON.parse(localStorage.getItem(key) ?? JSON.stringify(defaultValue)),\n  )\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value))\n  }, [key, value])\n\n  return [value, setValue]\n}\n","import {type FunctionComponent, type PropsWithChildren, useMemo} from 'react'\n\nimport {PresentationParamsContext} from './PresentationParamsContext'\nimport type {PresentationParams} from './types'\n\nexport const PresentationParamsProvider: FunctionComponent<\n  PropsWithChildren<{\n    params: PresentationParams\n  }>\n> = function (props) {\n  const {children, params} = props\n\n  const context = useMemo<PresentationParams>(() => params, [params])\n\n  return (\n    <PresentationParamsContext.Provider value={context}>\n      {children}\n    </PresentationParamsContext.Provider>\n  )\n}\n","import {type FunctionComponent, type PropsWithChildren, useMemo} from 'react'\n\nimport {PresentationContext, type PresentationContextValue} from './PresentationContext'\nimport type {PresentationNavigate, PresentationParams, StructureDocumentPaneParams} from './types'\n\nexport const PresentationProvider: FunctionComponent<\n  PropsWithChildren<{\n    devMode: boolean\n    name: string\n    navigate: PresentationNavigate\n    params: PresentationParams\n    structureParams: StructureDocumentPaneParams\n  }>\n> = function (props) {\n  const {children, devMode, name, navigate, params, structureParams} = props\n\n  const context = useMemo<PresentationContextValue>(\n    () => ({\n      devMode,\n      name,\n      navigate,\n      params,\n      structureParams,\n    }),\n    [devMode, name, navigate, params, structureParams],\n  )\n\n  return <PresentationContext.Provider value={context}>{children}</PresentationContext.Provider>\n}\n","import type {ClientPerspective} from '@sanity/client'\nimport type {Dispatch, Reducer} from 'react'\nimport {boolean, fallback, object, parse, picklist} from 'valibot'\n\nexport interface PresentationState {\n  mainDocument: boolean\n  iframe: {\n    status: 'loading' | 'loaded' | 'refreshing' | 'reloading'\n  }\n  /**\n   * The selected perspective that all previews should use\n   */\n  perspective: Extract<'published' | 'previewDrafts', ClientPerspective>\n  /**\n   * The viewport size of the preview iframe is currently hardcoded, using this enum to determine the size\n   */\n  viewport: 'desktop' | 'mobile'\n  visualEditing: {\n    overlaysEnabled: boolean\n  }\n}\n\nexport const ACTION_IFRAME_LOADED = 'ACTION_IFRAME_LOADED'\nexport const ACTION_IFRAME_REFRESH = 'ACTION_IFRAME_REFRESH'\nexport const ACTION_IFRAME_RELOAD = 'ACTION_IFRAME_RELOAD'\nexport const ACTION_PERSPECTIVE = 'ACTION_PERSPECTIVE'\nexport const ACTION_VIEWPORT = 'ACTION_VIEWPORT'\nexport const ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE = 'ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE'\n\ninterface IframeLoadedAction {\n  type: typeof ACTION_IFRAME_LOADED\n}\ninterface IframeRefreshAction {\n  type: typeof ACTION_IFRAME_REFRESH\n}\ninterface IframeReloadAction {\n  type: typeof ACTION_IFRAME_RELOAD\n}\ninterface PerspectiveAction {\n  type: typeof ACTION_PERSPECTIVE\n  perspective: PresentationState['perspective']\n}\ninterface ViewportAction {\n  type: typeof ACTION_VIEWPORT\n  viewport: PresentationState['viewport']\n}\ninterface VisualEditingOverlaysToggleAction {\n  type: typeof ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE\n  enabled: boolean\n}\n\ntype PresentationAction =\n  | IframeLoadedAction\n  | IframeRefreshAction\n  | IframeReloadAction\n  | PerspectiveAction\n  | ViewportAction\n  | VisualEditingOverlaysToggleAction\n\nexport const presentationReducer: Reducer<\n  Readonly<PresentationState>,\n  Readonly<PresentationAction>\n> = (state, action) => {\n  switch (action.type) {\n    case ACTION_IFRAME_LOADED:\n      return state.iframe.status === 'loaded'\n        ? state\n        : {\n            ...state,\n            iframe: {\n              ...state.iframe,\n              status: 'loaded',\n            },\n          }\n    case ACTION_IFRAME_REFRESH:\n      return state.iframe.status === 'refreshing'\n        ? state\n        : {\n            ...state,\n            iframe: {\n              ...state.iframe,\n              status: 'refreshing',\n            },\n          }\n    case ACTION_IFRAME_RELOAD:\n      return state.iframe.status === 'reloading'\n        ? state\n        : {\n            ...state,\n            iframe: {\n              ...state.iframe,\n              status: 'reloading',\n            },\n          }\n    case ACTION_PERSPECTIVE:\n      return {\n        ...state,\n        perspective: parse(perspectiveSchema, action.perspective),\n      }\n    case ACTION_VIEWPORT:\n      return {\n        ...state,\n        viewport: parse(viewportSchema, action.viewport),\n      }\n    case ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE:\n      return toggleVisualEditingOverlays(state, action)\n    default:\n      return state\n  }\n}\n\nconst toggleVisualEditingOverlays: Reducer<\n  Readonly<PresentationState>,\n  Readonly<VisualEditingOverlaysToggleAction>\n> = (state, action) => {\n  if (state.visualEditing.overlaysEnabled === action.enabled) return state\n  return {\n    ...state,\n    visualEditing: {\n      ...state.visualEditing,\n      overlaysEnabled: action.enabled,\n    },\n  }\n}\n\nconst mainDocumentSchema = fallback(boolean(), false)\n\nconst iframeStatusSchema = picklist(['loading', 'loaded', 'refreshing', 'reloading'])\nconst perspectiveSchema = fallback(\n  picklist(['published', 'previewDrafts'] satisfies PresentationState['perspective'][]),\n  'previewDrafts',\n)\nconst viewportSchema = fallback(\n  picklist(['desktop', 'mobile'] satisfies PresentationState['viewport'][]),\n  'desktop',\n)\nconst initStateSchema = object({\n  mainDocument: mainDocumentSchema,\n  iframe: object({\n    status: iframeStatusSchema,\n  }),\n  perspective: perspectiveSchema,\n  viewport: viewportSchema,\n  visualEditing: object({overlaysEnabled: boolean()}),\n})\n\nconst INITIAL_PRESENTATION_STATE = {\n  mainDocument: false,\n  iframe: {\n    status: 'loading',\n  },\n  perspective: 'previewDrafts',\n  viewport: 'desktop',\n  visualEditing: {\n    overlaysEnabled: false,\n  },\n} as const satisfies PresentationState\nexport function presentationReducerInit(\n  state: Readonly<\n    Partial<{\n      mainDocument: boolean\n      perspective: string\n      viewport: string\n    }>\n  >,\n): Readonly<PresentationState> {\n  return parse(initStateSchema, {...INITIAL_PRESENTATION_STATE, ...state})\n}\n\nexport type DispatchPresentationAction = Dispatch<Readonly<PresentationAction>>\n","import {motion} from 'framer-motion'\nimport {styled} from 'styled-components'\n\nexport const IFrame = motion(styled.iframe`\n  border: 0;\n  max-height: 100%;\n  width: 100%;\n  display: block;\n`)\n","import {ResetIcon} from '@sanity/icons'\nimport {TextInput, type TextInputClearButtonProps} from '@sanity/ui'\nimport {\n  type ChangeEvent,\n  type FunctionComponent,\n  type KeyboardEvent,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {presentationLocaleNamespace} from '../i18n'\nimport {useActiveWorkspace} from '../internals'\n\nexport const PreviewLocationInput: FunctionComponent<{\n  fontSize?: number\n  onChange: (value: string) => void\n  origin: string\n  padding?: number\n  prefix?: ReactNode\n  suffix?: ReactNode\n  value: string\n}> = function (props) {\n  const {fontSize = 1, onChange, origin, padding = 3, prefix, suffix, value} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {basePath = '/'} = useActiveWorkspace()?.activeWorkspace || {}\n\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const [sessionValue, setSessionValue] = useState<string | undefined>(undefined)\n  const [customValidity, setCustomValidity] = useState<string | undefined>(undefined)\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setSessionValue(event.currentTarget.value)\n  }, [])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter') {\n        if (sessionValue === undefined) {\n          return\n        }\n\n        const absoluteValue =\n          sessionValue.startsWith('/') || sessionValue === ''\n            ? `${origin}${sessionValue}`\n            : sessionValue\n\n        if (!absoluteValue.startsWith(origin + '/') && absoluteValue !== origin) {\n          setCustomValidity(t('preview-location-input.error', {origin, context: 'missing-origin'}))\n          return\n        }\n        // `origin` is an empty string '' if the Studio is embedded, and that's when we need to protect against recursion\n        if (!origin && (absoluteValue.startsWith(`${basePath}/`) || absoluteValue === basePath)) {\n          setCustomValidity(\n            t('preview-location-input.error', {basePath, context: 'same-base-path'}),\n          )\n          return\n        }\n\n        const nextValue = absoluteValue === origin ? origin + '/' : absoluteValue\n\n        setCustomValidity(undefined)\n        setSessionValue(undefined)\n\n        onChange(nextValue.slice(origin.length))\n\n        inputRef.current?.blur()\n      }\n\n      if (event.key === 'Escape') {\n        setCustomValidity(undefined)\n        setSessionValue(undefined)\n      }\n    },\n    [basePath, onChange, origin, sessionValue, t],\n  )\n\n  const handleBlur = useCallback(() => {\n    setCustomValidity(undefined)\n    setSessionValue(undefined)\n  }, [])\n\n  useEffect(() => {\n    setCustomValidity(undefined)\n    setSessionValue(undefined)\n  }, [origin, value])\n\n  const resetButton: TextInputClearButtonProps = useMemo(() => ({icon: ResetIcon}), [])\n\n  return (\n    <>\n      <TextInput\n        clearButton={customValidity ? resetButton : undefined}\n        customValidity={customValidity}\n        fontSize={fontSize}\n        onBlur={handleBlur}\n        onClear={() => {\n          setCustomValidity(undefined)\n          setSessionValue(origin + value)\n        }}\n        onChange={handleChange}\n        onKeyDownCapture={handleKeyDown}\n        padding={padding}\n        prefix={prefix}\n        style={{zIndex: 1}}\n        radius={2}\n        ref={inputRef}\n        space={padding}\n        suffix={suffix}\n        value={sessionValue === undefined ? `${origin}${value}` : sessionValue}\n      />\n    </>\n  )\n}\n","import {CopyIcon, LaunchIcon} from '@sanity/icons'\nimport {createPreviewSecret} from '@sanity/preview-url-secret/create-secret'\nimport {\n  hasSecretSearchParams,\n  setSecretSearchParams,\n} from '@sanity/preview-url-secret/without-secret-search-params'\nimport {MenuItem, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {useClient, useCurrentUser, useTranslation} from 'sanity'\n\nimport {API_VERSION} from '../constants'\nimport {presentationLocaleNamespace} from '../i18n'\nimport type {PreviewFrameProps} from './PreviewFrame'\n\n/** @internal */\nexport function ShareUrlMenuItems(\n  props: Pick<PreviewFrameProps, 'initialUrl' | 'openPopup'> & {\n    previewLocationOrigin: string\n    previewLocationRoute: string\n  },\n): React.ReactNode {\n  const {initialUrl, openPopup, previewLocationOrigin, previewLocationRoute} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n\n  const handleOpenPopup = useCallback(\n    (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n      event.preventDefault()\n      openPopup(event.currentTarget.href)\n    },\n    [openPopup],\n  )\n\n  return (\n    <>\n      <CopyUrlMenuButton\n        initialUrl={initialUrl}\n        previewLocationOrigin={previewLocationOrigin}\n        previewLocationRoute={previewLocationRoute}\n      />\n      <MenuItem\n        icon={LaunchIcon}\n        text={t('share-url.menu-item.open.text')}\n        as=\"a\"\n        href={`${previewLocationOrigin}${previewLocationRoute}`}\n        // @ts-expect-error the `as=\"a\"` prop isn't enough to change the type of event.target from <div> to <a>\n        onClick={handleOpenPopup}\n        rel=\"opener\"\n        target=\"_blank\"\n      />\n    </>\n  )\n}\n\nfunction CopyUrlMenuButton(\n  props: Pick<PreviewFrameProps, 'initialUrl'> & {\n    previewLocationOrigin: string\n    previewLocationRoute: string\n  },\n) {\n  const {initialUrl, previewLocationOrigin, previewLocationRoute} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {push: pushToast} = useToast()\n  const client = useClient({apiVersion: API_VERSION})\n  const currentUser = useCurrentUser()\n  const [disabled, setDisabled] = useState(false)\n\n  return (\n    <MenuItem\n      disabled={disabled}\n      onClick={() => {\n        if (!navigator?.clipboard) {\n          pushToast({\n            closable: true,\n            status: 'error',\n            title: t('share-url.clipboard.status', {context: 'unsupported'}),\n          })\n          return false\n        }\n        setDisabled(true)\n\n        let id: string | undefined = undefined\n        let url = `${previewLocationOrigin}${previewLocationRoute}`\n        const onFinally = () => {\n          pushToast({\n            id,\n            closable: true,\n            status: 'success',\n            title: t('share-url.clipboard.status', {context: 'success'}),\n          })\n          setDisabled(false)\n        }\n        const onError = (error: Error) => {\n          pushToast({\n            closable: true,\n            status: 'error',\n            title: t('share-url.clipboard.status', {context: 'failed'}),\n            description: error.message || error.toString(),\n          })\n          setDisabled(false)\n        }\n        if (hasSecretSearchParams(initialUrl) && typeof ClipboardItem !== 'undefined') {\n          const type = 'text/plain'\n          const resolvePreviewUrl = async () => {\n            id = pushToast({\n              closable: true,\n              title: t('share-url.clipboard.status', {context: 'copying'}),\n            })\n            const previewUrlSecret = await createPreviewSecret(\n              client,\n              '@sanity/presentation',\n              typeof window === 'undefined' ? '' : location.href,\n              currentUser?.id,\n            )\n\n            const newUrl = setSecretSearchParams(\n              initialUrl,\n              previewUrlSecret.secret,\n              previewLocationRoute,\n            )\n            url = newUrl.toString()\n            return new Blob([url], {type})\n          }\n\n          // Try to save to clipboard then save it in the state if worked\n          const item = new ClipboardItem({\n            [type]: resolvePreviewUrl(),\n          })\n          navigator.clipboard.write([item]).then(onFinally).catch(onError)\n        } else {\n          navigator.clipboard.writeText(url).then(onFinally).catch(onError)\n        }\n        return\n      }}\n      text={t('share-url.menu-item.copy.text')}\n      icon={CopyIcon}\n    />\n  )\n}\n","import type {ChannelStatus} from '@repo/channels'\nimport {\n  CheckmarkIcon,\n  ChevronDownIcon,\n  DesktopIcon,\n  EditIcon,\n  MobileDeviceIcon,\n  PanelLeftIcon,\n  PublishIcon,\n  RefreshIcon,\n  ShareIcon,\n} from '@sanity/icons'\nimport {withoutSecretSearchParams} from '@sanity/preview-url-secret/without-secret-search-params'\nimport {\n  Box,\n  Button,\n  type ButtonTone,\n  Card,\n  Code,\n  Flex,\n  Label,\n  Menu,\n  MenuButton,\n  MenuItem,\n  Spinner,\n  Stack,\n  Switch,\n  Text,\n  Tooltip,\n  TooltipDelayGroupProvider,\n  usePrefersReducedMotion,\n} from '@sanity/ui'\nimport {AnimatePresence, motion, MotionConfig} from 'framer-motion'\nimport {\n  type ComponentType,\n  createElement,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {Hotkeys, useTranslation} from 'sanity'\n\nimport {ErrorCard} from '../components/ErrorCard'\nimport {MAX_TIME_TO_OVERLAYS_CONNECTION} from '../constants'\nimport {presentationLocaleNamespace} from '../i18n'\nimport {\n  ACTION_IFRAME_LOADED,\n  ACTION_IFRAME_RELOAD,\n  ACTION_PERSPECTIVE,\n  ACTION_VIEWPORT,\n  type DispatchPresentationAction,\n  type PresentationState,\n} from '../reducers/presentationReducer'\nimport type {PresentationParams} from '../types'\nimport {usePresentationTool} from '../usePresentationTool'\nimport {IFrame} from './IFrame'\nimport {PreviewLocationInput} from './PreviewLocationInput'\nimport {ShareUrlMenuItems} from './ShareUrlMenuItems'\n\nconst MotionFlex = motion(Flex)\n\nconst PERSPECTIVE_TITLE_KEY: Record<PresentationState['perspective'], string> = {\n  previewDrafts: 'preview-frame.perspective.previewDrafts.title',\n  published: 'preview-frame.perspective.published.title',\n}\n\nconst PERSPECTIVE_TONES: Record<PresentationState['perspective'], ButtonTone> = {\n  previewDrafts: 'caution',\n  published: 'positive',\n}\n\nconst PERSPECTIVE_ICONS: Record<PresentationState['perspective'], ComponentType> = {\n  previewDrafts: EditIcon,\n  published: PublishIcon,\n}\n\nexport interface PreviewFrameProps\n  extends Pick<PresentationState, 'iframe' | 'perspective' | 'viewport' | 'visualEditing'> {\n  dispatch: DispatchPresentationAction\n  initialUrl: URL\n  loadersConnection: ChannelStatus\n  navigatorEnabled: boolean\n  onPathChange: (nextPath: string) => void\n  onRefresh: (fallback: () => void) => void\n  openPopup: (url: string) => void\n  overlaysConnection: ChannelStatus\n  params: PresentationParams\n  targetOrigin: string\n  toggleNavigator?: () => void\n  toggleOverlay: () => void\n}\n\nexport const PreviewFrame = forwardRef<HTMLIFrameElement, PreviewFrameProps>(\n  function PreviewFrame(props, ref) {\n    const {\n      dispatch,\n      iframe,\n      initialUrl,\n      loadersConnection,\n      navigatorEnabled,\n      onPathChange,\n      onRefresh,\n      openPopup,\n      overlaysConnection,\n      params,\n      perspective,\n      targetOrigin,\n      toggleNavigator,\n      toggleOverlay,\n      viewport,\n      visualEditing: {overlaysEnabled},\n    } = props\n\n    const {t} = useTranslation(presentationLocaleNamespace)\n    const {devMode} = usePresentationTool()\n    const prefersReducedMotion = usePrefersReducedMotion()\n\n    const setDesktopMode = useCallback(\n      () => dispatch({type: ACTION_VIEWPORT, viewport: 'desktop'}),\n      [dispatch],\n    )\n    const setMobileMode = useCallback(\n      () => dispatch({type: ACTION_VIEWPORT, viewport: 'mobile'}),\n      [dispatch],\n    )\n    const loading = iframe.status === 'loading' || iframe.status === 'reloading'\n    const [timedOut, setTimedOut] = useState(false)\n    const refreshing = iframe.status === 'refreshing'\n    const [somethingIsWrong, setSomethingIsWrong] = useState(false)\n    const iframeIsBusy = loading || refreshing || overlaysConnection === 'connecting'\n\n    const previewLocationOrigin = useMemo(() => {\n      return targetOrigin === location.origin ? '' : targetOrigin\n    }, [targetOrigin])\n\n    const handleRefresh = useCallback(() => {\n      onRefresh(() => {\n        if (typeof ref === 'function' || !ref?.current) {\n          return\n        }\n        dispatch({type: ACTION_IFRAME_RELOAD})\n        // Funky way to reload an iframe without CORS issues\n        // eslint-disable-next-line no-self-assign\n        // ref.current.src = ref.current.src\n        ref.current.src = `${targetOrigin}${params.preview || '/'}`\n      })\n    }, [dispatch, onRefresh, params.preview, targetOrigin, ref])\n    const handleRetry = useCallback(() => {\n      if (typeof ref === 'function' || !ref?.current) {\n        return\n      }\n\n      ref.current.src = initialUrl.toString()\n\n      dispatch({type: ACTION_IFRAME_RELOAD})\n    }, [dispatch, ref, initialUrl])\n    const handleContinueAnyway = useCallback(() => {\n      setContinueAnyway(true)\n    }, [])\n\n    const [continueAnyway, setContinueAnyway] = useState(false)\n    const [showOverlaysConnectionStatus, setShowOverlaysConnectionState] = useState(false)\n    useEffect(() => {\n      if (loading || refreshing) {\n        return\n      }\n\n      if (overlaysConnection === 'connecting' || overlaysConnection === 'reconnecting') {\n        const timeout = setTimeout(() => {\n          setShowOverlaysConnectionState(true)\n        }, 1000)\n        return () => clearTimeout(timeout)\n      }\n      return\n    }, [overlaysConnection, loading, refreshing])\n\n    useEffect(() => {\n      if (loading || refreshing || !showOverlaysConnectionStatus) {\n        return\n      }\n      if (overlaysConnection === 'connected') {\n        setSomethingIsWrong(false)\n        setShowOverlaysConnectionState(false)\n        setTimedOut(false)\n        setContinueAnyway(false)\n      }\n      if (overlaysConnection === 'connecting') {\n        const timeout = setTimeout(() => {\n          setTimedOut(true)\n          // eslint-disable-next-line no-console\n          console.error(\n            `Unable to connect to visual editing. Make sure you've setup '@sanity/visual-editing' correctly`,\n          )\n        }, MAX_TIME_TO_OVERLAYS_CONNECTION)\n        return () => clearTimeout(timeout)\n      }\n      if (overlaysConnection === 'reconnecting') {\n        const timeout = setTimeout(() => {\n          setTimedOut(true)\n          setSomethingIsWrong(true)\n        }, MAX_TIME_TO_OVERLAYS_CONNECTION)\n        return () => clearTimeout(timeout)\n      }\n      if (overlaysConnection === 'disconnected') {\n        setSomethingIsWrong(true)\n      }\n      return\n    }, [loading, overlaysConnection, refreshing, showOverlaysConnectionStatus])\n\n    const previewLocationRoute = useMemo(() => {\n      const previewUrl = new URL(params.preview || '/', targetOrigin)\n      const {pathname, search} = withoutSecretSearchParams(previewUrl)\n\n      return `${pathname}${search}`\n    }, [params.preview, targetOrigin])\n\n    const onIFrameLoad = useCallback(() => {\n      dispatch({type: ACTION_IFRAME_LOADED})\n    }, [dispatch])\n\n    /**\n     * Ensure that clicking outside of menus and dialogs will close as focus shifts to the iframe\n     */\n    useEffect(() => {\n      if (typeof ref === 'function' || !ref?.current) {\n        return\n      }\n      const instance = ref.current\n      function handleBlur() {\n        if (instance !== document.activeElement) {\n          return\n        }\n\n        instance.dispatchEvent(new MouseEvent('mousedown', {bubbles: true, cancelable: true}))\n      }\n      window.addEventListener('blur', handleBlur)\n      return () => {\n        window.removeEventListener('blur', handleBlur)\n      }\n    }, [ref])\n\n    return (\n      <MotionConfig transition={prefersReducedMotion ? {duration: 0} : undefined}>\n        <TooltipDelayGroupProvider delay={1000}>\n          <Card flex=\"none\" padding={2} shadow={1} style={{position: 'relative'}}>\n            <Flex align=\"center\" style={{minHeight: 0}}>\n              {toggleNavigator && (\n                <Box flex=\"none\" marginRight={1} padding={1}>\n                  <Tooltip\n                    animate\n                    content={\n                      <Text size={1}>{t('preview-frame.navigator.toggle-button.tooltip')}</Text>\n                    }\n                    fallbackPlacements={['bottom-start']}\n                    padding={2}\n                    placement=\"bottom\"\n                    portal\n                  >\n                    <Button\n                      aria-label={t('preview-frame.navigator.toggle-button.aria-label')}\n                      fontSize={1}\n                      icon={PanelLeftIcon}\n                      mode=\"bleed\"\n                      onClick={toggleNavigator}\n                      padding={2}\n                      selected={navigatorEnabled}\n                    />\n                  </Tooltip>\n                </Box>\n              )}\n\n              <Tooltip\n                animate\n                content={\n                  <Flex align=\"center\" style={{whiteSpace: 'nowrap'}}>\n                    <Box padding={1}>\n                      <Text size={1}>\n                        {t('preview-frame.overlay.toggle-button.tooltip', {\n                          context: overlaysEnabled ? 'disable' : 'enable',\n                        })}\n                      </Text>\n                    </Box>\n                    <Box paddingY={1}>\n                      <Hotkeys keys={['Alt']} style={{marginTop: -4, marginBottom: -4}} />\n                    </Box>\n                  </Flex>\n                }\n                fallbackPlacements={['bottom-start']}\n                padding={1}\n                placement=\"bottom\"\n                portal\n              >\n                <Card\n                  as=\"label\"\n                  flex=\"none\"\n                  marginRight={1}\n                  padding={3}\n                  style={{\n                    lineHeight: 0,\n                    borderRadius: 999,\n                    userSelect: 'none',\n                  }}\n                  tone={overlaysEnabled ? 'transparent' : undefined}\n                >\n                  <Flex align=\"center\" gap={3}>\n                    <div style={{margin: -4}}>\n                      <Switch\n                        checked={overlaysEnabled}\n                        onChange={toggleOverlay}\n                        disabled={iframe.status === 'loading' || overlaysConnection !== 'connected'}\n                      />\n                    </div>\n                    <Box>\n                      <Text muted={!overlaysEnabled} size={1} weight=\"medium\">\n                        {t('preview-frame.overlay.toggle-button.text')}\n                      </Text>\n                    </Box>\n                  </Flex>\n                </Card>\n              </Tooltip>\n\n              <Box flex={1} marginX={1}>\n                <PreviewLocationInput\n                  prefix={\n                    <Box padding={1}>\n                      <Tooltip\n                        animate\n                        content={\n                          <Text size={1}>\n                            {iframe.status === 'loaded'\n                              ? t('preview-frame.refresh-button.tooltip')\n                              : t('preview-frame.status', {context: iframe.status})}\n                          </Text>\n                        }\n                        fallbackPlacements={['bottom-start']}\n                        padding={2}\n                        placement=\"bottom\"\n                        portal\n                      >\n                        <Button\n                          aria-label={t('preview-frame.refresh-button.aria-label')}\n                          fontSize={1}\n                          icon={RefreshIcon}\n                          mode=\"bleed\"\n                          loading={iframe.status === 'reloading' || iframe.status === 'refreshing'}\n                          onClick={handleRefresh}\n                          padding={2}\n                        />\n                      </Tooltip>\n                    </Box>\n                  }\n                  onChange={onPathChange}\n                  origin={previewLocationOrigin}\n                  suffix={\n                    <Box padding={1}>\n                      <MenuButton\n                        button={\n                          <Button\n                            fontSize={1}\n                            iconRight={ShareIcon}\n                            mode=\"bleed\"\n                            padding={2}\n                            space={2}\n                          />\n                        }\n                        id=\"location-menu\"\n                        menu={\n                          <Menu>\n                            <ShareUrlMenuItems\n                              initialUrl={initialUrl}\n                              openPopup={openPopup}\n                              previewLocationOrigin={previewLocationOrigin}\n                              previewLocationRoute={previewLocationRoute}\n                            />\n                          </Menu>\n                        }\n                        popover={{\n                          animate: true,\n                          constrainSize: true,\n                          placement: 'bottom',\n                          portal: true,\n                        }}\n                      />\n                    </Box>\n                  }\n                  value={previewLocationRoute}\n                />\n              </Box>\n\n              <Flex align=\"center\" flex=\"none\" gap={1} padding={1}>\n                <MenuButton\n                  button={\n                    <Button\n                      fontSize={1}\n                      iconRight={ChevronDownIcon}\n                      mode=\"bleed\"\n                      padding={2}\n                      space={2}\n                      text={t(\n                        PERSPECTIVE_TITLE_KEY[\n                          loadersConnection === 'connected' ? perspective : 'previewDrafts'\n                        ],\n                      )}\n                      loading={loadersConnection === 'reconnecting' && iframe.status !== 'loaded'}\n                      disabled={loadersConnection !== 'connected'}\n                    />\n                  }\n                  id=\"perspective-menu\"\n                  menu={\n                    <Menu style={{maxWidth: 240}}>\n                      <MenuItem\n                        fontSize={1}\n                        onClick={() =>\n                          dispatch({\n                            type: ACTION_PERSPECTIVE,\n                            perspective: 'previewDrafts',\n                          })\n                        }\n                        padding={3}\n                        pressed={perspective === 'previewDrafts'}\n                        tone={PERSPECTIVE_TONES.previewDrafts}\n                      >\n                        <Flex align=\"flex-start\" gap={3}>\n                          <Box flex=\"none\">\n                            <Text size={1}>{createElement(PERSPECTIVE_ICONS.previewDrafts)}</Text>\n                          </Box>\n                          <Stack flex={1} space={2}>\n                            <Text size={1} weight=\"medium\">\n                              {t(PERSPECTIVE_TITLE_KEY['previewDrafts'])}\n                            </Text>\n                            <Text muted size={1}>\n                              {t('preview-frame.perspective.previewDrafts.text')}\n                            </Text>\n                          </Stack>\n                          <Box flex=\"none\">\n                            <Text\n                              muted\n                              size={1}\n                              style={{\n                                opacity: perspective === 'previewDrafts' ? 1 : 0,\n                              }}\n                            >\n                              <CheckmarkIcon />\n                            </Text>\n                          </Box>\n                        </Flex>\n                      </MenuItem>\n                      <MenuItem\n                        fontSize={1}\n                        onClick={() =>\n                          dispatch({\n                            type: ACTION_PERSPECTIVE,\n                            perspective: 'published',\n                          })\n                        }\n                        padding={3}\n                        pressed={perspective === 'published'}\n                        tone={PERSPECTIVE_TONES.published}\n                      >\n                        <Flex align=\"flex-start\" gap={3}>\n                          <Box flex=\"none\">\n                            <Text size={1}>{createElement(PERSPECTIVE_ICONS.published)}</Text>\n                          </Box>\n                          <Stack flex={1} space={2}>\n                            <Text size={1} weight=\"medium\">\n                              {t(PERSPECTIVE_TITLE_KEY['published'])}\n                            </Text>\n                            <Text muted size={1}>\n                              {t('preview-frame.perspective.published.text')}\n                            </Text>\n                          </Stack>\n                          <Box flex=\"none\">\n                            <Text\n                              muted\n                              size={1}\n                              style={{\n                                opacity: perspective === 'published' ? 1 : 0,\n                              }}\n                            >\n                              <CheckmarkIcon />\n                            </Text>\n                          </Box>\n                        </Flex>\n                      </MenuItem>\n                    </Menu>\n                  }\n                  popover={{\n                    animate: true,\n                    constrainSize: true,\n                    placement: 'bottom',\n                    portal: true,\n                  }}\n                />\n              </Flex>\n\n              <Flex align=\"center\" flex=\"none\" gap={1} padding={1}>\n                <Tooltip\n                  animate\n                  content={<Text size={1}>{t('preview-frame.viewport-full-button.tooltip')}</Text>}\n                  fallbackPlacements={['bottom-start']}\n                  padding={2}\n                  placement=\"bottom\"\n                  portal\n                >\n                  <Button\n                    aria-label={t('preview-frame.viewport-full-button.aria-label')}\n                    fontSize={1}\n                    icon={DesktopIcon}\n                    mode=\"bleed\"\n                    onClick={setDesktopMode}\n                    padding={2}\n                    selected={viewport === 'desktop'}\n                  />\n                </Tooltip>\n                <Tooltip\n                  animate\n                  content={\n                    <Text size={1}>{t('preview-frame.viewport-narrow-button.tooltip')}</Text>\n                  }\n                  padding={2}\n                  placement=\"bottom\"\n                  portal\n                >\n                  <Button\n                    aria-label={t('preview-frame.viewport-narrow-button.aria-label')}\n                    fontSize={1}\n                    icon={MobileDeviceIcon}\n                    mode=\"bleed\"\n                    onClick={setMobileMode}\n                    padding={2}\n                    selected={viewport === 'mobile'}\n                  />\n                </Tooltip>\n              </Flex>\n            </Flex>\n          </Card>\n\n          <Card flex={1} tone=\"transparent\">\n            <Flex\n              align=\"center\"\n              height=\"fill\"\n              justify=\"center\"\n              padding={viewport === 'desktop' ? 0 : 2}\n              sizing=\"border\"\n              style={{\n                position: 'relative',\n                cursor: iframeIsBusy ? 'wait' : undefined,\n              }}\n            >\n              <AnimatePresence>\n                {!somethingIsWrong &&\n                !loading &&\n                !refreshing &&\n                showOverlaysConnectionStatus &&\n                !continueAnyway ? (\n                  <MotionFlex\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={spinnerVariants}\n                    justify=\"center\"\n                    align=\"center\"\n                    style={{\n                      inset: '0',\n                      position: 'absolute',\n                      backdropFilter: timedOut\n                        ? 'blur(16px) saturate(0.5) grayscale(0.5)'\n                        : 'blur(2px)',\n                      ['transition' as string]: 'backdrop-filter 0.2s ease-in-out',\n                      // @TODO Because of Safari we have to do this\n                      WebkitBackdropFilter: timedOut\n                        ? 'blur(16px) saturate(0.5) grayscale(0.5)'\n                        : 'blur(2px)',\n                      WebkitTransition: '-webkit-backdrop-filter 0.2s ease-in-out',\n                      zIndex: 1,\n                    }}\n                  >\n                    <Flex\n                      style={{...sizes[viewport]}}\n                      justify=\"center\"\n                      align=\"center\"\n                      direction=\"column\"\n                      gap={4}\n                    >\n                      {timedOut && (\n                        <Button\n                          disabled\n                          fontSize={1}\n                          mode=\"ghost\"\n                          text={t('preview-frame.continue-button.text')}\n                          style={{opacity: 0}}\n                        />\n                      )}\n                      <Card\n                        radius={2}\n                        tone={timedOut ? 'caution' : 'inherit'}\n                        padding={4}\n                        shadow={1}\n                      >\n                        <Flex justify=\"center\" align=\"center\" direction=\"column\" gap={4}>\n                          <Spinner muted />\n                          <Text muted size={1}>\n                            {timedOut\n                              ? t('preview-frame.status', {context: 'timeout'})\n                              : t('preview-frame.status', {context: 'connecting'})}\n                          </Text>\n                        </Flex>\n                      </Card>\n                      {timedOut && (\n                        <Button\n                          fontSize={1}\n                          // mode=\"ghost\"\n                          tone=\"critical\"\n                          onClick={handleContinueAnyway}\n                          text={t('preview-frame.continue-button.text')}\n                        />\n                      )}\n                    </Flex>\n                  </MotionFlex>\n                ) : (loading ||\n                    (overlaysConnection === 'connecting' && iframe.status !== 'refreshing')) &&\n                  !continueAnyway ? (\n                  <MotionFlex\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={spinnerVariants}\n                    justify=\"center\"\n                    align=\"center\"\n                    style={{\n                      inset: '0',\n                      position: 'absolute',\n                      // boxShadow: '0 0 0 1px var(--card-shadow-outline-color)',\n                    }}\n                  >\n                    <Flex\n                      style={{...sizes[viewport]}}\n                      justify=\"center\"\n                      align=\"center\"\n                      direction=\"column\"\n                      gap={4}\n                    >\n                      <Spinner muted />\n                      <Text muted size={1}>\n                        {t('preview-frame.status', {context: 'loading'})}\n                      </Text>\n                    </Flex>\n                  </MotionFlex>\n                ) : somethingIsWrong && !continueAnyway ? (\n                  <MotionFlex\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={errorVariants}\n                    justify=\"center\"\n                    align=\"center\"\n                    style={{\n                      background: 'var(--card-bg-color)',\n                      inset: '0',\n                      position: 'absolute',\n                      borderTop: '1px solid transparent',\n                      boxShadow: '0 0 0 1px var(--card-border-color)',\n                    }}\n                  >\n                    <ErrorCard\n                      flex={1}\n                      message={t('preview-frame.connection.error.text')}\n                      onRetry={handleRetry}\n                      onContinueAnyway={handleContinueAnyway}\n                    >\n                      {devMode && (\n                        <>\n                          {overlaysConnection !== 'connected' && (\n                            <Card padding={3} radius={2} tone=\"critical\">\n                              <Stack space={3}>\n                                <Label muted size={0}>\n                                  {t('preview-frame.overlay.connection-status.label')}\n                                </Label>\n                                <Code size={1}>\n                                  {t('channel.status', {context: overlaysConnection})}\n                                </Code>\n                              </Stack>\n                            </Card>\n                          )}\n\n                          {loadersConnection !== 'connected' && (\n                            <Card padding={3} radius={2} tone=\"critical\">\n                              <Stack space={3}>\n                                <Label muted size={0}>\n                                  {t('preview-frame.loader.connection-status.label')}\n                                </Label>\n                                <Code size={1}>\n                                  {t('channel.status', {context: loadersConnection})}\n                                </Code>\n                              </Stack>\n                            </Card>\n                          )}\n                        </>\n                      )}\n                    </ErrorCard>\n                  </MotionFlex>\n                ) : null}\n              </AnimatePresence>\n              <IFrame\n                ref={ref}\n                style={{\n                  pointerEvents:\n                    (loading ||\n                      (overlaysConnection === 'connecting' && iframe.status !== 'refreshing')) &&\n                    !continueAnyway\n                      ? 'none'\n                      : 'auto',\n                  boxShadow: '0 0 0 1px var(--card-border-color)',\n                  borderTop: '1px solid transparent',\n                }}\n                src={initialUrl.toString()}\n                initial={['background']}\n                variants={iframeVariants}\n                animate={[\n                  (loading ||\n                    (overlaysConnection === 'connecting' && iframe.status !== 'refreshing')) &&\n                  !continueAnyway\n                    ? 'background'\n                    : 'active',\n                  loading ? 'reloading' : 'idle',\n                  viewport,\n                  showOverlaysConnectionStatus && !continueAnyway ? 'timedOut' : '',\n                ]}\n                onLoad={onIFrameLoad}\n              />\n            </Flex>\n          </Card>\n        </TooltipDelayGroupProvider>\n      </MotionConfig>\n    )\n  },\n)\n\nconst sizes = {\n  desktop: {\n    width: '100%',\n    height: '100%',\n  },\n  mobile: {\n    width: 375,\n    height: 650,\n  },\n}\n\nconst spinnerVariants = {\n  initial: {opacity: 1},\n  animate: {opacity: [0, 0, 1]},\n  exit: {opacity: [1, 0, 0]},\n}\n\nconst errorVariants = {\n  initial: {opacity: 1},\n  animate: {opacity: [0, 0, 1]},\n  exit: {opacity: [1, 0, 0]},\n}\n\nconst iframeVariants = {\n  desktop: {\n    ...sizes.desktop,\n    boxShadow: '0 0 0 0px var(--card-border-color)',\n  },\n  mobile: {\n    ...sizes.mobile,\n    boxShadow: '0 0 0 1px var(--card-border-color)',\n  },\n  background: {\n    opacity: 0,\n    scale: 1,\n  },\n  idle: {\n    scale: 1,\n  },\n  reloading: {\n    scale: [1, 1, 1, 0.98],\n  },\n  active: {\n    opacity: [0, 0, 1],\n    scale: 1,\n  },\n  timedOut: {\n    opacity: [0, 0, 1],\n  },\n}\n","import type {ClientPerspective} from '@sanity/client'\nimport isEqual from 'fast-deep-equal'\nimport {type MutableRefObject, useCallback, useMemo, useRef, useState} from 'react'\n\nimport type {PresentationState} from './reducers/presentationReducer'\nimport type {FrameState} from './types'\n\nexport type DocumentOnPage = {\n  _id: string\n  _type: string\n}\n\ntype DocumentCache = Record<string, DocumentOnPage>\ntype KeyedDocumentCache = Record<string, DocumentCache>\n\nlet warnedAboutCrossDatasetReference = false\n\nexport function useDocumentsOnPage(\n  perspective: PresentationState['perspective'],\n  frameStateRef: MutableRefObject<FrameState>,\n): [\n  DocumentOnPage[],\n  (key: string, perspective: PresentationState['perspective'], state: DocumentOnPage[]) => void,\n] {\n  if (perspective !== 'published' && perspective !== 'previewDrafts') {\n    throw new Error(`Invalid perspective: ${perspective}`)\n  }\n\n  const [published, setPublished] = useState<KeyedDocumentCache>({})\n  const [previewDrafts, setPreviewDrafts] = useState<KeyedDocumentCache>({})\n\n  // Used to compare the frame url with its value when the cache was last updated\n  // If the url has changed, the entire cache is replaced\n  const urlRef = useRef<string | undefined>('')\n\n  const setDocumentsOnPage = useCallback(\n    (key: string, perspective: ClientPerspective, sourceDocuments: DocumentOnPage[] = []) => {\n      const documents = sourceDocuments.filter((sourceDocument) => {\n        if ('_projectId' in sourceDocument && sourceDocument._projectId) {\n          // @TODO Handle cross dataset references\n          if (!warnedAboutCrossDatasetReference) {\n            // eslint-disable-next-line no-console\n            console.warn(\n              'Cross dataset references are not supported yet, ignoring source document',\n              sourceDocument,\n            )\n            warnedAboutCrossDatasetReference = true\n          }\n          return false\n        }\n        return sourceDocument\n      })\n\n      const setCache = perspective === 'published' ? setPublished : setPreviewDrafts\n\n      setCache((cache) => {\n        // Create the `next` documents, dedupe by `_id`\n        const next: Record<string, DocumentOnPage> = {}\n        for (const document of documents) {\n          next[document._id] = document\n        }\n\n        // If the frame url has changed, replace the entire cache with the next documents\n        if (urlRef.current !== frameStateRef.current.url) {\n          urlRef.current = frameStateRef.current.url\n          return {[key]: next}\n        }\n\n        // If the keyed cache has changed, return the entire cache and replace the keyed part\n        const prev = cache[key]\n        if (!isEqual(prev, next)) {\n          return {...cache, [key]: next}\n        }\n\n        // Otherwise return the entire cache as is\n        return cache\n      })\n    },\n    [frameStateRef],\n  )\n\n  const documentsOnPage = useMemo(() => {\n    const keyedCache = perspective === 'published' ? published : previewDrafts\n    const uniqueDocuments = Object.values(keyedCache).reduce((acc, cache) => {\n      Object.values(cache).forEach((doc) => {\n        acc[doc._id] = doc\n      })\n      return acc\n    }, {})\n\n    return Object.values(uniqueDocuments)\n  }, [perspective, previewDrafts, published])\n\n  return [documentsOnPage, setDocumentsOnPage]\n}\n","import type {ResponseQueryOptions} from '@sanity/client'\nimport {match, type Path} from 'path-to-regexp'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {useClient} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {API_VERSION} from './constants'\nimport {useDocumentStore} from './internals'\nimport type {\n  DocumentResolver,\n  DocumentResolverContext,\n  MainDocument,\n  MainDocumentState,\n  PresentationNavigate,\n  PreviewUrlOption,\n} from './types'\n\n// Helper function to \"unwrap\" a result when it is either explicitly provided or\n// returned as the result of a passed function\nfunction fnOrObj<T, U>(arg: T | ((ctx: U) => T), context: U): T {\n  return arg instanceof Function ? arg(context) : arg\n}\n\nfunction getQueryFromResult(\n  resolver: DocumentResolver,\n  context: DocumentResolverContext,\n): string | undefined {\n  if (resolver.resolve) {\n    const filter = resolver.resolve(context)?.filter\n    return filter ? `*[${filter}][0]{_id, _type}` : undefined\n  }\n\n  if ('type' in resolver) {\n    return `*[_type == \"${resolver.type}\"][0]{_id, _type}`\n  }\n\n  return `*[${fnOrObj(resolver.filter, context)}][0]{_id, _type}`\n}\n\nfunction getParamsFromResult(\n  resolver: DocumentResolver,\n  context: DocumentResolverContext,\n): Record<string, string> {\n  if (resolver.resolve) {\n    return resolver.resolve(context)?.params ?? context.params\n  }\n\n  if ('type' in resolver) {\n    return {}\n  }\n\n  return fnOrObj(resolver.params, context) ?? context.params\n}\n\nexport function getRouteContext(route: Path, url: URL): DocumentResolverContext | undefined {\n  const routes = Array.isArray(route) ? route : [route]\n\n  for (route of routes) {\n    let origin: DocumentResolverContext['origin'] = undefined\n    let path = route\n\n    // Handle absolute URLs\n    if (typeof route === 'string') {\n      try {\n        const absolute = new URL(route)\n        origin = absolute.origin\n        path = absolute.pathname\n      } catch {\n        // Ignore, as we assume a relative path\n      }\n    }\n\n    // If an origin has been explicitly provided, check that it matches\n    if (origin && url.origin !== origin) continue\n\n    try {\n      const matcher = match<Record<string, string>>(path, {decode: decodeURIComponent})\n      const result = matcher(url.pathname)\n      if (result) {\n        const {params, path} = result\n        return {origin, params, path}\n      }\n    } catch (e) {\n      throw new Error(`\"${route}\" is not a valid route pattern`)\n    }\n  }\n  return undefined\n}\n\nexport function useMainDocument(props: {\n  navigate?: PresentationNavigate\n  path?: string\n  previewUrl?: PreviewUrlOption\n  resolvers?: DocumentResolver[]\n}): MainDocumentState | undefined {\n  const {navigate, resolvers = [], path, previewUrl} = props\n\n  const {state: routerState} = useRouter()\n  const documentStore = useDocumentStore()\n  const client = useClient({apiVersion: API_VERSION})\n\n  const [mainDocumentState, setMainDocumentState] = useState<MainDocumentState | undefined>(\n    undefined,\n  )\n  const mainDocumentIdRef = useRef<string | undefined>(undefined)\n\n  const url = useMemo(() => {\n    const relativeUrl =\n      path || routerState._searchParams?.find(([key]) => key === 'preview')?.[1] || ''\n\n    const base =\n      typeof previewUrl === 'string'\n        ? previewUrl\n        : typeof previewUrl === 'object'\n          ? previewUrl?.origin || location.origin\n          : location.origin\n\n    return new URL(relativeUrl, base)\n  }, [path, previewUrl, routerState._searchParams])\n\n  const clearState = useCallback(() => {\n    setMainDocumentState(undefined)\n    mainDocumentIdRef.current = undefined\n  }, [])\n\n  useEffect(() => {\n    if (resolvers.length && url) {\n      let result:\n        | {\n            context: DocumentResolverContext\n            resolver: DocumentResolver\n          }\n        | undefined\n\n      for (const resolver of resolvers) {\n        const context = getRouteContext(resolver.route, url)\n        if (context) {\n          result = {context, resolver}\n          break\n        }\n      }\n\n      if (result) {\n        const query = getQueryFromResult(result.resolver, result.context)\n        const params = getParamsFromResult(result.resolver, result.context)\n\n        if (query) {\n          const controller = new AbortController()\n          const options: ResponseQueryOptions = {\n            perspective: 'previewDrafts',\n            signal: controller.signal,\n          }\n\n          client\n            .fetch<MainDocument | undefined>(query, params, options)\n            .then((doc) => {\n              if (!doc || mainDocumentIdRef.current !== doc._id) {\n                setMainDocumentState({\n                  document: doc,\n                  path: url.pathname,\n                })\n                navigate?.({\n                  id: doc?._id,\n                  type: doc?._type,\n                })\n                mainDocumentIdRef.current = doc?._id\n              }\n            })\n            .catch((e) => {\n              if (e instanceof Error && e.name === 'AbortError') return\n              setMainDocumentState({document: undefined, path: url.pathname})\n              mainDocumentIdRef.current = undefined\n            })\n          return () => {\n            controller.abort()\n          }\n        }\n      }\n    }\n    clearState()\n    return undefined\n  }, [client, clearState, documentStore, navigate, resolvers, url])\n\n  return mainDocumentState\n}\n","import {urlStringToPath} from '@repo/visual-editing-helpers'\nimport {studioPath} from '@sanity/client/csm'\n\nimport type {PresentationStateParams} from '../types'\n\nexport function parseId(rawId: string | undefined): string | undefined {\n  if (rawId === undefined) {\n    return undefined\n  }\n\n  const segments = decodeURIComponent(rawId)?.split('.')\n\n  if (segments[0] === 'drafts') {\n    segments.shift()\n  }\n\n  return segments.join('.')\n}\n\nexport function parsePath(rawPath: string | undefined): string | undefined {\n  if (rawPath === undefined) {\n    return undefined\n  }\n\n  return studioPath.toString(urlStringToPath(decodeURIComponent(rawPath)))\n}\n\nexport function parseRouterState(state: PresentationStateParams): PresentationStateParams {\n  return {\n    id: parseId(state.id),\n    path: parsePath(state.path),\n    type: state.type,\n  }\n}\n","import {type MutableRefObject, useCallback, useEffect, useMemo, useRef} from 'react'\nimport type {RouterContextValue, RouterState, SearchParam} from 'sanity/router'\n\nimport {getPublishedId} from './internals'\nimport {parseRouterState} from './lib/parse'\nimport type {\n  FrameState,\n  PresentationNavigate,\n  PresentationParams,\n  PresentationSearchParams,\n  PresentationStateParams,\n  StructureDocumentPaneParams,\n} from './types'\n\nfunction pruneObject<T extends RouterState | PresentationParams>(obj: T): T {\n  return Object.fromEntries(\n    Object.entries(obj).filter(\n      ([, value]) => value !== undefined && value !== '' && value !== null,\n    ),\n  ) as T\n}\n\nexport function useParams({\n  initialPreviewUrl,\n  routerNavigate,\n  routerState,\n  routerSearchParams,\n  frameStateRef,\n}: {\n  initialPreviewUrl: URL\n  routerNavigate: RouterContextValue['navigate']\n  routerState: RouterState & PresentationStateParams\n  routerSearchParams: {\n    [k: string]: string\n  }\n  frameStateRef: MutableRefObject<FrameState>\n}): {\n  navigate: PresentationNavigate\n  params: PresentationParams\n  structureParams: StructureDocumentPaneParams\n} {\n  const params = useMemo<PresentationParams>(() => {\n    const {id, path, type} = parseRouterState(routerState)\n\n    return {\n      id,\n      type,\n      path,\n      preview:\n        routerSearchParams['preview'] || `${initialPreviewUrl.pathname}${initialPreviewUrl.search}`,\n      perspective: routerSearchParams['perspective'],\n      viewport: routerSearchParams['viewport'],\n      inspect: routerSearchParams['inspect'],\n      rev: routerSearchParams['rev'],\n      prefersLatestPublished: routerSearchParams['prefersLatestPublished'],\n      since: routerSearchParams['since'],\n      template: routerSearchParams['template'],\n      templateParams: routerSearchParams['templateParams'],\n      view: routerSearchParams['view'],\n      // assist\n      pathKey: routerSearchParams['pathKey'],\n      instruction: routerSearchParams['instruction'],\n      // comments\n      comment: routerSearchParams['comment'],\n    }\n  }, [routerState, routerSearchParams, initialPreviewUrl])\n\n  const structureParams = useMemo<StructureDocumentPaneParams>(() => {\n    const pruned = pruneObject({\n      inspect: params.inspect,\n      path: params.path,\n      rev: params.rev,\n      prefersLatestPublished: params.prefersLatestPublished,\n      since: params.since,\n      template: params.template,\n      templateParams: params.templateParams,\n      view: params.view,\n      // assist\n      pathKey: params.pathKey,\n      instruction: params.instruction,\n      // comments\n      comment: params.comment,\n    })\n    return pruned\n  }, [\n    params.comment,\n    params.inspect,\n    params.instruction,\n    params.path,\n    params.pathKey,\n    params.prefersLatestPublished,\n    params.rev,\n    params.since,\n    params.template,\n    params.templateParams,\n    params.view,\n  ])\n\n  const routerStateRef = useRef(routerState)\n\n  useEffect(() => {\n    routerStateRef.current = routerState\n  }, [routerState])\n\n  const navigate = useCallback<PresentationNavigate>(\n    (nextState, nextSearchState = {}, forceReplace) => {\n      // Force navigation to use published IDs only\n      if (nextState.id) nextState.id = getPublishedId(nextState.id)\n\n      // Extract type, id and path as 'routerState'\n      const {_searchParams: routerSearchParams, ...routerState} = routerStateRef.current\n\n      // Convert array of search params to an object\n      const routerSearchState = (routerSearchParams || []).reduce(\n        (acc, [key, value]) => ((acc[key as keyof PresentationSearchParams] = value), acc),\n        {} as PresentationSearchParams,\n      )\n\n      // Merge routerState and incoming state\n      const state: RouterState = pruneObject({\n        ...routerState,\n        ...nextState,\n      })\n\n      // Merge routerSearchState and incoming searchState\n      const searchState = pruneObject({\n        ...routerSearchState,\n        ...nextSearchState,\n      })\n\n      // If the document has changed, clear the template and templateParams\n      if (routerState.id !== state['id']) {\n        delete searchState.template\n        delete searchState.templateParams\n      }\n\n      state._searchParams = Object.entries(searchState).reduce(\n        (acc, [key, value]) => [...acc, [key, value]],\n        [] as SearchParam[],\n      )\n\n      const replace = forceReplace ?? searchState.preview === frameStateRef.current.url\n\n      routerNavigate(state, {replace})\n    },\n    [routerNavigate, frameStateRef],\n  )\n\n  return {\n    structureParams,\n    navigate,\n    params,\n  }\n}\n","import {createPreviewSecret} from '@sanity/preview-url-secret/create-secret'\nimport {definePreviewUrl} from '@sanity/preview-url-secret/define-preview-url'\nimport {startTransition, useEffect, useMemo, useRef, useState} from 'react'\nimport {type SanityClient, useClient, useCurrentUser} from 'sanity'\nimport {suspend} from 'suspend-react'\n\nimport {API_VERSION} from './constants'\nimport {useActiveWorkspace} from './internals'\nimport type {PreviewUrlOption} from './types'\n\nexport function usePreviewUrl(\n  previewUrl: PreviewUrlOption,\n  toolName: string,\n  previewSearchParam: string | null,\n): URL {\n  const client = useClient({apiVersion: API_VERSION})\n  const workspace = useActiveWorkspace()\n  const basePath = workspace?.activeWorkspace?.basePath || '/'\n  const workspaceName = workspace?.activeWorkspace?.name || 'default'\n  const deps = useSuspendCacheKeys(toolName, basePath, workspaceName, previewSearchParam)\n  const previewUrlSecret = usePreviewUrlSecret(\n    typeof previewUrl === 'object' || typeof previewUrl === 'function',\n    deps,\n  )\n\n  return suspend(async () => {\n    if (typeof previewUrl === 'string') {\n      const resolvedUrl = new URL(previewUrl, location.origin)\n      let resultUrl = resolvedUrl\n      try {\n        if (previewSearchParam) {\n          const restoredUrl = new URL(previewSearchParam, resolvedUrl)\n          if (restoredUrl.origin === resolvedUrl.origin) {\n            resultUrl = restoredUrl\n          }\n        } else if (document.referrer) {\n          const referrerUrl = new URL(document.referrer)\n          if (referrerUrl.origin === resolvedUrl.origin) {\n            resultUrl = referrerUrl\n          }\n        }\n      } catch {\n        // ignore\n      }\n      // Prevent infinite recursion\n      if (\n        location.origin === resultUrl.origin &&\n        (resultUrl.pathname.startsWith(`${basePath}/`) || resultUrl.pathname === basePath)\n      ) {\n        return resolvedUrl\n      }\n      return resultUrl\n    }\n    const resolvePreviewUrl =\n      typeof previewUrl === 'object' ? definePreviewUrl<SanityClient>(previewUrl) : previewUrl\n    const resolvedUrl = await resolvePreviewUrl({\n      client,\n      previewUrlSecret: previewUrlSecret!,\n      previewSearchParam,\n      referrer: typeof document === 'undefined' ? null : document.referrer,\n      studioBasePath: basePath,\n    })\n    return new URL(resolvedUrl, location.origin)\n  }, [...deps, previewUrlSecret]) satisfies URL\n}\n\n// https://github.com/pmndrs/suspend-react?tab=readme-ov-file#making-cache-keys-unique\nconst resolveUUID = Symbol()\n\nfunction useSuspendCacheKeys(\n  toolName: string,\n  basePath: string,\n  workspaceName: string,\n  previewSearchParam: string | null,\n) {\n  // Allow busting the cache when the Presentation Tool is reloaded, without causing it to suspend on every render that changes the `preview` parameter\n  const [cachedPreviewSearchParam, setCachedPreviewSearchParam] = useState(\n    () => previewSearchParam || '',\n  )\n  const timeoutRef = useRef(0)\n  useEffect(() => {\n    if (cachedPreviewSearchParam && previewSearchParam) {\n      // Handle resets, like when the Presentation Tool is clicked in the navbar\n      window.clearTimeout(timeoutRef.current)\n      return () => {\n        timeoutRef.current = window.setTimeout(() => {\n          setCachedPreviewSearchParam('')\n        }, 100)\n      }\n    }\n    return\n  }, [cachedPreviewSearchParam, previewSearchParam])\n\n  const currentUser = useCurrentUser()\n  return useMemo(\n    () => [\n      // Cache based on a few specific conditions\n      '@sanity/presentation',\n      basePath,\n      workspaceName,\n      toolName,\n      currentUser?.id,\n      resolveUUID,\n      cachedPreviewSearchParam,\n    ],\n    [basePath, currentUser?.id, toolName, workspaceName, cachedPreviewSearchParam],\n  )\n}\n\nfunction usePreviewUrlSecret(enabled: boolean, deps: (string | symbol | undefined)[]) {\n  const client = useClient({apiVersion: API_VERSION})\n  const currentUser = useCurrentUser()\n  const [secretLastExpiredAt, setSecretLastExpiredAt] = useState<string>('')\n\n  const previewUrlSecret = enabled\n    ? suspend(async () => {\n        return await createPreviewSecret(\n          client,\n          '@sanity/presentation',\n          typeof window === 'undefined' ? '' : location.href,\n          currentUser?.id,\n        )\n      }, [...deps, secretLastExpiredAt])\n    : null\n\n  useEffect(() => {\n    if (!previewUrlSecret) return\n    const timeout = setTimeout(() => {\n      startTransition(() => setSecretLastExpiredAt(previewUrlSecret.expiresAt.toString()))\n    }, previewUrlSecret.expiresAt.getTime() - Date.now())\n    return () => clearTimeout(timeout)\n  }, [previewUrlSecret])\n\n  return previewUrlSecret?.secret || null\n}\n","import {type ChannelsController, type ChannelStatus, createChannelsController} from '@repo/channels'\nimport {\n  getQueryCacheKey,\n  isAltKey,\n  isHotkey,\n  type LoaderMsg,\n  type OverlayMsg,\n  type PresentationMsg,\n  type PreviewKitMsg,\n  type VisualEditingConnectionIds,\n  type VisualEditingMsg,\n} from '@repo/visual-editing-helpers'\nimport {studioPath} from '@sanity/client/csm'\nimport {BoundaryElementProvider, Flex} from '@sanity/ui'\nimport {\n  lazy,\n  type ReactElement,\n  Suspense,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react'\nimport {type Path, type SanityDocument, type Tool, useDataset, useProjectId} from 'sanity'\nimport {type RouterContextValue, useRouter} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  DEFAULT_TOOL_NAME,\n  EDIT_INTENT_MODE,\n  MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n} from './constants'\nimport {type CommentIntentGetter, useUnique, useWorkspace} from './internals'\nimport {debounce} from './lib/debounce'\nimport {Panel} from './panels/Panel'\nimport {Panels} from './panels/Panels'\nimport {PresentationContent} from './PresentationContent'\nimport {PresentationNavigateProvider} from './PresentationNavigateProvider'\nimport {usePresentationNavigator} from './PresentationNavigator'\nimport {PresentationParamsProvider} from './PresentationParamsProvider'\nimport {PresentationProvider} from './PresentationProvider'\nimport {PreviewFrame} from './preview/PreviewFrame'\nimport {\n  ACTION_IFRAME_LOADED,\n  ACTION_IFRAME_REFRESH,\n  ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE,\n  presentationReducer,\n  presentationReducerInit,\n} from './reducers/presentationReducer'\nimport type {\n  FrameState,\n  LiveQueriesState,\n  LiveQueriesStateValue,\n  PresentationNavigate,\n  PresentationPluginOptions,\n  PresentationStateParams,\n  StructureDocumentPaneParams,\n} from './types'\nimport {useDocumentsOnPage} from './useDocumentsOnPage'\nimport {useMainDocument} from './useMainDocument'\nimport {useParams} from './useParams'\nimport {usePreviewUrl} from './usePreviewUrl'\n\nconst LoaderQueries = lazy(() => import('./loader/LoaderQueries'))\nconst PostMessageRefreshMutations = lazy(() => import('./editor/PostMessageRefreshMutations'))\n\nconst Container = styled(Flex)`\n  overflow-x: auto;\n`\n\nexport default function PresentationTool(props: {\n  tool: Tool<PresentationPluginOptions>\n}): ReactElement {\n  const {previewUrl: _previewUrl, components} = props.tool.options ?? {}\n  const name = props.tool.name || DEFAULT_TOOL_NAME\n  const {unstable_navigator} = components || {}\n\n  const {navigate: routerNavigate, state: routerState} = useRouter() as RouterContextValue & {\n    state: PresentationStateParams\n  }\n  const routerSearchParams = useUnique(Object.fromEntries(routerState._searchParams || []))\n\n  const initialPreviewUrl = usePreviewUrl(\n    _previewUrl || '/',\n    name,\n    routerSearchParams['preview'] || null,\n  )\n\n  const [devMode] = useState(() => {\n    const option = props.tool.options?.devMode\n\n    if (typeof option === 'function') return option()\n    if (typeof option === 'boolean') return option\n\n    return typeof window !== 'undefined' && window.location.hostname === 'localhost'\n  })\n\n  const targetOrigin = useMemo(() => {\n    return initialPreviewUrl.origin\n  }, [initialPreviewUrl.origin])\n\n  const iframeRef = useRef<HTMLIFrameElement>(null)\n\n  const [channel, setChannel] =\n    useState<ChannelsController<VisualEditingConnectionIds, PresentationMsg | LoaderMsg>>()\n\n  const [liveQueries, setLiveQueries] = useState<LiveQueriesState>({})\n\n  const frameStateRef = useRef<FrameState>({\n    title: undefined,\n    url: undefined,\n  })\n\n  const {\n    navigate: _navigate,\n    params,\n    structureParams,\n  } = useParams({\n    initialPreviewUrl,\n    routerNavigate,\n    routerState,\n    routerSearchParams,\n    frameStateRef,\n  })\n\n  // Most navigation events should be debounced, so use this unless explicitly needed\n  const navigate = useMemo(() => debounce<PresentationNavigate>(_navigate, 50), [_navigate])\n\n  const [state, dispatch] = useReducer(\n    presentationReducer,\n    {\n      perspective: params.perspective,\n      viewport: params.viewport,\n    },\n    presentationReducerInit,\n  )\n\n  const [documentsOnPage, setDocumentsOnPage] = useDocumentsOnPage(state.perspective, frameStateRef)\n\n  const projectId = useProjectId()\n  const dataset = useDataset()\n\n  const mainDocumentState = useMainDocument({\n    resolvers: props.tool.options?.resolve?.mainDocuments,\n    previewUrl: props.tool.options?.previewUrl,\n    path: params.preview,\n    // Prevent flash of content by using immediate navigation\n    navigate: _navigate,\n  })\n\n  // Update the perspective and viewport when the param changes\n  useEffect(() => {\n    if (state.perspective !== params.perspective || state.viewport !== params.viewport) {\n      navigate(\n        {},\n        {\n          perspective: state.perspective === 'previewDrafts' ? undefined : state.perspective,\n          viewport: state.viewport === 'desktop' ? undefined : state.viewport,\n        },\n      )\n    }\n  }, [\n    params.perspective,\n    state.perspective,\n    navigate,\n    state.viewport,\n    params.viewport,\n    params.rev,\n    params.prefersLatestPublished,\n  ])\n\n  const [overlaysConnection, setOverlaysConnection] = useState<ChannelStatus>('connecting')\n  const [loadersConnection, setLoadersConnection] = useState<ChannelStatus>('connecting')\n  const [previewKitConnection, setPreviewKitConnection] = useState<ChannelStatus>('connecting')\n\n  const [popups] = useState<Set<Window>>(() => new Set())\n  const handleOpenPopup = useCallback(\n    (url: string) => {\n      const source = window.open(url, '_blank')\n      if (source) {\n        popups.add(source)\n      }\n    },\n    [popups],\n  )\n\n  useEffect(() => {\n    if (popups.size && channel) {\n      // loop popups and call channel.addSource\n      for (const source of popups) {\n        if (source && 'closed' in source && !source.closed) {\n          channel.addSource(source)\n        }\n      }\n    }\n  }, [channel, popups, popups.size])\n\n  // This workaround can be removed once the need to set prefersLatestPublished is no longer there\n  const perspectiveRef = useRef(state.perspective)\n  useEffect(() => {\n    perspectiveRef.current = state.perspective\n  }, [state.perspective])\n\n  useEffect(() => {\n    const target = iframeRef.current?.contentWindow\n\n    if (!target) return\n\n    const nextChannel = createChannelsController<\n      VisualEditingConnectionIds,\n      PresentationMsg | LoaderMsg,\n      LoaderMsg | OverlayMsg | VisualEditingMsg | PreviewKitMsg\n    >({\n      id: 'presentation',\n      target,\n      targetOrigin,\n      connectTo: [\n        {\n          id: 'overlays',\n          heartbeat: true,\n          onStatusUpdate: setOverlaysConnection,\n          onEvent(type, data) {\n            if ((type === 'visual-editing/focus' || type === 'overlay/focus') && 'id' in data) {\n              navigate(\n                {\n                  type: data.type,\n                  id: data.id,\n                  path: data.path,\n                },\n                {\n                  prefersLatestPublished:\n                    'isDraft' in data || perspectiveRef.current === 'previewDrafts'\n                      ? undefined\n                      : 'true',\n                },\n              )\n            } else if (type === 'visual-editing/navigate' || type === 'overlay/navigate') {\n              const {title, url} = data\n              if (frameStateRef.current.url !== url) {\n                navigate({}, {preview: url})\n              }\n              frameStateRef.current = {title, url}\n            } else if (type === 'visual-editing/meta') {\n              frameStateRef.current.title = data.title\n            } else if (type === 'visual-editing/toggle' || type === 'overlay/toggle') {\n              dispatch({\n                type: ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE,\n                enabled: data.enabled,\n              })\n            } else if (type === 'visual-editing/documents') {\n              setDocumentsOnPage(\n                'visual-editing',\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                data.perspective as unknown as any,\n                data.documents,\n              )\n            } else if (type === 'visual-editing/refreshing' && data.source === 'manual') {\n              clearTimeout(refreshRef.current)\n            } else if (type === 'visual-editing/refreshing' && data.source === 'mutation') {\n              dispatch({type: ACTION_IFRAME_REFRESH})\n            } else if (type === 'visual-editing/refreshed') {\n              dispatch({type: ACTION_IFRAME_LOADED})\n            }\n          },\n        },\n        {\n          id: 'loaders',\n          heartbeat: true,\n          onStatusUpdate: setLoadersConnection,\n          onEvent(type, data) {\n            if (\n              type === 'loader/documents' &&\n              data.projectId === projectId &&\n              data.dataset === dataset\n            ) {\n              setDocumentsOnPage(\n                'loaders',\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                data.perspective as unknown as any,\n                data.documents,\n              )\n            } else if (\n              type === 'loader/query-listen' &&\n              data.projectId === projectId &&\n              data.dataset === dataset\n            ) {\n              if (\n                typeof data.heartbeat === 'number' &&\n                data.heartbeat < MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL\n              ) {\n                throw new Error(\n                  `Loader query listen heartbeat interval must be at least ${MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL}ms`,\n                )\n              }\n              setLiveQueries((prev) => ({\n                ...prev,\n                [getQueryCacheKey(data.query, data.params)]: {\n                  perspective: data.perspective,\n                  query: data.query,\n                  params: data.params,\n                  receivedAt: Date.now(),\n                  heartbeat: data.heartbeat ?? false,\n                } satisfies LiveQueriesStateValue,\n              }))\n            }\n          },\n        },\n        {\n          id: 'preview-kit',\n          heartbeat: true,\n          onStatusUpdate: setPreviewKitConnection,\n          onEvent(type, data) {\n            if (\n              type === 'preview-kit/documents' &&\n              data.projectId === projectId &&\n              data.dataset === dataset\n            ) {\n              setDocumentsOnPage(\n                'preview-kit',\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                data.perspective as unknown as any,\n                data.documents,\n              )\n            }\n          },\n        },\n      ],\n    })\n    setChannel(nextChannel)\n\n    return () => {\n      nextChannel.destroy()\n      setChannel(undefined)\n    }\n  }, [dataset, projectId, setDocumentsOnPage, navigate, targetOrigin])\n\n  useEffect(() => {\n    const interval = setInterval(\n      () =>\n        setLiveQueries((liveQueries) => {\n          if (Object.keys(liveQueries).length < 1) {\n            return liveQueries\n          }\n\n          const now = Date.now()\n          const hasAnyExpired = Object.values(liveQueries).some(\n            (liveQuery) =>\n              liveQuery.heartbeat !== false && now > liveQuery.receivedAt + liveQuery.heartbeat,\n          )\n          if (!hasAnyExpired) {\n            return liveQueries\n          }\n          const next = {} as LiveQueriesState\n          for (const [key, value] of Object.entries(liveQueries)) {\n            if (value.heartbeat !== false && now > value.receivedAt + value.heartbeat) {\n              continue\n            }\n            next[key] = value\n          }\n          return next\n        }),\n      MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n    )\n    return () => clearInterval(interval)\n  }, [])\n\n  const handleFocusPath = useCallback(\n    (nextPath: Path) => {\n      // Don’t need to explicitly set the id here because it was either already set via postMessage or is the same if navigating in the document pane\n      navigate({path: studioPath.toString(nextPath)}, {}, true)\n    },\n    [navigate],\n  )\n\n  const handlePreviewPath = useCallback(\n    (nextPath: string) => {\n      const url = new URL(nextPath, initialPreviewUrl.origin)\n      const preview = url.pathname + url.search\n      if (url.origin === initialPreviewUrl.origin && preview !== params.preview) {\n        navigate({}, {preview})\n      }\n    },\n    [initialPreviewUrl, params, navigate],\n  )\n\n  const handleStructureParams = useCallback(\n    (structureParams: StructureDocumentPaneParams) => {\n      navigate({}, structureParams)\n    },\n    [navigate],\n  )\n\n  // Dispatch a perspective message when the perspective changes\n  useEffect(() => {\n    channel?.send('overlays', 'presentation/perspective', {\n      perspective: state.perspective,\n    })\n  }, [channel, state.perspective])\n\n  // Dispatch a focus or blur message when the id or path change\n  useEffect(() => {\n    if (params.id && params.path) {\n      channel?.send('overlays', 'presentation/focus', {\n        id: params.id,\n        path: params.path,\n      })\n    } else {\n      channel?.send('overlays', 'presentation/blur', undefined)\n    }\n  }, [channel, params.id, params.path])\n\n  // Handle opening the published document when previewing published\n  useEffect(() => {\n    if (\n      state.perspective === 'published' &&\n      params.id &&\n      !params.rev &&\n      !params.prefersLatestPublished\n    ) {\n      navigate({}, {prefersLatestPublished: 'true'})\n    }\n  }, [navigate, params.id, params.prefersLatestPublished, params.rev, state.perspective])\n\n  // Dispatch a navigation message when the preview param changes\n  useEffect(() => {\n    if (\n      frameStateRef.current.url &&\n      params.preview &&\n      frameStateRef.current.url !== params.preview\n    ) {\n      frameStateRef.current.url = params.preview\n      if (overlaysConnection !== 'connected' && iframeRef.current) {\n        iframeRef.current.src = `${targetOrigin}${params.preview}`\n      } else {\n        channel?.send('overlays', 'presentation/navigate', {\n          url: params.preview,\n          type: 'replace',\n        })\n      }\n    }\n  }, [channel, overlaysConnection, targetOrigin, params.preview])\n\n  const toggleOverlay = useCallback(\n    () => channel?.send('overlays', 'presentation/toggleOverlay', undefined),\n    [channel],\n  )\n\n  const [displayedDocument, setDisplayedDocument] = useState<\n    Partial<SanityDocument> | null | undefined\n  >(null)\n\n  useEffect(() => {\n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (isAltKey(e)) {\n        toggleOverlay()\n      }\n    }\n    const handleKeydown = (e: KeyboardEvent) => {\n      if (isAltKey(e)) {\n        toggleOverlay()\n      }\n\n      if (isHotkey(['mod', '\\\\'], e)) {\n        toggleOverlay()\n      }\n    }\n    window.addEventListener('keydown', handleKeydown)\n    window.addEventListener('keyup', handleKeyUp)\n    return () => {\n      window.removeEventListener('keydown', handleKeydown)\n      window.removeEventListener('keyup', handleKeyUp)\n    }\n  }, [toggleOverlay])\n\n  const [boundaryElement, setBoundaryElement] = useState<HTMLDivElement | null>(null)\n\n  const [{navigatorEnabled, toggleNavigator}, PresentationNavigator] = usePresentationNavigator({\n    unstable_navigator,\n  })\n\n  // Handle edge case where the `&rev=` parameter gets \"stuck\"\n  const idRef = useRef<string | undefined>(params.id)\n  useEffect(() => {\n    if (params.rev && idRef.current && params.id !== idRef.current) {\n      navigate({}, {rev: undefined})\n    }\n    idRef.current = params.id\n  })\n\n  const refreshRef = useRef<number>()\n  const handleRefresh = useCallback(\n    (fallback: () => void) => {\n      dispatch({type: ACTION_IFRAME_REFRESH})\n      if (channel) {\n        // We only wait 300ms for the iframe to ack the refresh request before running the fallback logic\n        refreshRef.current = window.setTimeout(fallback, 300)\n        channel.send('overlays', 'presentation/refresh', {\n          source: 'manual',\n          livePreviewEnabled:\n            previewKitConnection === 'connected' || loadersConnection === 'connected',\n        })\n        return\n      }\n      fallback()\n    },\n    [channel, loadersConnection, previewKitConnection],\n  )\n\n  const workspace = useWorkspace()\n\n  const getCommentIntent = useCallback<CommentIntentGetter>(\n    ({id, type, path}) => {\n      if (frameStateRef.current.url) {\n        return {\n          title: frameStateRef.current.title || frameStateRef.current.url,\n          name: 'edit',\n          params: {\n            id,\n            path,\n            type,\n            inspect: COMMENTS_INSPECTOR_NAME,\n            workspace: workspace.name,\n            mode: EDIT_INTENT_MODE,\n            preview: params.preview,\n          },\n        }\n      }\n      return undefined\n    },\n    [params.preview, workspace.name],\n  )\n\n  return (\n    <>\n      <PresentationProvider\n        devMode={devMode}\n        name={name}\n        navigate={navigate}\n        params={params}\n        structureParams={structureParams}\n      >\n        <PresentationNavigateProvider navigate={navigate}>\n          <PresentationParamsProvider params={params}>\n            <Container height=\"fill\">\n              <Panels>\n                <PresentationNavigator />\n                <Panel\n                  id=\"preview\"\n                  minWidth={325}\n                  defaultSize={navigatorEnabled ? 50 : 75}\n                  order={3}\n                >\n                  <Flex direction=\"column\" flex={1} height=\"fill\" ref={setBoundaryElement}>\n                    <BoundaryElementProvider element={boundaryElement}>\n                      <PreviewFrame\n                        dispatch={dispatch}\n                        iframe={state.iframe}\n                        initialUrl={initialPreviewUrl}\n                        loadersConnection={loadersConnection}\n                        navigatorEnabled={navigatorEnabled}\n                        onPathChange={handlePreviewPath}\n                        onRefresh={handleRefresh}\n                        openPopup={handleOpenPopup}\n                        overlaysConnection={overlaysConnection}\n                        params={params}\n                        perspective={state.perspective}\n                        ref={iframeRef}\n                        targetOrigin={targetOrigin}\n                        toggleNavigator={toggleNavigator}\n                        toggleOverlay={toggleOverlay}\n                        viewport={state.viewport}\n                        visualEditing={state.visualEditing}\n                      />\n                    </BoundaryElementProvider>\n                  </Flex>\n                </Panel>\n                <PresentationContent\n                  mainDocumentState={mainDocumentState}\n                  params={params}\n                  documentsOnPage={documentsOnPage}\n                  getCommentIntent={getCommentIntent}\n                  onFocusPath={handleFocusPath}\n                  onStructureParams={handleStructureParams}\n                  setDisplayedDocument={setDisplayedDocument}\n                  structureParams={structureParams}\n                />\n              </Panels>\n            </Container>\n          </PresentationParamsProvider>\n        </PresentationNavigateProvider>\n      </PresentationProvider>\n      {channel && (\n        <Suspense>\n          <LoaderQueries\n            channel={channel}\n            liveQueries={liveQueries}\n            perspective={state.perspective}\n            liveDocument={displayedDocument}\n            documentsOnPage={documentsOnPage}\n          />\n        </Suspense>\n      )}\n      {channel && params.id && params.type && (\n        <Suspense>\n          <PostMessageRefreshMutations\n            channel={channel}\n            id={params.id}\n            type={params.type}\n            loadersConnection={loadersConnection}\n            previewKitConnection={previewKitConnection}\n          />\n        </Suspense>\n      )}\n    </>\n  )\n}\n"],"names":["jsxRuntime","require","csm","ui","react","sanity","router","styledComponents","index","icons","structure","DisplayedDocumentBroadcaster","withoutSecretSearchParams","framerMotion","createSecret","isEqual","pathToRegexp","definePreviewUrl","suspendReact","_interopDefaultCompat","e","default","isEqual__default","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","Error","byteToHex","i","push","toString","slice","native","randomUUID","v4","options","buf","offset","rnds","random","arr","unsafeStringify","RESPONSE_TIMEOUT","HEARTBEAT_INTERVAL","HANDSHAKE_INTERVAL","HANDSHAKE_MSG_TYPES","isHandshakeMessage","type","some","t","isLegacyHandshakeMessage","data","Array","isArray","every","key","startsWith","createChannelsControllerInternal","config","target","channels","connectTo","map","buffer","id","handler","handshakeHandler","status","interval","heartbeat","stopHandshake","channel","window","clearInterval","find","from","setChannelStatus","sendHandshake","messageHandler","_a","_b","_c","connectionId","args","onEvent","call","send","responseTo","handleEvents","console","error","origin","domain","to","includes","targetOrigin","isValidMessageEvent","stopHeartbeat","next","onStatusUpdate","uuid","setInterval","startHandshake","heartbeatInverval","startHeartbeat","toFlush","splice","length","forEach","flush","msg","postMessage","expectResponse","maxWait","setTimeout","removeEventListener","transact","warn","eventData","clearTimeout","addEventListener","destroy","store","store2","store3","store4","ValiError","constructor","issues","super","message","__publicField","this","name","defaultArgs","arg1","arg2","i18n","schema","context","reference","issue","_d","_e","lang","get","getSpecificMessage","getGlobalMessage","schemaResult","typed","output","stringify","input","Object","getPrototypeOf","pipeIssue","received","schemaIssue2","reason","expected","expects","label","requirement","path","abortEarly","abortPipeEarly","skipPipe","pipeResult","pipe","action","result","_parse","actionIssue2","schemaIssue","other","fallback","fallback2","info","getFallback","boolean","async","object","entries","arg3","arg4","rest","error2","pipe2","restAndDefaultArgs","cachedEntries","value2","pathItem","value","unshift","picklist","join","parse","getGlobalConfig","b","y","m","a","r","JSON","s","alt","ctrl","mod","test","navigator","platform","shift","c","debounce","fn","timeout","timer","apply","PanelsContext","createContext","displayName","Root","styled","div","Panel","children","defaultSize","minWidth","maxWidth","order","useContext","getPanelStyle","registerElement","unregisterElement","style","useLayoutEffect","jsx","itemKey","getStoredItem","localStorage","getItem","getKeyForPanels","panels","panel","usePanelsStorage","useMemo","set","widths","stored","setItem","setStoredItem","val","setDebounced","getNextWidth","nextWidth","containerWidth","maxWidthPx","minWidthPx","Math","min","max","getPanelWidth","width","findIndex","toPrecision","getOffset","event","handleElement","initialOffset","initialHandleElementRect","clientX","getBoundingClientRect","left","isPanel","element","isResizer","getSortedElements","elements","values","sort","validateWidths","widthsToValidate","total","reduce","remainingWidth","toFixed","abs","PanelsWrapper","Panels","panelsEl","useRef","setElements","useState","Map","filter","setWidths","activeResizer","setActiveResizer","panelsRef","useCallback","flexGrow","pointerEvents","prev","has","delete","dragRef","innerWidth","dragOffset","panelAfter","panelBefore","resizerIndex","resizerRect","startX","startDragging","elementsArr","el","resizer","resizeElement","current","acc","pageX","stopDragging","drag","preventDefault","stopPropagation","prevWidths","nextWidths","delta","panelsState","initialDragState","initialWidths","pivotPanel","deltaApplied","localeCompare","numeric","getNextWidths","prevWidth","storage","storedWidths","validatedStoredWidths","defaultWidths","panelsWithoutWidth","remainingWidthTotal","widthsWithNulls","defaultWidth","getDefaultWidths","useEffect","resizeObserver","ResizeObserver","observe","disconnect","Provider","ref","ErrorCard","props","onRetry","onContinueAnyway","restProps","useTranslation","presentationLocaleNamespace","retryButton","Button","fontSize","mode","onClick","text","continueAnywayButton","tone","Card","height","Flex","align","justify","Container","padding","sizing","jsxs","Stack","space","Text","size","weight","muted","Inline","Box","resolveQueryStringFromParams","nextParams","allowed","params","parts","encodeQueryString","obj","BackLink","forwardRef","structureParams","usePresentationTool","u","StateLink","state","_searchParams","perspective","preview","title","ReferenceChildLink","documentId","documentType","parentRefPath","template","previewUrl","prefersLatestPublished","PresentationPaneRouterProvider","onStructureParams","refs","routerState","resolvePathFromState","useRouter","routerSearchParams","useUnique","fromEntries","createPathWithParams","groupIndex","siblingIndex","payload","hasGroupSiblings","groupLength","routerPanesState","ChildLink","childLinkProps","childId","_id","getPublishedId","_type","ParameterizedLink","Fragment","closeCurrentAndAfter","handleEditReference","replaceCurrent","pane","closeCurrent","duplicateCurrent","setView","viewId","setParams","inspect","setPayload","navigateIntent","intentName","intentParams","PaneRouterContext","RootLayout","PaneLayout","WrappedCode","Code","DocumentListPane","mainDocumentState","p","devMode","ids","document","schemaTypeName","errorParams","setErrorParams","handleRetry","flex","overflow","radius","Label","ErrorBoundary","onCatch","StructureToolProvider","direction","StructureDocumentListPane","itemId","paneKey","DocumentPane","onFocusPath","templateParams","paneDocumentNode","templateParameters","decodeJsonParams","StructureDocumentPane","DocumentPanel","ContentEditor","useSchema","MainDocumentLink","as","Preview","schemaType","Badge","gap","WarningOutlineIcon","Translate","i18nKey","components","Resizer","ResizerInner","$disabled","PanelResizer","propId","disabled","usePanelId","isDragging","onMouseDown","nativeEvent","onDrag","onDragStop","blur","PresentationContentWrapper","setDisplayedDocument","getCommentIntent","DisplayedDocumentBroadcasterProvider","D","CommentsIntentProvider","getIntent","PresentationContent","documentsOnPage","PresentationNavigateProvider","navigate","_navigate","PresentationNavigateContext","usePresentationNavigator","unstable_navigator","navigatorProvided","component","_navigatorEnabled","setNavigatorEnabled","defaultValue","setValue","useLocalState","navigatorEnabled","toggleNavigator","enabled","Component","Navigator","memo","NavigatorComponent","navigatorDisabled","PresentationParamsProvider","PresentationParamsContext","PresentationProvider","PresentationContext","ACTION_IFRAME_LOADED","ACTION_IFRAME_REFRESH","ACTION_IFRAME_RELOAD","ACTION_PERSPECTIVE","ACTION_VIEWPORT","ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE","presentationReducer","iframe","perspectiveSchema","viewport","viewportSchema","toggleVisualEditingOverlays","visualEditing","overlaysEnabled","mainDocumentSchema","iframeStatusSchema","initStateSchema","mainDocument","INITIAL_PRESENTATION_STATE","presentationReducerInit","IFrame","motion","PreviewLocationInput","onChange","prefix","suffix","basePath","useActiveWorkspace","activeWorkspace","inputRef","sessionValue","setSessionValue","customValidity","setCustomValidity","handleChange","currentTarget","handleKeyDown","absoluteValue","nextValue","handleBlur","resetButton","icon","ResetIcon","TextInput","clearButton","onBlur","onClear","onKeyDownCapture","zIndex","ShareUrlMenuItems","initialUrl","openPopup","previewLocationOrigin","previewLocationRoute","handleOpenPopup","href","CopyUrlMenuButton","MenuItem","LaunchIcon","rel","pushToast","useToast","client","useClient","apiVersion","API_VERSION","currentUser","useCurrentUser","setDisabled","clipboard","closable","url","onFinally","onError","description","hasSecretSearchParams","ClipboardItem","resolvePreviewUrl","previewUrlSecret","createPreviewSecret","location","setSecretSearchParams","secret","Blob","item","write","then","catch","writeText","CopyIcon","MotionFlex","PERSPECTIVE_TITLE_KEY","previewDrafts","published","PERSPECTIVE_TONES","PERSPECTIVE_ICONS","EditIcon","PublishIcon","PreviewFrame","dispatch","loadersConnection","onPathChange","onRefresh","overlaysConnection","toggleOverlay","prefersReducedMotion","usePrefersReducedMotion","setDesktopMode","setMobileMode","loading","timedOut","setTimedOut","refreshing","somethingIsWrong","setSomethingIsWrong","iframeIsBusy","handleRefresh","src","handleContinueAnyway","setContinueAnyway","continueAnyway","showOverlaysConnectionStatus","setShowOverlaysConnectionState","MAX_TIME_TO_OVERLAYS_CONNECTION","M","URL","pathname","search","onIFrameLoad","instance","activeElement","dispatchEvent","MouseEvent","bubbles","cancelable","MotionConfig","transition","duration","TooltipDelayGroupProvider","delay","shadow","position","minHeight","marginRight","Tooltip","animate","content","fallbackPlacements","placement","portal","PanelLeftIcon","selected","whiteSpace","paddingY","Hotkeys","keys","marginTop","marginBottom","lineHeight","borderRadius","userSelect","margin","Switch","checked","marginX","RefreshIcon","MenuButton","button","iconRight","ShareIcon","menu","Menu","popover","constrainSize","ChevronDownIcon","pressed","createElement","opacity","CheckmarkIcon","DesktopIcon","MobileDeviceIcon","cursor","AnimatePresence","initial","exit","variants","spinnerVariants","inset","sizes","Spinner","errorVariants","background","borderTop","boxShadow","backdropFilter","WebkitBackdropFilter","WebkitTransition","iframeVariants","onLoad","desktop","mobile","scale","idle","reloading","active","warnedAboutCrossDatasetReference","fnOrObj","arg","Function","getRouteContext","route","routes","absolute","match","decode","decodeURIComponent","useMainDocument","resolvers","documentStore","useDocumentStore","A","setMainDocumentState","mainDocumentIdRef","relativeUrl","base","clearState","resolver","query","resolve","getQueryFromResult","controller","AbortController","signal","fetch","doc","abort","parseId","rawId","segments","split","parsePath","rawPath","studioPath","exec","e2","Number","o","_key","urlStringToPath","pruneObject","useParams","initialPreviewUrl","routerNavigate","frameStateRef","rev","since","view","pathKey","instruction","comment","routerStateRef","nextState","nextSearchState","forceReplace","routerSearchState","searchState","replace","usePreviewUrl","toolName","previewSearchParam","workspace","workspaceName","deps","cachedPreviewSearchParam","setCachedPreviewSearchParam","timeoutRef","resolveUUID","useSuspendCacheKeys","secretLastExpiredAt","setSecretLastExpiredAt","suspend","startTransition","expiresAt","getTime","Date","now","usePreviewUrlSecret","resolvedUrl","resultUrl","restoredUrl","referrer","referrerUrl","studioBasePath","Symbol","LoaderQueries","lazy","Promise","PostMessageRefreshMutations","exports","_previewUrl","tool","DEFAULT_TOOL_NAME","option","hostname","iframeRef","setChannel","liveQueries","setLiveQueries","useReducer","setDocumentsOnPage","setPublished","setPreviewDrafts","urlRef","sourceDocuments","documents","sourceDocument","_projectId","cache","uniqueDocuments","useDocumentsOnPage","projectId","useProjectId","dataset","useDataset","mainDocuments","setOverlaysConnection","setLoadersConnection","previewKitConnection","setPreviewKitConnection","popups","Set","source","open","add","closed","addSource","perspectiveRef","contentWindow","nextChannel","sources","sendToSource","WeakMap","destroySource","prevConnectTo","createChannelsController","refreshRef","MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL","getQueryCacheKey","receivedAt","liveQuery","handleFocusPath","nextPath","handlePreviewPath","handleStructureParams","displayedDocument","handleKeyUp","handleKeydown","toUpperCase","boundaryElement","setBoundaryElement","PresentationNavigator","idRef","livePreviewEnabled","useWorkspace","COMMENTS_INSPECTOR_NAME","C","EDIT_INTENT_MODE","E","BoundaryElementProvider","Suspense","liveDocument"],"mappings":"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","x_google_ignoreList":[0,1,2,3,7]}