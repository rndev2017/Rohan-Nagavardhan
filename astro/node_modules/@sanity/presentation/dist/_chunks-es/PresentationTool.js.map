{"version":3,"file":"PresentationTool.js","sources":["../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/rng.js","../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/stringify.js","../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/native.js","../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js","../../../channels/src/constants.ts","../../../channels/src/helpers.ts","../../../channels/src/controller.ts","../../../../node_modules/.pnpm/valibot@0.30.0/node_modules/valibot/dist/index.js","../../../visual-editing-helpers/dist/_chunks-es/transformSanityNodeData.js","../../../visual-editing-helpers/dist/index.js","../../src/lib/debounce.ts","../../src/panels/PanelsContext.tsx","../../src/panels/Panel.tsx","../../src/panels/usePanelsStorage.ts","../../src/panels/util.ts","../../src/panels/Panels.tsx","../../src/components/ErrorCard.tsx","../../src/editor/PresentationPaneRouterProvider.tsx","../../src/editor/DocumentListPane.tsx","../../src/editor/DocumentPane.tsx","../../src/editor/DocumentPanel.tsx","../../src/editor/ContentEditor.tsx","../../src/panels/PanelResizer.tsx","../../src/panels/usePanelId.ts","../../src/PresentationContent.tsx","../../src/PresentationNavigateProvider.tsx","../../src/PresentationNavigator.tsx","../../src/useLocalState.ts","../../src/PresentationParamsProvider.tsx","../../src/PresentationProvider.tsx","../../src/reducers/presentationReducer.ts","../../src/preview/IFrame.tsx","../../src/preview/PreviewLocationInput.tsx","../../src/preview/ShareUrlMenuItems.tsx","../../src/preview/PreviewFrame.tsx","../../src/useDocumentsOnPage.ts","../../src/useMainDocument.ts","../../src/lib/parse.ts","../../src/useParams.ts","../../src/usePreviewUrl.ts","../../src/PresentationTool.tsx"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import type {ChannelMsgType} from './types'\n\nexport const RESPONSE_TIMEOUT = 1000\nexport const HEARTBEAT_INTERVAL = 1000\nexport const HANDSHAKE_INTERVAL = 500\n\nexport const INTERNAL_MSG_TYPES = [\n  'channel/disconnect',\n  'channel/response',\n  'channel/heartbeat',\n] satisfies ChannelMsgType[]\n\nexport const HANDSHAKE_MSG_TYPES = [\n  'handshake/syn',\n  'handshake/syn-ack',\n  'handshake/ack',\n] satisfies ChannelMsgType[]\n","import {HANDSHAKE_MSG_TYPES, INTERNAL_MSG_TYPES} from './constants'\nimport type {ChannelMsgType, HandshakeMsgType, InternalMsgType} from './types'\n\nexport const isInternalMessage = (\n  type: ChannelMsgType | InternalMsgType,\n): type is InternalMsgType => {\n  return INTERNAL_MSG_TYPES.some((t) => t === type)\n}\n\nexport const isHandshakeMessage = (\n  type: ChannelMsgType | InternalMsgType,\n): type is HandshakeMsgType => {\n  return HANDSHAKE_MSG_TYPES.some((t) => t === type)\n}\n\nexport const isLegacyHandshakeMessage = ({data = {}}: MessageEvent): boolean => {\n  return (\n    // Check data is a record type\n    typeof data === 'object' &&\n    data !== null &&\n    !Array.isArray(data) &&\n    // The \"domain\" key was introduced in commit 4854e7f\n    !('domain' in data) &&\n    // Check the rest of the object shape is present\n    ['id', 'type', 'from', 'to'].every((key) => key in data) &&\n    // Prior to 4854e7f only handshake events were emitted prior to an established connection\n    data.type.startsWith('handshake/')\n  )\n}\n","import {v4 as uuid} from 'uuid'\n\nimport {HANDSHAKE_INTERVAL, HEARTBEAT_INTERVAL, RESPONSE_TIMEOUT} from './constants'\nimport {isHandshakeMessage, isLegacyHandshakeMessage} from './helpers'\nimport type {\n  ChannelMsg,\n  ChannelsController,\n  ChannelsControllerChannel,\n  ChannelsControllerOptions,\n  ChannelStatus,\n  InternalMsgType,\n  ProtocolMsg,\n  ToArgs,\n} from './types'\n\nexport function createChannelsController<\n  ConnectionIds extends string,\n  Sends extends ChannelMsg,\n  Receives extends ChannelMsg,\n>(\n  config: ChannelsControllerOptions<ConnectionIds, Receives>,\n): ChannelsController<ConnectionIds, Sends> {\n  type Controller = ChannelsController<ConnectionIds, Sends>\n\n  const {destroy, send} = createChannelsControllerInternal<ConnectionIds, Sends, Receives>(config)\n  const sources = new Set<MessageEventSource>()\n  const sendToSource = new WeakMap<MessageEventSource, Controller['send']>()\n  const destroySource = new Set<Controller['destroy']>()\n\n  const sendToMany = ((id, ...args) => {\n    send(id, ...args)\n    for (const source of sources) {\n      if (source && 'closed' in source && !source.closed && sendToSource.has(source)) {\n        const send = sendToSource.get(source)\n        send!(id, ...args)\n      }\n    }\n  }) satisfies Controller['send']\n\n  const destroyMany = (() => {\n    destroy()\n    for (const destroy of destroySource) {\n      destroy()\n    }\n  }) satisfies Controller['destroy']\n\n  return {\n    destroy: destroyMany,\n    send: sendToMany,\n    addSource(source) {\n      if (sources.has(source)) {\n        return\n      }\n      if (!('closed' in source)) {\n        // eslint-disable-next-line no-console\n        console.warn('Source is unsupported', {source})\n        throw new Error('Source is unsupported')\n      }\n      if (source.closed) {\n        throw new Error('Source is closed')\n      }\n      const {send, destroy} = createChannelsControllerInternal<ConnectionIds, Sends, Receives>({\n        ...config,\n        target: source,\n        // @TODO temporary workaround for onStatusUpdate and onEvent not differentiating\n        //       iframes from popups\n        connectTo: config.connectTo.map((prevConnectTo) => {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {onStatusUpdate, onEvent, ...connectTo} = prevConnectTo\n\n          return {\n            ...connectTo,\n            onEvent: onEvent\n              ? (((...args) => {\n                  const [type] = args\n                  if (\n                    type === 'preview-kit/documents' ||\n                    type === 'overlay/navigate' ||\n                    type === 'loader/documents'\n                  ) {\n                    return\n                  }\n\n                  return onEvent(...args)\n                }) satisfies typeof onEvent)\n              : undefined,\n          }\n        }),\n      })\n      destroySource.add(destroy)\n      sendToSource.set(source, send)\n      sources.add(source)\n    },\n  }\n}\n\nfunction createChannelsControllerInternal<\n  ConnectionIds extends string,\n  Sends extends ChannelMsg,\n  Receives extends ChannelMsg,\n>(\n  config: ChannelsControllerOptions<ConnectionIds, Receives>,\n): Omit<ChannelsController<ConnectionIds, Sends>, 'addSource'> {\n  type Channel = ChannelsControllerChannel<ConnectionIds, Receives>\n\n  const target = config.target\n\n  const channels: Channel[] = config.connectTo.map((config) => ({\n    buffer: [],\n    config,\n    id: '',\n    handler: handshakeHandler,\n    status: 'connecting',\n    interval: undefined,\n    heartbeat: undefined,\n  }))\n\n  function startHandshake(channel: Channel) {\n    channel.id = uuid()\n    channel.interval = window.setInterval(() => {\n      sendHandshake(channel, 'handshake/syn', {id: channel.id})\n    }, HANDSHAKE_INTERVAL)\n  }\n\n  function stopHandshake(channel: Channel) {\n    window.clearInterval(channel.interval)\n  }\n\n  function isValidMessageEvent(e: MessageEvent): e is MessageEvent<ProtocolMsg<Receives>> {\n    const {data, origin} = e\n    return (\n      data.domain === 'sanity/channels' &&\n      data.to == config.id &&\n      channels.map((channel) => channel.config.id).includes(data.from) &&\n      data.type !== 'channel/response' &&\n      origin === config.targetOrigin\n    )\n  }\n\n  function handshakeHandler(e: MessageEvent<ProtocolMsg<Receives>>) {\n    const {data} = e\n    if (isHandshakeMessage(data.type)) {\n      const channel = channels.find((channel) => channel.config.id === data.from)\n      if (channel && data.type === 'handshake/syn-ack') {\n        setChannelStatus(channel, 'connected')\n        sendHandshake(channel, 'handshake/ack', {id: channel.id})\n      }\n    }\n  }\n\n  const messageHandler = ((e: MessageEvent<ProtocolMsg<Receives>>) => {\n    const data = e.data as ProtocolMsg<Receives>\n    if (\n      !isHandshakeMessage(data.type) &&\n      channels.find((channel) => channel.id === data.connectionId)\n    ) {\n      const channel = channels.find((channel) => channel.config.id === data.from)\n      if (channel) {\n        const args = [data.type, data.data] as ToArgs<Receives>\n        channel.config.onEvent?.(...args)\n        config.onEvent?.(...args)\n        send(channel, 'channel/response', {responseTo: data.id}, false)\n      }\n    }\n  }) satisfies Channel['handler']\n\n  function handleEvents(e: MessageEvent<ProtocolMsg<Receives>>) {\n    if (isLegacyHandshakeMessage(e)) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Visual editing package mismatch detected! Please ensure you are using the latest version of Sanity Studio and any packages listed here:\\nhttps://github.com/sanity-io/visual-editing',\n      )\n      return\n    }\n\n    if (isValidMessageEvent(e)) {\n      const {data} = e\n      channels.find((channel) => channel.config.id === data.from)?.handler(e)\n    }\n  }\n\n  function flush(channel: Channel) {\n    const toFlush = [...channel.buffer]\n    channel.buffer.splice(0, channel.buffer.length)\n    toFlush.forEach(({type, data}) => {\n      send(channel, type, data)\n    })\n  }\n\n  function startHeartbeat(channel: Channel) {\n    stopHeartbeat(channel)\n    if (channel.config.heartbeat) {\n      const heartbeatInverval =\n        typeof channel.config.heartbeat === 'number' ? channel.config.heartbeat : HEARTBEAT_INTERVAL\n      channel.heartbeat = window.setInterval(() => {\n        send(channel, 'channel/heartbeat')\n      }, heartbeatInverval)\n    }\n  }\n\n  function stopHeartbeat(channel: Channel) {\n    if (channel.heartbeat) {\n      window.clearInterval(channel.heartbeat)\n    }\n  }\n\n  function setChannelStatus(channel: Channel, next: ChannelStatus) {\n    channel.status = next\n    channel.config.onStatusUpdate?.(next, channel.config.id)\n    config.onStatusUpdate?.(next, channel.config.id)\n    if (next === 'connecting' || next === 'reconnecting') {\n      channel.handler = handshakeHandler\n      stopHeartbeat(channel)\n      startHandshake(channel)\n    } else if (next === 'connected') {\n      channel.handler = messageHandler\n      stopHandshake(channel)\n      startHeartbeat(channel)\n      flush(channel)\n    } else if (next === 'disconnected') {\n      channel.id = null\n      channel.handler = handshakeHandler\n      stopHandshake(channel)\n      stopHeartbeat(channel)\n    }\n  }\n\n  function sendHandshake<T extends Sends['type']>(\n    channel: Channel,\n    type: T,\n    data?: Extract<Sends, {type: T}>['data'],\n  ) {\n    if (!channel.id) {\n      throw new Error('No channel ID set')\n    }\n\n    const msg = {\n      connectionId: channel.id,\n      data,\n      domain: 'sanity/channels',\n      from: config.id,\n      id: uuid(),\n      to: channel.config.id,\n      type,\n    } satisfies ProtocolMsg<Sends>\n\n    try {\n      target?.postMessage(msg, {targetOrigin: '*'})\n    } catch (e) {\n      throw new Error(`Failed to postMessage '${msg.id}' on '${config.id}'`)\n    }\n  }\n\n  function send<T extends Sends['type']>(\n    channel: Channel,\n    type: T | InternalMsgType,\n    data?: Extract<Sends, {type: T}>['data'],\n    expectResponse = true,\n  ) {\n    const id = uuid()\n\n    // If there is no active channel, push to the buffer\n    if (\n      channel.status === 'connecting' ||\n      channel.status === 'reconnecting' ||\n      channel.status === 'disconnected'\n    ) {\n      channel.buffer.push({type, data})\n      return\n    }\n\n    if (!channel.id) {\n      throw new Error('No channel ID set')\n    }\n\n    const msg = {\n      connectionId: channel.id,\n      data,\n      domain: 'sanity/channels',\n      from: config.id,\n      id,\n      to: channel.config.id,\n      type,\n    } satisfies ProtocolMsg<Sends>\n\n    if (expectResponse) {\n      const maxWait = setTimeout(() => {\n        // The channel may have changed, so only reject if the IDs match\n        if (msg.connectionId === channel.id) {\n          // Cleanup the transaction listener\n          window.removeEventListener('message', transact, false)\n          // Push the message to the buffer\n          if (type !== 'channel/heartbeat') {\n            channel.buffer.push({type, data})\n          }\n          // Try to reconnect\n          setChannelStatus(channel, 'reconnecting')\n          // eslint-disable-next-line no-console\n          console.warn(\n            `Received no response to message '${msg.type}' on client '${config.id}' (ID: '${msg.id}').`,\n          )\n        }\n      }, RESPONSE_TIMEOUT)\n\n      const transact = (e: MessageEvent<ChannelMsg>) => {\n        const {data: eventData} = e\n        if (\n          eventData.type === 'channel/response' &&\n          eventData.data?.['responseTo'] &&\n          eventData.data['responseTo'] === msg.id\n        ) {\n          window.removeEventListener('message', transact, false)\n          clearTimeout(maxWait)\n        }\n      }\n      window.addEventListener('message', transact, false)\n    }\n\n    try {\n      target?.postMessage(msg, {targetOrigin: config.targetOrigin})\n    } catch (e) {\n      throw new Error(`Failed to postMessage '${msg.id}' on client '${config.id}'`)\n    }\n  }\n\n  function disconnect() {\n    channels.forEach((channel) => {\n      if (['disconnected'].includes(channel.status)) return\n      send(channel, 'channel/disconnect', {id: channel.id}, false)\n      setChannelStatus(channel, 'disconnected')\n    })\n  }\n\n  function destroy() {\n    disconnect()\n    window.removeEventListener('message', handleEvents, false)\n    channels.forEach((channel) => {\n      stopHeartbeat(channel)\n      stopHandshake(channel)\n    })\n  }\n\n  function initialise() {\n    window.addEventListener('message', handleEvents, false)\n    channels.forEach((channel) => {\n      setChannelStatus(channel, 'connecting')\n    })\n  }\n\n  initialise()\n\n  function sendPublic<T extends Sends['type']>(\n    id: string | string[] | undefined,\n    type: T,\n    data?: Extract<Sends, {type: T}>['data'],\n  ) {\n    const channelsToSend = id ? (Array.isArray(id) ? [...id] : [id]) : channels\n\n    channelsToSend.forEach((id) => {\n      const channel = channels.find((channel) => channel.config.id === id)\n      if (!channel) throw new Error('Invalid channel ID')\n      send(channel, type, data)\n    })\n  }\n\n  return {\n    destroy,\n    send: sendPublic,\n  }\n}\n","// src/error/flatten/flatten.ts\nfunction flatten(arg1) {\n  return (Array.isArray(arg1) ? arg1 : arg1.issues).reduce(\n    (flatErrors, issue) => {\n      if (issue.path) {\n        if (issue.path.every(\n          ({ key }) => typeof key === \"string\" || typeof key === \"number\"\n        )) {\n          const path = issue.path.map(({ key }) => key).join(\".\");\n          if (flatErrors.nested[path]) {\n            flatErrors.nested[path].push(issue.message);\n          } else {\n            flatErrors.nested[path] = [issue.message];\n          }\n        }\n      } else {\n        if (flatErrors.root) {\n          flatErrors.root.push(issue.message);\n        } else {\n          flatErrors.root = [issue.message];\n        }\n      }\n      return flatErrors;\n    },\n    { nested: {} }\n  );\n}\n\n// src/error/ValiError/ValiError.ts\nvar ValiError = class extends Error {\n  issues;\n  /**\n   * Creates a Valibot error with useful information.\n   *\n   * @param issues The error issues.\n   */\n  constructor(issues) {\n    super(issues[0].message);\n    this.name = \"ValiError\";\n    this.issues = issues;\n  }\n};\n\n// src/methods/brand/brand.ts\nvar BrandSymbol = Symbol(\"brand\");\nfunction brand(schema, name) {\n  return schema;\n}\n\n// src/methods/coerce/coerce.ts\nfunction coerce(schema, action) {\n  return {\n    ...schema,\n    _parse(input, config) {\n      return schema._parse(action(input), config);\n    }\n  };\n}\n\n// src/methods/coerce/coerceAsync.ts\nfunction coerceAsync(schema, action) {\n  return {\n    ...schema,\n    async _parse(input, config) {\n      return schema._parse(await action(input), config);\n    }\n  };\n}\n\n// src/utils/actionIssue/actionIssue.ts\nfunction actionIssue(context, reference, input, label, received) {\n  return {\n    issues: [{ context, reference, input, label, received }]\n  };\n}\n\n// src/utils/actionOutput/actionOutput.ts\nfunction actionOutput(output) {\n  return { output };\n}\n\n// src/utils/defaultArgs/defaultArgs.ts\nfunction defaultArgs(arg1, arg2) {\n  return Array.isArray(arg1) ? [void 0, arg1] : [arg1, arg2];\n}\n\n// src/storages/globalConfig/globalConfig.ts\nvar store;\nfunction setGlobalConfig(config) {\n  store = { ...store, ...config };\n}\nfunction getGlobalConfig(config) {\n  return {\n    lang: config?.lang ?? store?.lang,\n    message: config?.message,\n    abortEarly: config?.abortEarly ?? store?.abortEarly,\n    abortPipeEarly: config?.abortPipeEarly ?? store?.abortPipeEarly,\n    skipPipe: config?.skipPipe ?? store?.skipPipe\n  };\n}\nfunction deleteGlobalConfig() {\n  store = void 0;\n}\n\n// src/storages/globalMessage/globalMessage.ts\nvar store2;\nfunction setGlobalMessage(message, lang) {\n  if (!store2)\n    store2 = /* @__PURE__ */ new Map();\n  store2.set(lang, message);\n}\nfunction getGlobalMessage(lang) {\n  return store2?.get(lang);\n}\nfunction deleteGlobalMessage(lang) {\n  store2?.delete(lang);\n}\n\n// src/storages/schemaMessage/schemaMessage.ts\nvar store3;\nfunction setSchemaMessage(message, lang) {\n  if (!store3)\n    store3 = /* @__PURE__ */ new Map();\n  store3.set(lang, message);\n}\nfunction getSchemaMessage(lang) {\n  return store3?.get(lang);\n}\nfunction deleteSchemaMessage(lang) {\n  store3?.delete(lang);\n}\n\n// src/storages/specificMessage/specificMessage.ts\nvar store4;\nfunction setSpecificMessage(reference, message, lang) {\n  if (!store4)\n    store4 = /* @__PURE__ */ new Map();\n  if (!store4.get(reference))\n    store4.set(reference, /* @__PURE__ */ new Map());\n  store4.get(reference).set(lang, message);\n}\nfunction getSpecificMessage(reference, lang) {\n  return store4?.get(reference)?.get(lang);\n}\nfunction deleteSpecificMessage(reference, lang) {\n  store4?.get(reference)?.delete(lang);\n}\n\n// src/utils/i18n/i18n.ts\nfunction i18n(schema, context, reference, config, issue) {\n  const message = context.message ?? getSpecificMessage(reference, issue.lang) ?? (schema ? getSchemaMessage(issue.lang) : null) ?? config?.message ?? getGlobalMessage(issue.lang) ?? issue.message;\n  return typeof message === \"function\" ? message(issue) : message;\n}\n\n// src/utils/isLuhnAlgo/isLuhnAlgo.ts\nvar NON_DIGIT_REGEX = /\\D/gu;\nfunction isLuhnAlgo(input) {\n  const number2 = input.replace(NON_DIGIT_REGEX, \"\");\n  let length2 = number2.length;\n  let bit = 1;\n  let sum = 0;\n  while (length2) {\n    const value2 = +number2[--length2];\n    bit ^= 1;\n    sum += bit ? [0, 2, 4, 6, 8, 1, 3, 5, 7, 9][value2] : value2;\n  }\n  return sum % 10 === 0;\n}\n\n// src/utils/isOfType/isOfType.ts\nfunction isOfType(type, object2) {\n  return object2.type === type;\n}\n\n// src/utils/schemaResult/schemaResult.ts\nfunction schemaResult(typed, output, issues) {\n  return { typed, output, issues };\n}\n\n// src/utils/stringify/stringify.ts\nfunction stringify(input) {\n  let type = typeof input;\n  if (type === \"object\") {\n    type = input ? Object.getPrototypeOf(input).constructor.name : \"null\";\n  }\n  return type === \"string\" ? `\"${input}\"` : type === \"number\" || type === \"bigint\" || type === \"boolean\" ? `${input}` : type;\n}\n\n// src/utils/pipeResult/utils/pipeIssue/pipeIssue.ts\nfunction pipeIssue(context, config, issue) {\n  const received = issue.received ?? stringify(issue.input);\n  const schemaIssue2 = {\n    reason: context.type,\n    context: issue.context.type,\n    expected: issue.context.expects,\n    received,\n    message: `Invalid ${issue.label}: ${issue.context.expects ? `Expected ${issue.context.expects} but r` : \"R\"}eceived ${received}`,\n    input: issue.input,\n    requirement: issue.context.requirement,\n    path: issue.path,\n    lang: config?.lang,\n    abortEarly: config?.abortEarly,\n    abortPipeEarly: config?.abortPipeEarly,\n    skipPipe: config?.skipPipe\n  };\n  schemaIssue2.message = i18n(\n    false,\n    issue.context,\n    issue.reference,\n    config,\n    schemaIssue2\n  );\n  return schemaIssue2;\n}\n\n// src/utils/pipeResult/pipeResult.ts\nfunction pipeResult(context, input, config, issues) {\n  if (context.pipe && !config?.skipPipe) {\n    for (const action of context.pipe) {\n      const result = action._parse(input);\n      if (result.issues) {\n        for (const actionIssue2 of result.issues) {\n          const schemaIssue2 = pipeIssue(context, config, actionIssue2);\n          issues ? issues.push(schemaIssue2) : issues = [schemaIssue2];\n        }\n        if (config?.abortEarly || config?.abortPipeEarly) {\n          break;\n        }\n      } else {\n        input = result.output;\n      }\n    }\n  }\n  return schemaResult(true, input, issues);\n}\n\n// src/utils/pipeResult/pipeResultAsync.ts\nasync function pipeResultAsync(context, input, config, issues) {\n  if (context.pipe && !config?.skipPipe) {\n    for (const action of context.pipe) {\n      const result = await action._parse(input);\n      if (result.issues) {\n        for (const actionIssue2 of result.issues) {\n          const schemaIssue2 = pipeIssue(context, config, actionIssue2);\n          issues ? issues.push(schemaIssue2) : issues = [schemaIssue2];\n        }\n        if (config?.abortEarly || config?.abortPipeEarly) {\n          break;\n        }\n      } else {\n        input = result.output;\n      }\n    }\n  }\n  return schemaResult(true, input, issues);\n}\n\n// src/utils/restAndDefaultArgs/restAndDefaultArgs.ts\nfunction restAndDefaultArgs(arg1, arg2, arg3) {\n  if (!arg1 || typeof arg1 === \"object\" && !Array.isArray(arg1)) {\n    const [error2, pipe2] = defaultArgs(arg2, arg3);\n    return [arg1, error2, pipe2];\n  }\n  const [error, pipe] = defaultArgs(\n    arg1,\n    arg2\n  );\n  return [void 0, error, pipe];\n}\n\n// src/utils/schemaIssue/schemaIssue.ts\nfunction schemaIssue(context, reference, input, config, other) {\n  const received = stringify(input);\n  const expected = other?.expected ?? context.expects;\n  const issue = {\n    reason: other?.reason ?? \"type\",\n    context: context.type,\n    expected,\n    received,\n    message: `Invalid type: Expected ${expected} but received ${received}`,\n    input,\n    path: other?.path,\n    issues: other?.issues,\n    lang: config?.lang,\n    abortEarly: config?.abortEarly,\n    abortPipeEarly: config?.abortPipeEarly,\n    skipPipe: config?.skipPipe\n  };\n  issue.message = i18n(true, context, reference, config, issue);\n  return { typed: false, output: input, issues: [issue] };\n}\n\n// src/methods/getFallback/getFallback.ts\nfunction getFallback(schema, info) {\n  return typeof schema.fallback === \"function\" ? schema.fallback(info) : schema.fallback;\n}\n\n// src/methods/getFallback/getFallbackAsync.ts\nasync function getFallbackAsync(schema, info) {\n  return typeof schema.fallback === \"function\" ? await schema.fallback(info) : schema.fallback;\n}\n\n// src/methods/fallback/fallback.ts\nfunction fallback(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    _parse(input, config) {\n      const result = schema._parse(input, config);\n      return result.issues ? schemaResult(\n        true,\n        getFallback(this, { input, issues: result.issues })\n      ) : result;\n    }\n  };\n}\n\n// src/methods/fallback/fallbackAsync.ts\nfunction fallbackAsync(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    async _parse(input, config) {\n      const result = await schema._parse(input, config);\n      return result.issues ? schemaResult(\n        true,\n        await getFallbackAsync(this, { input, issues: result.issues })\n      ) : result;\n    }\n  };\n}\n\n// src/methods/forward/forward.ts\nfunction forward(validation, pathList) {\n  return {\n    ...validation,\n    _parse(input) {\n      const result = validation._parse(input);\n      if (result.issues) {\n        for (const issue of result.issues) {\n          let pathInput = input;\n          for (const key of pathList) {\n            const pathValue = pathInput[key];\n            issue.input = pathValue;\n            const pathItem = {\n              type: \"unknown\",\n              origin: \"value\",\n              input: pathInput,\n              key,\n              value: pathValue\n            };\n            issue.path ? issue.path.push(pathItem) : issue.path = [pathItem];\n            if (!pathValue) {\n              break;\n            }\n            pathInput = pathValue;\n          }\n        }\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/forward/forwardAsync.ts\nfunction forwardAsync(validation, pathList) {\n  return {\n    ...validation,\n    async _parse(input) {\n      const result = await validation._parse(input);\n      if (result.issues) {\n        for (const issue of result.issues) {\n          let pathInput = input;\n          for (const key of pathList) {\n            const pathValue = pathInput[key];\n            issue.input = pathValue;\n            const pathItem = {\n              type: \"unknown\",\n              origin: \"value\",\n              input: pathInput,\n              key,\n              value: pathValue\n            };\n            issue.path ? issue.path.push(pathItem) : issue.path = [pathItem];\n            if (!pathValue) {\n              break;\n            }\n            pathInput = pathValue;\n          }\n        }\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/getDefault/getDefault.ts\nfunction getDefault(schema) {\n  return typeof schema.default === \"function\" ? schema.default() : schema.default;\n}\n\n// src/methods/getDefault/getDefaultAsync.ts\nasync function getDefaultAsync(schema) {\n  return typeof schema.default === \"function\" ? await schema.default() : schema.default;\n}\n\n// src/methods/getDefaults/getDefaults.ts\nfunction getDefaults(schema) {\n  if (schema.default !== void 0) {\n    return getDefault(schema);\n  }\n  if (isOfType(\"object\", schema)) {\n    return Object.fromEntries(\n      Object.entries(schema.entries).map(([key, value2]) => [\n        key,\n        getDefaults(value2)\n      ])\n    );\n  }\n  if (isOfType(\"tuple\", schema)) {\n    return schema.items.map(getDefaults);\n  }\n  return void 0;\n}\n\n// src/methods/getDefaults/getDefaultsAsync.ts\nasync function getDefaultsAsync(schema) {\n  if (schema.default !== void 0) {\n    return getDefaultAsync(schema);\n  }\n  if (isOfType(\"object\", schema)) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getDefaultsAsync(value2)\n        ])\n      )\n    );\n  }\n  if (isOfType(\"tuple\", schema)) {\n    return Promise.all(\n      schema.items.map(getDefaultsAsync)\n    );\n  }\n  return void 0;\n}\n\n// src/methods/getFallbacks/getFallbacks.ts\nfunction getFallbacks(schema) {\n  if (schema.fallback !== void 0) {\n    return getFallback(schema);\n  }\n  if (isOfType(\"object\", schema)) {\n    return Object.fromEntries(\n      Object.entries(schema.entries).map(([key, value2]) => [\n        key,\n        getFallbacks(value2)\n      ])\n    );\n  }\n  if (isOfType(\"tuple\", schema)) {\n    return schema.items.map(getFallbacks);\n  }\n  return void 0;\n}\n\n// src/methods/getFallbacks/getFallbacksAsync.ts\nasync function getFallbacksAsync(schema) {\n  if (schema.fallback !== void 0) {\n    return getFallbackAsync(schema);\n  }\n  if (isOfType(\"object\", schema)) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getFallbacksAsync(value2)\n        ])\n      )\n    );\n  }\n  if (isOfType(\"tuple\", schema)) {\n    return Promise.all(\n      schema.items.map(getFallbacksAsync)\n    );\n  }\n  return void 0;\n}\n\n// src/methods/is/is.ts\nfunction is(schema, input, config) {\n  return !schema._parse(input, {\n    abortEarly: true,\n    skipPipe: getGlobalConfig(config)?.skipPipe\n  }).issues;\n}\n\n// src/schemas/any/any.ts\nfunction any(pipe) {\n  return {\n    type: \"any\",\n    expects: \"any\",\n    async: false,\n    pipe,\n    _parse(input, config) {\n      return pipeResult(this, input, config);\n    }\n  };\n}\n\n// src/schemas/any/anyAsync.ts\nfunction anyAsync(pipe) {\n  return {\n    type: \"any\",\n    expects: \"any\",\n    async: true,\n    pipe,\n    async _parse(input, config) {\n      return pipeResultAsync(this, input, config);\n    }\n  };\n}\n\n// src/schemas/array/array.ts\nfunction array(item, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"array\",\n    expects: \"Array\",\n    async: false,\n    item,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (Array.isArray(input)) {\n        let typed = true;\n        let issues;\n        const output = [];\n        for (let key = 0; key < input.length; key++) {\n          const value2 = input[key];\n          const result = this.item._parse(value2, config);\n          if (result.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of result.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = result.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!result.typed) {\n            typed = false;\n          }\n          output.push(result.output);\n        }\n        if (typed) {\n          return pipeResult(this, output, config, issues);\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, array, input, config);\n    }\n  };\n}\n\n// src/schemas/array/arrayAsync.ts\nfunction arrayAsync(item, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"array\",\n    expects: \"Array\",\n    async: true,\n    item,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (Array.isArray(input)) {\n        let typed = true;\n        let issues;\n        const output = [];\n        await Promise.all(\n          input.map(async (value2, key) => {\n            if (!(config?.abortEarly && issues)) {\n              const result = await this.item._parse(value2, config);\n              if (!(config?.abortEarly && issues)) {\n                if (result.issues) {\n                  const pathItem = {\n                    type: \"array\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: value2\n                  };\n                  for (const issue of result.issues) {\n                    if (issue.path) {\n                      issue.path.unshift(pathItem);\n                    } else {\n                      issue.path = [pathItem];\n                    }\n                    issues?.push(issue);\n                  }\n                  if (!issues) {\n                    issues = result.issues;\n                  }\n                  if (config?.abortEarly) {\n                    typed = false;\n                    throw null;\n                  }\n                }\n                if (!result.typed) {\n                  typed = false;\n                }\n                output[key] = result.output;\n              }\n            }\n          })\n        ).catch(() => null);\n        if (typed) {\n          return pipeResultAsync(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, arrayAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/bigint/bigint.ts\nfunction bigint(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"bigint\",\n    expects: \"bigint\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (typeof input === \"bigint\") {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, bigint, input, config);\n    }\n  };\n}\n\n// src/schemas/bigint/bigintAsync.ts\nfunction bigintAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"bigint\",\n    expects: \"bigint\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (typeof input === \"bigint\") {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, bigintAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/blob/blob.ts\nfunction blob(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"blob\",\n    expects: \"Blob\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input instanceof Blob) {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, blob, input, config);\n    }\n  };\n}\n\n// src/schemas/blob/blobAsync.ts\nfunction blobAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"blob\",\n    expects: \"Blob\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input instanceof Blob) {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, blobAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/boolean/boolean.ts\nfunction boolean(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"boolean\",\n    expects: \"boolean\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (typeof input === \"boolean\") {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, boolean, input, config);\n    }\n  };\n}\n\n// src/schemas/boolean/booleanAsync.ts\nfunction booleanAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"boolean\",\n    expects: \"boolean\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (typeof input === \"boolean\") {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, booleanAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/date/date.ts\nfunction date(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"date\",\n    expects: \"Date\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input instanceof Date && !isNaN(input.getTime())) {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, date, input, config);\n    }\n  };\n}\n\n// src/schemas/date/dateAsync.ts\nfunction dateAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"date\",\n    expects: \"Date\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input instanceof Date && !isNaN(input.getTime())) {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, dateAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/enum/enum.ts\nfunction enum_(enum__, message) {\n  const values = Object.values(enum__);\n  return {\n    type: \"enum\",\n    expects: values.map(stringify).join(\" | \"),\n    async: false,\n    enum: enum__,\n    message,\n    _parse(input, config) {\n      if (values.includes(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, enum_, input, config);\n    }\n  };\n}\n\n// src/schemas/enum/enumAsync.ts\nfunction enumAsync(enum_2, message) {\n  const values = Object.values(enum_2);\n  return {\n    type: \"enum\",\n    expects: values.map(stringify).join(\" | \"),\n    async: true,\n    enum: enum_2,\n    message,\n    async _parse(input, config) {\n      if (values.includes(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, enumAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/instance/instance.ts\nfunction instance(class_, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"instance\",\n    expects: class_.name,\n    async: false,\n    class: class_,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input instanceof this.class) {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, instance, input, config);\n    }\n  };\n}\n\n// src/schemas/instance/instanceAsync.ts\nfunction instanceAsync(class_, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"instance\",\n    expects: class_.name,\n    async: true,\n    class: class_,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input instanceof this.class) {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, instanceAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/intersect/utils/mergeOutputs/mergeOutputs.ts\nfunction mergeOutputs(output1, output2) {\n  if (typeof output1 === typeof output2) {\n    if (output1 === output2 || output1 instanceof Date && output2 instanceof Date && +output1 === +output2) {\n      return { output: output1 };\n    }\n    if (Array.isArray(output1) && Array.isArray(output2)) {\n      if (output1.length === output2.length) {\n        const array2 = [];\n        for (let index = 0; index < output1.length; index++) {\n          const result = mergeOutputs(output1[index], output2[index]);\n          if (result.invalid) {\n            return result;\n          }\n          array2.push(result.output);\n        }\n        return { output: array2 };\n      }\n      return { invalid: true };\n    }\n    if (output1 && output2 && output1.constructor === Object && output2.constructor === Object) {\n      const object2 = { ...output1, ...output2 };\n      for (const key in output1) {\n        if (key in output2) {\n          const result = mergeOutputs(output1[key], output2[key]);\n          if (result.invalid) {\n            return result;\n          }\n          object2[key] = result.output;\n        }\n      }\n      return { output: object2 };\n    }\n  }\n  return { invalid: true };\n}\n\n// src/schemas/intersect/intersect.ts\nfunction intersect(options, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"intersect\",\n    expects: [...new Set(options.map((option) => option.expects))].join(\" & \"),\n    async: false,\n    options,\n    message,\n    pipe,\n    _parse(input, config) {\n      let typed = true;\n      let issues;\n      let output;\n      const outputs = [];\n      for (const schema of this.options) {\n        const result = schema._parse(input, config);\n        if (result.issues) {\n          if (issues) {\n            for (const issue of result.issues) {\n              issues.push(issue);\n            }\n          } else {\n            issues = result.issues;\n          }\n          if (config?.abortEarly) {\n            typed = false;\n            break;\n          }\n        }\n        if (!result.typed) {\n          typed = false;\n        }\n        outputs.push(result.output);\n      }\n      if (typed) {\n        output = outputs[0];\n        for (let index = 1; index < outputs.length; index++) {\n          const result = mergeOutputs(output, outputs[index]);\n          if (result.invalid) {\n            return schemaIssue(this, intersect, input, config);\n          }\n          output = result.output;\n        }\n        return pipeResult(this, output, config, issues);\n      }\n      return schemaResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/intersect/intersectAsync.ts\nfunction intersectAsync(options, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"intersect\",\n    expects: [...new Set(options.map((option) => option.expects))].join(\" & \"),\n    async: true,\n    options,\n    message,\n    pipe,\n    async _parse(input, config) {\n      let typed = true;\n      let issues;\n      let output;\n      const outputs = [];\n      await Promise.all(\n        this.options.map(async (schema) => {\n          if (!(config?.abortEarly && issues)) {\n            const result = await schema._parse(input, config);\n            if (!(config?.abortEarly && issues)) {\n              if (result.issues) {\n                if (issues) {\n                  for (const issue of result.issues) {\n                    issues.push(issue);\n                  }\n                } else {\n                  issues = result.issues;\n                }\n                if (config?.abortEarly) {\n                  typed = false;\n                  throw null;\n                }\n              }\n              if (!result.typed) {\n                typed = false;\n              }\n              outputs.push(result.output);\n            }\n          }\n        })\n      ).catch(() => null);\n      if (typed) {\n        output = outputs[0];\n        for (let index = 1; index < outputs.length; index++) {\n          const result = mergeOutputs(output, outputs[index]);\n          if (result.invalid) {\n            return schemaIssue(this, intersectAsync, input, config);\n          }\n          output = result.output;\n        }\n        return pipeResultAsync(this, output, config, issues);\n      }\n      return schemaResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/lazy/lazy.ts\nfunction lazy(getter) {\n  return {\n    type: \"lazy\",\n    expects: \"unknown\",\n    async: false,\n    getter,\n    _parse(input, config) {\n      return this.getter(input)._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/lazy/lazyAsync.ts\nfunction lazyAsync(getter) {\n  return {\n    type: \"lazy\",\n    expects: \"unknown\",\n    async: true,\n    getter,\n    async _parse(input, config) {\n      return (await this.getter(input))._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/literal/literal.ts\nfunction literal(literal_, message) {\n  return {\n    type: \"literal\",\n    expects: stringify(literal_),\n    async: false,\n    literal: literal_,\n    message,\n    _parse(input, config) {\n      if (input === this.literal) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, literal, input, config);\n    }\n  };\n}\n\n// src/schemas/literal/literalAsync.ts\nfunction literalAsync(literal2, message) {\n  return {\n    type: \"literal\",\n    expects: stringify(literal2),\n    async: true,\n    literal: literal2,\n    message,\n    async _parse(input, config) {\n      if (input === this.literal) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, literalAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/map/map.ts\nfunction map(key, value2, arg3, arg4) {\n  const [message, pipe] = defaultArgs(arg3, arg4);\n  return {\n    type: \"map\",\n    expects: \"Map\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input instanceof Map) {\n        let typed = true;\n        let issues;\n        const output = /* @__PURE__ */ new Map();\n        for (const [inputKey, inputValue] of input.entries()) {\n          let pathItem;\n          const keyResult = this.key._parse(inputKey, config);\n          if (keyResult.issues) {\n            pathItem = {\n              type: \"map\",\n              origin: \"key\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of keyResult.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = keyResult.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          const valueResult = this.value._parse(inputValue, config);\n          if (valueResult.issues) {\n            pathItem = pathItem ?? {\n              type: \"map\",\n              origin: \"value\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of valueResult.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = valueResult.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!keyResult.typed || !valueResult.typed) {\n            typed = false;\n          }\n          output.set(keyResult.output, valueResult.output);\n        }\n        if (typed) {\n          return pipeResult(this, output, config, issues);\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, map, input, config);\n    }\n  };\n}\n\n// src/schemas/map/mapAsync.ts\nfunction mapAsync(key, value2, arg3, arg4) {\n  const [message, pipe] = defaultArgs(arg3, arg4);\n  return {\n    type: \"map\",\n    expects: \"Map\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input instanceof Map) {\n        let typed = true;\n        let issues;\n        const output = /* @__PURE__ */ new Map();\n        await Promise.all(\n          Array.from(input.entries()).map(async ([inputKey, inputValue]) => {\n            let pathItem;\n            const [keyResult, valueResult] = await Promise.all(\n              [\n                { schema: this.key, value: inputKey, origin: \"key\" },\n                { schema: this.value, value: inputValue, origin: \"value\" }\n              ].map(async ({ schema, value: value3, origin }) => {\n                if (!(config?.abortEarly && issues)) {\n                  const result = await schema._parse(value3, config);\n                  if (!(config?.abortEarly && issues)) {\n                    if (result.issues) {\n                      pathItem = pathItem ?? {\n                        type: \"map\",\n                        origin,\n                        input,\n                        key: inputKey,\n                        value: inputValue\n                      };\n                      for (const issue of result.issues) {\n                        if (issue.path) {\n                          issue.path.unshift(pathItem);\n                        } else {\n                          issue.path = [pathItem];\n                        }\n                        issues?.push(issue);\n                      }\n                      if (!issues) {\n                        issues = result.issues;\n                      }\n                      if (config?.abortEarly) {\n                        throw null;\n                      }\n                    }\n                    return result;\n                  }\n                }\n              })\n            ).catch(() => []);\n            if (!keyResult?.typed || !valueResult?.typed) {\n              typed = false;\n            }\n            if (keyResult && valueResult) {\n              output.set(keyResult.output, valueResult.output);\n            }\n          })\n        );\n        if (typed) {\n          return pipeResultAsync(this, output, config, issues);\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, mapAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/nan/nan.ts\nfunction nan(message) {\n  return {\n    type: \"nan\",\n    expects: \"NaN\",\n    async: false,\n    message,\n    _parse(input, config) {\n      if (Number.isNaN(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, nan, input, config);\n    }\n  };\n}\n\n// src/schemas/nan/nanAsync.ts\nfunction nanAsync(message) {\n  return {\n    type: \"nan\",\n    expects: \"NaN\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      if (Number.isNaN(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, nanAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/never/never.ts\nfunction never(message) {\n  return {\n    type: \"never\",\n    expects: \"never\",\n    async: false,\n    message,\n    _parse(input, config) {\n      return schemaIssue(this, never, input, config);\n    }\n  };\n}\n\n// src/schemas/never/neverAsync.ts\nfunction neverAsync(message) {\n  return {\n    type: \"never\",\n    expects: \"never\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      return schemaIssue(this, neverAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullable.ts\nfunction nonNullable(wrapped, message) {\n  return {\n    type: \"non_nullable\",\n    expects: \"!null\",\n    async: false,\n    wrapped,\n    message,\n    _parse(input, config) {\n      if (input === null) {\n        return schemaIssue(this, nonNullable, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullableAsync.ts\nfunction nonNullableAsync(wrapped, message) {\n  return {\n    type: \"non_nullable\",\n    expects: \"!null\",\n    async: true,\n    wrapped,\n    message,\n    async _parse(input, config) {\n      if (input === null) {\n        return schemaIssue(this, nonNullableAsync, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullish.ts\nfunction nonNullish(wrapped, message) {\n  return {\n    type: \"non_nullish\",\n    expects: \"!null & !undefined\",\n    async: false,\n    wrapped,\n    message,\n    _parse(input, config) {\n      if (input === null || input === void 0) {\n        return schemaIssue(this, nonNullish, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullishAsync.ts\nfunction nonNullishAsync(wrapped, message) {\n  return {\n    type: \"non_nullish\",\n    expects: \"!null & !undefined\",\n    async: true,\n    wrapped,\n    message,\n    async _parse(input, config) {\n      if (input === null || input === void 0) {\n        return schemaIssue(this, nonNullishAsync, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptional.ts\nfunction nonOptional(wrapped, message) {\n  return {\n    type: \"non_optional\",\n    expects: \"!undefined\",\n    async: false,\n    wrapped,\n    message,\n    _parse(input, config) {\n      if (input === void 0) {\n        return schemaIssue(this, nonOptional, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptionalAsync.ts\nfunction nonOptionalAsync(wrapped, message) {\n  return {\n    type: \"non_optional\",\n    expects: \"!undefined\",\n    async: true,\n    wrapped,\n    message,\n    async _parse(input, config) {\n      if (input === void 0) {\n        return schemaIssue(this, nonOptionalAsync, input, config);\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nullable/nullable.ts\nfunction nullable(wrapped, default_) {\n  return {\n    type: \"nullable\",\n    expects: `${wrapped.expects} | null`,\n    async: false,\n    wrapped,\n    default: default_,\n    _parse(input, config) {\n      if (input === null) {\n        const override = getDefault(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nullable/nullableAsync.ts\nfunction nullableAsync(wrapped, default_) {\n  return {\n    type: \"nullable\",\n    expects: `${wrapped.expects} | null`,\n    async: true,\n    wrapped,\n    default: default_,\n    async _parse(input, config) {\n      if (input === null) {\n        const override = await getDefaultAsync(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nullish/nullish.ts\nfunction nullish(wrapped, default_) {\n  return {\n    type: \"nullish\",\n    expects: `${wrapped.expects} | null | undefined`,\n    async: false,\n    wrapped,\n    default: default_,\n    _parse(input, config) {\n      if (input === null || input === void 0) {\n        const override = getDefault(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/nullish/nullishAsync.ts\nfunction nullishAsync(wrapped, default_) {\n  return {\n    type: \"nullish\",\n    expects: `${wrapped.expects} | null | undefined`,\n    async: true,\n    wrapped,\n    default: default_,\n    async _parse(input, config) {\n      if (input === null || input === void 0) {\n        const override = await getDefaultAsync(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/null/null.ts\nfunction null_(message) {\n  return {\n    type: \"null\",\n    expects: \"null\",\n    async: false,\n    message,\n    _parse(input, config) {\n      if (input === null) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, null_, input, config);\n    }\n  };\n}\n\n// src/schemas/null/nullAsync.ts\nfunction nullAsync(message) {\n  return {\n    type: \"null\",\n    expects: \"null\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      if (input === null) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, nullAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/number/number.ts\nfunction number(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"number\",\n    expects: \"number\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (typeof input === \"number\" && !isNaN(input)) {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, number, input, config);\n    }\n  };\n}\n\n// src/schemas/number/numberAsync.ts\nfunction numberAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"number\",\n    expects: \"number\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (typeof input === \"number\" && !isNaN(input)) {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, numberAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/object/object.ts\nfunction object(entries, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  let cachedEntries;\n  return {\n    type: \"object\",\n    expects: \"Object\",\n    async: false,\n    entries,\n    rest,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        cachedEntries = cachedEntries ?? Object.entries(this.entries);\n        let typed = true;\n        let issues;\n        const output = {};\n        for (const [key, schema] of cachedEntries) {\n          const value2 = input[key];\n          const result = schema._parse(value2, config);\n          if (result.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of result.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = result.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!result.typed) {\n            typed = false;\n          }\n          if (result.output !== void 0 || key in input) {\n            output[key] = result.output;\n          }\n        }\n        if (this.rest && !(config?.abortEarly && issues)) {\n          for (const key in input) {\n            if (!(key in this.entries)) {\n              const value2 = input[key];\n              const result = this.rest._parse(value2, config);\n              if (result.issues) {\n                const pathItem = {\n                  type: \"object\",\n                  origin: \"value\",\n                  input,\n                  key,\n                  value: value2\n                };\n                for (const issue of result.issues) {\n                  if (issue.path) {\n                    issue.path.unshift(pathItem);\n                  } else {\n                    issue.path = [pathItem];\n                  }\n                  issues?.push(issue);\n                }\n                if (!issues) {\n                  issues = result.issues;\n                }\n                if (config?.abortEarly) {\n                  typed = false;\n                  break;\n                }\n              }\n              if (!result.typed) {\n                typed = false;\n              }\n              output[key] = result.output;\n            }\n          }\n        }\n        if (typed) {\n          return pipeResult(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, object, input, config);\n    }\n  };\n}\n\n// src/schemas/object/objectAsync.ts\nfunction objectAsync(entries, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  let cachedEntries;\n  return {\n    type: \"object\",\n    expects: \"Object\",\n    async: true,\n    entries,\n    rest,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        cachedEntries = cachedEntries ?? Object.entries(this.entries);\n        let typed = true;\n        let issues;\n        const output = {};\n        await Promise.all([\n          Promise.all(\n            cachedEntries.map(async ([key, schema]) => {\n              if (!(config?.abortEarly && issues)) {\n                const value2 = input[key];\n                const result = await schema._parse(value2, config);\n                if (!(config?.abortEarly && issues)) {\n                  if (result.issues) {\n                    const pathItem = {\n                      type: \"object\",\n                      origin: \"value\",\n                      input,\n                      key,\n                      value: value2\n                    };\n                    for (const issue of result.issues) {\n                      if (issue.path) {\n                        issue.path.unshift(pathItem);\n                      } else {\n                        issue.path = [pathItem];\n                      }\n                      issues?.push(issue);\n                    }\n                    if (!issues) {\n                      issues = result.issues;\n                    }\n                    if (config?.abortEarly) {\n                      typed = false;\n                      throw null;\n                    }\n                  }\n                  if (!result.typed) {\n                    typed = false;\n                  }\n                  if (result.output !== void 0 || key in input) {\n                    output[key] = result.output;\n                  }\n                }\n              }\n            })\n          ),\n          this.rest && Promise.all(\n            Object.entries(input).map(async ([key, value2]) => {\n              if (!(config?.abortEarly && issues)) {\n                if (!(key in this.entries)) {\n                  const result = await this.rest._parse(value2, config);\n                  if (!(config?.abortEarly && issues)) {\n                    if (result.issues) {\n                      const pathItem = {\n                        type: \"object\",\n                        origin: \"value\",\n                        input,\n                        key,\n                        value: value2\n                      };\n                      for (const issue of result.issues) {\n                        if (issue.path) {\n                          issue.path.unshift(pathItem);\n                        } else {\n                          issue.path = [pathItem];\n                        }\n                        issues?.push(issue);\n                      }\n                      if (!issues) {\n                        issues = result.issues;\n                      }\n                      if (config?.abortEarly) {\n                        typed = false;\n                        throw null;\n                      }\n                    }\n                    if (!result.typed) {\n                      typed = false;\n                    }\n                    output[key] = result.output;\n                  }\n                }\n              }\n            })\n          )\n        ]).catch(() => null);\n        if (typed) {\n          return pipeResultAsync(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, objectAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/optional/optional.ts\nfunction optional(wrapped, default_) {\n  return {\n    type: \"optional\",\n    expects: `${wrapped.expects} | undefined`,\n    async: false,\n    wrapped,\n    default: default_,\n    _parse(input, config) {\n      if (input === void 0) {\n        const override = getDefault(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/optional/optionalAsync.ts\nfunction optionalAsync(wrapped, default_) {\n  return {\n    type: \"optional\",\n    expects: `${wrapped.expects} | undefined`,\n    async: true,\n    wrapped,\n    default: default_,\n    async _parse(input, config) {\n      if (input === void 0) {\n        const override = await getDefaultAsync(this);\n        if (override === void 0) {\n          return schemaResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, config);\n    }\n  };\n}\n\n// src/schemas/picklist/picklist.ts\nfunction picklist(options, message) {\n  return {\n    type: \"picklist\",\n    expects: options.map(stringify).join(\" | \"),\n    async: false,\n    options,\n    message,\n    _parse(input, config) {\n      if (this.options.includes(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, picklist, input, config);\n    }\n  };\n}\n\n// src/schemas/picklist/picklistAsync.ts\nfunction picklistAsync(options, message) {\n  return {\n    type: \"picklist\",\n    expects: options.map(stringify).join(\" | \"),\n    async: true,\n    options,\n    message,\n    async _parse(input, config) {\n      if (this.options.includes(input)) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, picklistAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/string/string.ts\nfunction string(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"string\",\n    expects: \"string\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (typeof input === \"string\") {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, string, input, config);\n    }\n  };\n}\n\n// src/schemas/string/stringAsync.ts\nfunction stringAsync(arg1, arg2) {\n  const [message, pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"string\",\n    expects: \"string\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (typeof input === \"string\") {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, stringAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/record/utils/recordArgs/recordArgs.ts\nfunction recordArgs(arg1, arg2, arg3, arg4) {\n  if (typeof arg2 === \"object\" && !Array.isArray(arg2)) {\n    const [message2, pipe2] = defaultArgs(arg3, arg4);\n    return [arg1, arg2, message2, pipe2];\n  }\n  const [message, pipe] = defaultArgs(\n    arg2,\n    arg3\n  );\n  return [string(), arg1, message, pipe];\n}\n\n// src/schemas/record/values.ts\nvar BLOCKED_KEYS = [\"__proto__\", \"prototype\", \"constructor\"];\n\n// src/schemas/record/record.ts\nfunction record(arg1, arg2, arg3, arg4) {\n  const [key, value2, message, pipe] = recordArgs(arg1, arg2, arg3, arg4);\n  return {\n    type: \"record\",\n    expects: \"Object\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        let typed = true;\n        let issues;\n        const output = {};\n        for (const [inputKey, inputValue] of Object.entries(input)) {\n          if (!BLOCKED_KEYS.includes(inputKey)) {\n            let pathItem;\n            const keyResult = this.key._parse(inputKey, config);\n            if (keyResult.issues) {\n              pathItem = {\n                type: \"record\",\n                origin: \"key\",\n                input,\n                key: inputKey,\n                value: inputValue\n              };\n              for (const issue of keyResult.issues) {\n                issue.path = [pathItem];\n                issues?.push(issue);\n              }\n              if (!issues) {\n                issues = keyResult.issues;\n              }\n              if (config?.abortEarly) {\n                typed = false;\n                break;\n              }\n            }\n            const valueResult = this.value._parse(inputValue, config);\n            if (valueResult.issues) {\n              pathItem = pathItem ?? {\n                type: \"record\",\n                origin: \"value\",\n                input,\n                key: inputKey,\n                value: inputValue\n              };\n              for (const issue of valueResult.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                issues?.push(issue);\n              }\n              if (!issues) {\n                issues = valueResult.issues;\n              }\n              if (config?.abortEarly) {\n                typed = false;\n                break;\n              }\n            }\n            if (!keyResult.typed || !valueResult.typed) {\n              typed = false;\n            }\n            if (keyResult.typed) {\n              output[keyResult.output] = valueResult.output;\n            }\n          }\n        }\n        if (typed) {\n          return pipeResult(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, record, input, config);\n    }\n  };\n}\n\n// src/schemas/record/recordAsync.ts\nfunction recordAsync(arg1, arg2, arg3, arg4) {\n  const [key, value2, message, pipe] = recordArgs(arg1, arg2, arg3, arg4);\n  return {\n    type: \"record\",\n    expects: \"Object\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        let typed = true;\n        let issues;\n        const output = {};\n        await Promise.all(\n          // Note: `Object.entries(...)` converts each key to a string\n          Object.entries(input).map(async ([inputKey, inputValue]) => {\n            if (!BLOCKED_KEYS.includes(inputKey)) {\n              let pathItem;\n              const [keyResult, valueResult] = await Promise.all(\n                [\n                  { schema: this.key, value: inputKey, origin: \"key\" },\n                  { schema: this.value, value: inputValue, origin: \"value\" }\n                ].map(async ({ schema, value: value3, origin }) => {\n                  if (!(config?.abortEarly && issues)) {\n                    const result = await schema._parse(value3, config);\n                    if (!(config?.abortEarly && issues)) {\n                      if (result.issues) {\n                        pathItem = pathItem ?? {\n                          type: \"record\",\n                          origin,\n                          input,\n                          key: inputKey,\n                          value: inputValue\n                        };\n                        for (const issue of result.issues) {\n                          if (issue.path) {\n                            issue.path.unshift(pathItem);\n                          } else {\n                            issue.path = [pathItem];\n                          }\n                          issues?.push(issue);\n                        }\n                        if (!issues) {\n                          issues = result.issues;\n                        }\n                        if (config?.abortEarly) {\n                          throw null;\n                        }\n                      }\n                      return result;\n                    }\n                  }\n                })\n              ).catch(() => []);\n              if (!keyResult?.typed || !valueResult?.typed) {\n                typed = false;\n              }\n              if (keyResult?.typed && valueResult) {\n                output[keyResult.output] = valueResult.output;\n              }\n            }\n          })\n        );\n        if (typed) {\n          return pipeResultAsync(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, recordAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/set/set.ts\nfunction set(value2, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"set\",\n    expects: \"Set\",\n    async: false,\n    value: value2,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input instanceof Set) {\n        let key = 0;\n        let typed = true;\n        let issues;\n        const output = /* @__PURE__ */ new Set();\n        for (const inputValue of input) {\n          const result = this.value._parse(inputValue, config);\n          if (result.issues) {\n            const pathItem = {\n              type: \"set\",\n              origin: \"value\",\n              input,\n              key,\n              value: inputValue\n            };\n            for (const issue of result.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = result.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!result.typed) {\n            typed = false;\n          }\n          output.add(result.output);\n          key++;\n        }\n        if (typed) {\n          return pipeResult(this, output, config, issues);\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, set, input, config);\n    }\n  };\n}\n\n// src/schemas/set/setAsync.ts\nfunction setAsync(value2, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"set\",\n    expects: \"Set\",\n    async: true,\n    value: value2,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input instanceof Set) {\n        let typed = true;\n        let issues;\n        const output = /* @__PURE__ */ new Set();\n        await Promise.all(\n          Array.from(input.values()).map(async (inputValue, key) => {\n            if (!(config?.abortEarly && issues)) {\n              const result = await this.value._parse(inputValue, config);\n              if (!(config?.abortEarly && issues)) {\n                if (result.issues) {\n                  const pathItem = {\n                    type: \"set\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: inputValue\n                  };\n                  for (const issue of result.issues) {\n                    if (issue.path) {\n                      issue.path.unshift(pathItem);\n                    } else {\n                      issue.path = [pathItem];\n                    }\n                    issues?.push(issue);\n                  }\n                  if (!issues) {\n                    issues = result.issues;\n                  }\n                  if (config?.abortEarly) {\n                    typed = false;\n                    throw null;\n                  }\n                }\n                if (!result.typed) {\n                  typed = false;\n                }\n                output.add(result.output);\n              }\n            }\n          })\n        ).catch(() => null);\n        if (typed) {\n          return pipeResultAsync(this, output, config, issues);\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, setAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/special/special.ts\nfunction special(check, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"special\",\n    expects: \"unknown\",\n    async: false,\n    check,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (this.check(input)) {\n        return pipeResult(this, input, config);\n      }\n      return schemaIssue(this, special, input, config);\n    }\n  };\n}\n\n// src/schemas/special/specialAsync.ts\nfunction specialAsync(check, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"special\",\n    expects: \"unknown\",\n    async: true,\n    check,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (await this.check(input)) {\n        return pipeResultAsync(this, input, config);\n      }\n      return schemaIssue(this, specialAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/symbol/symbol.ts\nfunction symbol(message) {\n  return {\n    type: \"symbol\",\n    expects: \"symbol\",\n    async: false,\n    message,\n    _parse(input, config) {\n      if (typeof input === \"symbol\") {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, symbol, input, config);\n    }\n  };\n}\n\n// src/schemas/symbol/symbolAsync.ts\nfunction symbolAsync(message) {\n  return {\n    type: \"symbol\",\n    expects: \"symbol\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      if (typeof input === \"symbol\") {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, symbolAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/tuple/tuple.ts\nfunction tuple(items, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return {\n    type: \"tuple\",\n    expects: \"Array\",\n    async: false,\n    items,\n    rest,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (Array.isArray(input)) {\n        let typed = true;\n        let issues;\n        const output = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const result = this.items[key]._parse(value2, config);\n          if (result.issues) {\n            const pathItem = {\n              type: \"tuple\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of result.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = result.issues;\n            }\n            if (config?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!result.typed) {\n            typed = false;\n          }\n          output[key] = result.output;\n        }\n        if (this.rest && !(config?.abortEarly && issues)) {\n          for (let key = this.items.length; key < input.length; key++) {\n            const value2 = input[key];\n            const result = this.rest._parse(value2, config);\n            if (result.issues) {\n              const pathItem = {\n                type: \"tuple\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of result.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                issues?.push(issue);\n              }\n              if (!issues) {\n                issues = result.issues;\n              }\n              if (config?.abortEarly) {\n                typed = false;\n                break;\n              }\n            }\n            if (!result.typed) {\n              typed = false;\n            }\n            output[key] = result.output;\n          }\n        }\n        if (typed) {\n          return pipeResult(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, tuple, input, config);\n    }\n  };\n}\n\n// src/schemas/tuple/tupleAsync.ts\nfunction tupleAsync(items, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return {\n    type: \"tuple\",\n    expects: \"Array\",\n    async: true,\n    items,\n    rest,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (Array.isArray(input)) {\n        let typed = true;\n        let issues;\n        const output = [];\n        await Promise.all([\n          // Parse schema of each tuple item\n          Promise.all(\n            this.items.map(async (schema, key) => {\n              if (!(config?.abortEarly && issues)) {\n                const value2 = input[key];\n                const result = await schema._parse(value2, config);\n                if (!(config?.abortEarly && issues)) {\n                  if (result.issues) {\n                    const pathItem = {\n                      type: \"tuple\",\n                      origin: \"value\",\n                      input,\n                      key,\n                      value: value2\n                    };\n                    for (const issue of result.issues) {\n                      if (issue.path) {\n                        issue.path.unshift(pathItem);\n                      } else {\n                        issue.path = [pathItem];\n                      }\n                      issues?.push(issue);\n                    }\n                    if (!issues) {\n                      issues = result.issues;\n                    }\n                    if (config?.abortEarly) {\n                      typed = false;\n                      throw null;\n                    }\n                  }\n                  if (!result.typed) {\n                    typed = false;\n                  }\n                  output[key] = result.output;\n                }\n              }\n            })\n          ),\n          // If necessary parse schema of each rest item\n          this.rest && Promise.all(\n            input.slice(this.items.length).map(async (value2, index) => {\n              if (!(config?.abortEarly && issues)) {\n                const key = this.items.length + index;\n                const result = await this.rest._parse(value2, config);\n                if (!(config?.abortEarly && issues)) {\n                  if (result.issues) {\n                    const pathItem = {\n                      type: \"tuple\",\n                      origin: \"value\",\n                      input,\n                      key,\n                      value: value2\n                    };\n                    for (const issue of result.issues) {\n                      if (issue.path) {\n                        issue.path.unshift(pathItem);\n                      } else {\n                        issue.path = [pathItem];\n                      }\n                      issues?.push(issue);\n                    }\n                    if (!issues) {\n                      issues = result.issues;\n                    }\n                    if (config?.abortEarly) {\n                      typed = false;\n                      throw null;\n                    }\n                  }\n                  if (!result.typed) {\n                    typed = false;\n                  }\n                  output[key] = result.output;\n                }\n              }\n            })\n          )\n        ]).catch(() => null);\n        if (typed) {\n          return pipeResultAsync(\n            this,\n            output,\n            config,\n            issues\n          );\n        }\n        return schemaResult(false, output, issues);\n      }\n      return schemaIssue(this, tupleAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/undefined/undefined.ts\nfunction undefined_(message) {\n  return {\n    type: \"undefined\",\n    expects: \"undefined\",\n    async: false,\n    message,\n    _parse(input, config) {\n      if (input === void 0) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, undefined_, input, config);\n    }\n  };\n}\n\n// src/schemas/undefined/undefinedAsync.ts\nfunction undefinedAsync(message) {\n  return {\n    type: \"undefined\",\n    expects: \"undefined\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      if (input === void 0) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, undefinedAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/union/utils/subissues/subissues.ts\nfunction subissues(results) {\n  let issues;\n  if (results) {\n    for (const result of results) {\n      if (issues) {\n        for (const issue of result.issues) {\n          issues.push(issue);\n        }\n      } else {\n        issues = result.issues;\n      }\n    }\n  }\n  return issues;\n}\n\n// src/schemas/union/union.ts\nfunction union(options, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"union\",\n    expects: [...new Set(options.map((option) => option.expects))].join(\" | \"),\n    async: false,\n    options,\n    message,\n    pipe,\n    _parse(input, config) {\n      let validResult;\n      let untypedResults;\n      let typedResults;\n      for (const schema of this.options) {\n        const result = schema._parse(input, config);\n        if (result.typed) {\n          if (!result.issues) {\n            validResult = result;\n            break;\n          } else {\n            typedResults ? typedResults.push(result) : typedResults = [result];\n          }\n        } else {\n          untypedResults ? untypedResults.push(result) : untypedResults = [result];\n        }\n      }\n      if (validResult) {\n        return pipeResult(this, validResult.output, config);\n      }\n      if (typedResults?.length) {\n        const firstResult = typedResults[0];\n        return pipeResult(\n          this,\n          firstResult.output,\n          config,\n          // Hint: If there is more than one typed result, we use a general\n          // union issue with subissues because the issues could contradict\n          // each other.\n          typedResults.length === 1 ? firstResult.issues : schemaIssue(this, union, input, config, {\n            reason: \"union\",\n            issues: subissues(typedResults)\n          }).issues\n        );\n      }\n      if (untypedResults?.length === 1) {\n        return untypedResults[0];\n      }\n      return schemaIssue(this, union, input, config, {\n        issues: subissues(untypedResults)\n      });\n    }\n  };\n}\n\n// src/schemas/union/unionAsync.ts\nfunction unionAsync(options, arg2, arg3) {\n  const [message, pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"union\",\n    expects: [...new Set(options.map((option) => option.expects))].join(\" | \"),\n    async: true,\n    options,\n    message,\n    pipe,\n    async _parse(input, config) {\n      let validResult;\n      let untypedResults;\n      let typedResults;\n      for (const schema of this.options) {\n        const result = await schema._parse(input, config);\n        if (result.typed) {\n          if (!result.issues) {\n            validResult = result;\n            break;\n          } else {\n            typedResults ? typedResults.push(result) : typedResults = [result];\n          }\n        } else {\n          untypedResults ? untypedResults.push(result) : untypedResults = [result];\n        }\n      }\n      if (validResult) {\n        return pipeResultAsync(this, validResult.output, config);\n      }\n      if (typedResults?.length) {\n        const firstResult = typedResults[0];\n        return pipeResultAsync(\n          this,\n          firstResult.output,\n          config,\n          // Hint: If there is more than one typed result, we use a general\n          // union issue with subissues because the issues could contradict\n          // each other.\n          typedResults.length === 1 ? firstResult.issues : schemaIssue(this, unionAsync, input, config, {\n            reason: \"union\",\n            issues: subissues(typedResults)\n          }).issues\n        );\n      }\n      if (untypedResults?.length === 1) {\n        return untypedResults[0];\n      }\n      return schemaIssue(this, unionAsync, input, config, {\n        issues: subissues(untypedResults)\n      });\n    }\n  };\n}\n\n// src/schemas/unknown/unknown.ts\nfunction unknown(pipe) {\n  return {\n    type: \"unknown\",\n    expects: \"unknown\",\n    async: false,\n    pipe,\n    _parse(input, config) {\n      return pipeResult(this, input, config);\n    }\n  };\n}\n\n// src/schemas/unknown/unknownAsync.ts\nfunction unknownAsync(pipe) {\n  return {\n    type: \"unknown\",\n    expects: \"unknown\",\n    async: true,\n    pipe,\n    async _parse(input, config) {\n      return pipeResultAsync(this, input, config);\n    }\n  };\n}\n\n// src/schemas/variant/variant.ts\nfunction variant(key, options, arg3, arg4) {\n  const [message, pipe] = defaultArgs(arg3, arg4);\n  let cachedExpectedKey;\n  return {\n    type: \"variant\",\n    expects: \"Object\",\n    async: false,\n    key,\n    options,\n    message,\n    pipe,\n    _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        if (this.key in input || !cachedExpectedKey) {\n          let expectedKey;\n          let variantResult;\n          const parseOptions = (options2) => {\n            for (const schema of options2) {\n              if (schema.type === \"object\") {\n                const keySchema = schema.entries[this.key];\n                const keyResult = keySchema._parse(\n                  input[this.key],\n                  config\n                );\n                if (!cachedExpectedKey) {\n                  expectedKey ? expectedKey.push(keySchema.expects) : expectedKey = [keySchema.expects];\n                }\n                if (!keyResult.issues) {\n                  const dataResult = schema._parse(input, config);\n                  if (!dataResult.issues) {\n                    variantResult = dataResult;\n                    break;\n                  }\n                  if (!variantResult || !variantResult.typed && dataResult.typed) {\n                    variantResult = dataResult;\n                  }\n                }\n              } else if (schema.type === \"variant\") {\n                parseOptions(schema.options);\n                if (variantResult && !variantResult.issues) {\n                  break;\n                }\n              }\n            }\n          };\n          parseOptions(this.options);\n          cachedExpectedKey = cachedExpectedKey || [...new Set(expectedKey)].join(\" | \");\n          if (variantResult) {\n            if (variantResult.typed) {\n              return pipeResult(\n                this,\n                variantResult.output,\n                config,\n                variantResult.issues\n              );\n            }\n            return variantResult;\n          }\n        }\n        const value2 = input[this.key];\n        return schemaIssue(this, variant, value2, config, {\n          expected: cachedExpectedKey,\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: this.key,\n              value: value2\n            }\n          ]\n        });\n      }\n      return schemaIssue(this, variant, input, config);\n    }\n  };\n}\n\n// src/schemas/variant/variantAsync.ts\nfunction variantAsync(key, options, arg3, arg4) {\n  const [message, pipe] = defaultArgs(arg3, arg4);\n  let cachedExpectedKey;\n  return {\n    type: \"variant\",\n    expects: \"Object\",\n    async: true,\n    key,\n    options,\n    message,\n    pipe,\n    async _parse(input, config) {\n      if (input && typeof input === \"object\") {\n        if (this.key in input || !cachedExpectedKey) {\n          let expectedKey;\n          let variantResult;\n          const parseOptions = async (options2) => {\n            for (const schema of options2) {\n              if (schema.type === \"object\") {\n                const keySchema = schema.entries[this.key];\n                const keyResult = await keySchema._parse(\n                  input[this.key],\n                  config\n                );\n                if (!cachedExpectedKey) {\n                  expectedKey ? expectedKey.push(keySchema.expects) : expectedKey = [keySchema.expects];\n                }\n                if (!keyResult.issues) {\n                  const dataResult = await schema._parse(input, config);\n                  if (!dataResult.issues) {\n                    variantResult = dataResult;\n                    break;\n                  }\n                  if (!variantResult || !variantResult.typed && dataResult.typed) {\n                    variantResult = dataResult;\n                  }\n                }\n              } else if (schema.type === \"variant\") {\n                await parseOptions(schema.options);\n                if (variantResult && !variantResult.issues) {\n                  break;\n                }\n              }\n            }\n          };\n          await parseOptions(this.options);\n          cachedExpectedKey = cachedExpectedKey || [...new Set(expectedKey)].join(\" | \");\n          if (variantResult) {\n            if (variantResult.typed) {\n              return pipeResultAsync(\n                this,\n                variantResult.output,\n                config,\n                variantResult.issues\n              );\n            }\n            return variantResult;\n          }\n        }\n        const value2 = input[this.key];\n        return schemaIssue(this, variantAsync, value2, config, {\n          expected: cachedExpectedKey,\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: this.key,\n              value: value2\n            }\n          ]\n        });\n      }\n      return schemaIssue(this, variantAsync, input, config);\n    }\n  };\n}\n\n// src/schemas/void/void.ts\nfunction void_(message) {\n  return {\n    type: \"void\",\n    expects: \"void\",\n    async: false,\n    message,\n    _parse(input, config) {\n      if (input === void 0) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, void_, input, config);\n    }\n  };\n}\n\n// src/schemas/void/voidAsync.ts\nfunction voidAsync(message) {\n  return {\n    type: \"void\",\n    expects: \"void\",\n    async: true,\n    message,\n    async _parse(input, config) {\n      if (input === void 0) {\n        return schemaResult(true, input);\n      }\n      return schemaIssue(this, voidAsync, input, config);\n    }\n  };\n}\n\n// src/methods/keyof/keyof.ts\nfunction keyof(schema) {\n  return picklist(\n    Object.keys(schema.entries)\n  );\n}\n\n// src/methods/merge/merge.ts\nfunction merge(schemas, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return object(\n    schemas.reduce(\n      (entries, schema) => ({ ...entries, ...schema.entries }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/merge/mergeAsync.ts\nfunction mergeAsync(schemas, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return objectAsync(\n    schemas.reduce(\n      (entries, schema) => ({ ...entries, ...schema.entries }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/omit/omit.ts\nfunction omit(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? entries : { ...entries, [key]: schema2 },\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/omit/omitAsync.ts\nfunction omitAsync(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? entries : { ...entries, [key]: schema2 },\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/parse/parse.ts\nfunction parse(schema, input, config) {\n  const result = schema._parse(input, getGlobalConfig(config));\n  if (result.issues) {\n    throw new ValiError(result.issues);\n  }\n  return result.output;\n}\n\n// src/methods/parse/parseAsync.ts\nasync function parseAsync(schema, input, config) {\n  const result = await schema._parse(input, getGlobalConfig(config));\n  if (result.issues) {\n    throw new ValiError(result.issues);\n  }\n  return result.output;\n}\n\n// src/methods/partial/partial.ts\nfunction partial(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: optional(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/partial/partialAsync.ts\nfunction partialAsync(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: optionalAsync(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/pick/pick.ts\nfunction pick(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? { ...entries, [key]: schema2 } : entries,\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/pick/pickAsync.ts\nfunction pickAsync(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? { ...entries, [key]: schema2 } : entries,\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/required/required.ts\nfunction required(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: nonOptional(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/required/requiredAsync.ts\nfunction requiredAsync(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: nonOptionalAsync(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/safeParse/safeParse.ts\nfunction safeParse(schema, input, config) {\n  const result = schema._parse(input, getGlobalConfig(config));\n  return {\n    typed: result.typed,\n    success: !result.issues,\n    output: result.output,\n    issues: result.issues\n  };\n}\n\n// src/methods/safeParse/safeParseAsync.ts\nasync function safeParseAsync(schema, input, config) {\n  const result = await schema._parse(input, getGlobalConfig(config));\n  return {\n    typed: result.typed,\n    success: !result.issues,\n    output: result.output,\n    issues: result.issues\n  };\n}\n\n// src/methods/transform/transform.ts\nfunction transform(schema, action, arg1) {\n  return {\n    ...schema,\n    _parse(input, config) {\n      const result = schema._parse(input, config);\n      if (result.issues) {\n        result.typed = false;\n      } else {\n        result.output = action(result.output, { issues: result.issues });\n        if (arg1) {\n          if (Array.isArray(arg1)) {\n            return pipeResult(\n              { type: typeof result.output, pipe: arg1 },\n              result.output,\n              config\n            );\n          }\n          return arg1._parse(result.output, config);\n        }\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/transform/transformAsync.ts\nfunction transformAsync(schema, action, arg1) {\n  return {\n    ...schema,\n    async: true,\n    async _parse(input, config) {\n      const result = await schema._parse(input, config);\n      if (result.issues) {\n        result.typed = false;\n      } else {\n        result.output = await action(result.output, { issues: result.issues });\n        if (arg1) {\n          if (Array.isArray(arg1)) {\n            return pipeResultAsync(\n              { type: typeof result.output, pipe: arg1 },\n              result.output,\n              config\n            );\n          }\n          return arg1._parse(result.output, config);\n        }\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/unwrap/unwrap.ts\nfunction unwrap(schema) {\n  return schema.wrapped;\n}\n\n// src/regex.ts\nvar BIC_REGEX = /^[A-Z]{6}(?!00)[A-Z\\d]{2}(?:[A-Z\\d]{3})?$/u;\nvar CUID2_REGEX = /^[a-z][\\da-z]*$/u;\nvar DECIMAL_REGEX = /^\\d+$/u;\nvar EMAIL_REGEX = /^[\\w+-]+(?:\\.[\\w+-]+)*@[\\da-z]+(?:[.-][\\da-z]+)*\\.[a-z]{2,}$/iu;\nvar EMOJI_REGEX = /^[\\p{Extended_Pictographic}\\p{Emoji_Component}]+$/u;\nvar HEXADECIMAL_REGEX = /^(0h|0x)?[\\da-f]+$/iu;\nvar HEX_COLOR_REGEX = /^#([\\da-f]{3}|[\\da-f]{4}|[\\da-f]{6}|[\\da-f]{8})$/iu;\nvar IMEI_REGEX = /^\\d{2}(?:[ /|-]?\\d{6}){2}[ /|-]?\\d$/u;\nvar IPV4_REGEX = (\n  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive\n  /^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$/u\n);\nvar IPV6_REGEX = /^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar ISO_DATE_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])$/u;\nvar ISO_DATE_TIME_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_REGEX = /^(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_SECOND_REGEX = /^(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}$/u;\nvar ISO_TIMESTAMP_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}(?:\\.\\d{1,9})?Z$/u;\nvar ISO_WEEK_REGEX = /^\\d{4}-W(?:0[1-9]|[1-4]\\d|5[0-3])$/u;\nvar MAC48_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$/iu;\nvar MAC64_REGEX = /^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar OCTAL_REGEX = /^(0o)?[0-7]+$/iu;\nvar ULID_REGEX = /^[\\da-hjkmnp-tv-z]{26}$/iu;\nvar UUID_REGEX = /^[\\da-f]{8}(?:-[\\da-f]{4}){3}-[\\da-f]{12}$/iu;\n\n// src/transformations/toCustom/toCustom.ts\nfunction toCustom(action) {\n  return {\n    type: \"to_custom\",\n    async: false,\n    _parse(input) {\n      return actionOutput(action(input));\n    }\n  };\n}\n\n// src/transformations/toCustom/toCustomAsync.ts\nfunction toCustomAsync(action) {\n  return {\n    type: \"to_custom\",\n    async: true,\n    async _parse(input) {\n      return actionOutput(await action(input));\n    }\n  };\n}\n\n// src/transformations/toLowerCase/toLowerCase.ts\nfunction toLowerCase() {\n  return {\n    type: \"to_lower_case\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.toLocaleLowerCase());\n    }\n  };\n}\n\n// src/transformations/toMaxValue/toMaxValue.ts\nfunction toMaxValue(requirement) {\n  return {\n    type: \"to_max_value\",\n    async: false,\n    requirement,\n    _parse(input) {\n      return actionOutput(input > this.requirement ? this.requirement : input);\n    }\n  };\n}\n\n// src/transformations/toMinValue/toMinValue.ts\nfunction toMinValue(requirement) {\n  return {\n    type: \"to_min_value\",\n    async: false,\n    requirement,\n    _parse(input) {\n      return actionOutput(input < this.requirement ? this.requirement : input);\n    }\n  };\n}\n\n// src/transformations/toTrimmed/toTrimmed.ts\nfunction toTrimmed() {\n  return {\n    type: \"to_trimmed\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.trim());\n    }\n  };\n}\n\n// src/transformations/toTrimmedEnd/toTrimmedEnd.ts\nfunction toTrimmedEnd() {\n  return {\n    type: \"to_trimmed_end\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.trimEnd());\n    }\n  };\n}\n\n// src/transformations/toTrimmedStart/toTrimmedStart.ts\nfunction toTrimmedStart() {\n  return {\n    type: \"to_trimmed_start\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.trimStart());\n    }\n  };\n}\n\n// src/transformations/toUpperCase/toUpperCase.ts\nfunction toUpperCase() {\n  return {\n    type: \"to_upper_case\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.toUpperCase());\n    }\n  };\n}\n\n// src/validations/bic/bic.ts\nfunction bic(message) {\n  return {\n    type: \"bic\",\n    expects: null,\n    async: false,\n    message,\n    requirement: BIC_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, bic, input, \"BIC\");\n    }\n  };\n}\n\n// src/validations/bytes/bytes.ts\nfunction bytes(requirement, message) {\n  return {\n    type: \"bytes\",\n    expects: `${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      const length2 = new TextEncoder().encode(input).length;\n      if (length2 === this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, bytes, input, \"bytes\", `${length2}`);\n    }\n  };\n}\n\n// src/validations/creditCard/creditCard.ts\nvar SANITIZE_REGEX = /[- ]+/gu;\nvar PROVIDER_REGEX_LIST = [\n  // American Express\n  /^3[47]\\d{13}$/u,\n  // Diners Club\n  /^3(?:0[0-5]|[68]\\d)\\d{11}$/u,\n  // Discover\n  /^6(?:011|5\\d{2})\\d{12,15}$/u,\n  // JCB\n  /^(?:2131|1800|35\\d{3})\\d{11}$/u,\n  // Mastercard\n  /^5[1-5]\\d{2}|(222\\d|22[3-9]\\d|2[3-6]\\d{2}|27[01]\\d|2720)\\d{12}$/u,\n  // UnionPay\n  /^(6[27]\\d{14}|81\\d{14,17})$/u,\n  // Visa\n  /^4\\d{12}(?:\\d{3,6})?$/u\n];\nfunction creditCard(message) {\n  return {\n    type: \"credit_card\",\n    expects: null,\n    async: false,\n    message,\n    requirement: (input) => {\n      const sanitized = input.replace(SANITIZE_REGEX, \"\");\n      return PROVIDER_REGEX_LIST.some((regex2) => regex2.test(sanitized)) && isLuhnAlgo(sanitized);\n    },\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, creditCard, input, \"credit card\");\n    }\n  };\n}\n\n// src/validations/cuid2/cuid2.ts\nfunction cuid2(message) {\n  return {\n    type: \"cuid2\",\n    expects: null,\n    async: false,\n    message,\n    requirement: CUID2_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, cuid2, input, \"Cuid2\");\n    }\n  };\n}\n\n// src/validations/custom/custom.ts\nfunction custom(requirement, message) {\n  return {\n    type: \"custom\",\n    expects: null,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, custom, input, \"input\");\n    }\n  };\n}\n\n// src/validations/custom/customAsync.ts\nfunction customAsync(requirement, message) {\n  return {\n    type: \"custom\",\n    expects: null,\n    async: true,\n    message,\n    requirement,\n    async _parse(input) {\n      if (await this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, customAsync, input, \"input\");\n    }\n  };\n}\n\n// src/validations/decimal/decimal.ts\nfunction decimal(message) {\n  return {\n    type: \"decimal\",\n    expects: null,\n    async: false,\n    message,\n    requirement: DECIMAL_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, decimal, input, \"decimal\");\n    }\n  };\n}\n\n// src/validations/email/email.ts\nfunction email(message) {\n  return {\n    type: \"email\",\n    expects: null,\n    async: false,\n    message,\n    requirement: EMAIL_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, email, input, \"email\");\n    }\n  };\n}\n\n// src/validations/emoji/emoji.ts\nfunction emoji(message) {\n  return {\n    type: \"emoji\",\n    expects: null,\n    async: false,\n    message,\n    requirement: EMOJI_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, emoji, input, \"emoji\");\n    }\n  };\n}\n\n// src/validations/endsWith/endsWith.ts\nfunction endsWith(requirement, message) {\n  return {\n    type: \"ends_with\",\n    expects: `\"${requirement}\"`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.endsWith(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        endsWith,\n        input,\n        \"end\",\n        `\"${input.slice(-this.requirement.length)}\"`\n      );\n    }\n  };\n}\n\n// src/validations/every/every.ts\nfunction every(requirement, message) {\n  return {\n    type: \"every\",\n    expects: null,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.every(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, every, input, \"input\");\n    }\n  };\n}\n\n// src/validations/excludes/excludes.ts\nfunction excludes(requirement, message) {\n  const received = stringify(requirement);\n  return {\n    type: \"excludes\",\n    expects: `!${received}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (!input.includes(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, excludes, input, \"content\", received);\n    }\n  };\n}\n\n// src/validations/finite/finite.ts\nfunction finite(message) {\n  return {\n    type: \"finite\",\n    expects: null,\n    async: false,\n    message,\n    requirement: Number.isFinite,\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, finite, input, \"finite\");\n    }\n  };\n}\n\n// src/validations/hash/hash.ts\nvar HASH_LENGTHS = {\n  md4: 32,\n  md5: 32,\n  sha1: 40,\n  sha256: 64,\n  sha384: 96,\n  sha512: 128,\n  ripemd128: 32,\n  ripemd160: 40,\n  tiger128: 32,\n  tiger160: 40,\n  tiger192: 48,\n  crc32: 8,\n  crc32b: 8,\n  adler32: 8\n};\nfunction hash(types, message) {\n  return {\n    type: \"hash\",\n    expects: null,\n    async: false,\n    message,\n    requirement: RegExp(\n      types.map((type) => `^[a-f0-9]{${HASH_LENGTHS[type]}}$`).join(\"|\"),\n      \"iu\"\n    ),\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, hash, input, \"hash\");\n    }\n  };\n}\n\n// src/validations/hexadecimal/hexadecimal.ts\nfunction hexadecimal(message) {\n  return {\n    type: \"hexadecimal\",\n    expects: null,\n    async: false,\n    message,\n    requirement: HEXADECIMAL_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, hexadecimal, input, \"hexadecimal\");\n    }\n  };\n}\n\n// src/validations/hexColor/hexColor.ts\nfunction hexColor(message) {\n  return {\n    type: \"hex_color\",\n    expects: null,\n    async: false,\n    message,\n    requirement: HEX_COLOR_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, hexColor, input, \"hex color\");\n    }\n  };\n}\n\n// src/validations/imei/imei.ts\nfunction imei(message) {\n  return {\n    type: \"imei\",\n    expects: null,\n    async: false,\n    message,\n    requirement: [IMEI_REGEX, isLuhnAlgo],\n    _parse(input) {\n      if (this.requirement[0].test(input) && this.requirement[1](input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, imei, input, \"IMEI\");\n    }\n  };\n}\n\n// src/validations/includes/includes.ts\nfunction includes(requirement, message) {\n  const expects = stringify(requirement);\n  return {\n    type: \"includes\",\n    expects,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.includes(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, includes, input, \"content\", `!${expects}`);\n    }\n  };\n}\n\n// src/validations/integer/integer.ts\nfunction integer(message) {\n  return {\n    type: \"integer\",\n    expects: null,\n    async: false,\n    message,\n    requirement: Number.isInteger,\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, integer, input, \"integer\");\n    }\n  };\n}\n\n// src/validations/ip/ip.ts\nfunction ip(message) {\n  return {\n    type: \"ip\",\n    expects: null,\n    async: false,\n    message,\n    // TODO: It is strange that we have an OR relationship between requirements\n    requirement: [IPV4_REGEX, IPV6_REGEX],\n    _parse(input) {\n      if (this.requirement[0].test(input) || this.requirement[1].test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, ip, input, \"IP\");\n    }\n  };\n}\n\n// src/validations/ipv4/ipv4.ts\nfunction ipv4(message) {\n  return {\n    type: \"ipv4\",\n    expects: null,\n    async: false,\n    message,\n    requirement: IPV4_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, ipv4, input, \"IPv4\");\n    }\n  };\n}\n\n// src/validations/ipv6/ipv6.ts\nfunction ipv6(message) {\n  return {\n    type: \"ipv6\",\n    expects: null,\n    async: false,\n    message,\n    requirement: IPV6_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, ipv6, input, \"IPv6\");\n    }\n  };\n}\n\n// src/validations/isoDate/isoDate.ts\nfunction isoDate(message) {\n  return {\n    type: \"iso_date\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_DATE_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoDate, input, \"date\");\n    }\n  };\n}\n\n// src/validations/isoDateTime/isoDateTime.ts\nfunction isoDateTime(message) {\n  return {\n    type: \"iso_date_time\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_DATE_TIME_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoDateTime, input, \"date-time\");\n    }\n  };\n}\n\n// src/validations/isoTime/isoTime.ts\nfunction isoTime(message) {\n  return {\n    type: \"iso_time\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_TIME_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoTime, input, \"time\");\n    }\n  };\n}\n\n// src/validations/isoTimeSecond/isoTimeSecond.ts\nfunction isoTimeSecond(message) {\n  return {\n    type: \"iso_time_second\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_TIME_SECOND_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoTimeSecond, input, \"time second\");\n    }\n  };\n}\n\n// src/validations/isoTimestamp/isoTimestamp.ts\nfunction isoTimestamp(message) {\n  return {\n    type: \"iso_timestamp\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_TIMESTAMP_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoTimestamp, input, \"timestamp\");\n    }\n  };\n}\n\n// src/validations/isoWeek/isoWeek.ts\nfunction isoWeek(message) {\n  return {\n    type: \"iso_week\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ISO_WEEK_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, isoWeek, input, \"week\");\n    }\n  };\n}\n\n// src/validations/length/length.ts\nfunction length(requirement, message) {\n  return {\n    type: \"length\",\n    expects: `${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.length === this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, length, input, \"length\", `${input.length}`);\n    }\n  };\n}\n\n// src/validations/mac/mac.ts\nfunction mac(message) {\n  return {\n    type: \"mac\",\n    expects: null,\n    async: false,\n    message,\n    // TODO: It is strange that we have an OR relationship between requirements\n    requirement: [MAC48_REGEX, MAC64_REGEX],\n    _parse(input) {\n      if (this.requirement[0].test(input) || this.requirement[1].test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, mac, input, \"MAC\");\n    }\n  };\n}\n\n// src/validations/mac48/mac48.ts\nfunction mac48(message) {\n  return {\n    type: \"mac48\",\n    expects: null,\n    async: false,\n    message,\n    requirement: MAC48_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, mac48, input, \"48-bit MAC\");\n    }\n  };\n}\n\n// src/validations/mac64/mac64.ts\nfunction mac64(message) {\n  return {\n    type: \"mac64\",\n    expects: null,\n    async: false,\n    message,\n    requirement: MAC64_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, mac64, input, \"64-bit MAC\");\n    }\n  };\n}\n\n// src/validations/maxBytes/maxBytes.ts\nfunction maxBytes(requirement, message) {\n  return {\n    type: \"max_bytes\",\n    expects: `<=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      const length2 = new TextEncoder().encode(input).length;\n      if (length2 <= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, maxBytes, input, \"bytes\", `${length2}`);\n    }\n  };\n}\n\n// src/validations/maxLength/maxLength.ts\nfunction maxLength(requirement, message) {\n  return {\n    type: \"max_length\",\n    expects: `<=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.length <= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, maxLength, input, \"length\", `${input.length}`);\n    }\n  };\n}\n\n// src/validations/maxSize/maxSize.ts\nfunction maxSize(requirement, message) {\n  return {\n    type: \"max_size\",\n    expects: `<=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.size <= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, maxSize, input, \"size\", `${input.size}`);\n    }\n  };\n}\n\n// src/validations/maxValue/maxValue.ts\nfunction maxValue(requirement, message) {\n  return {\n    type: \"max_value\",\n    expects: `<=${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input <= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        maxValue,\n        input,\n        \"value\",\n        input instanceof Date ? input.toJSON() : stringify(input)\n      );\n    }\n  };\n}\n\n// src/validations/minBytes/minBytes.ts\nfunction minBytes(requirement, message) {\n  return {\n    type: \"min_bytes\",\n    expects: `>=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      const length2 = new TextEncoder().encode(input).length;\n      if (length2 >= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, minBytes, input, \"bytes\", `${length2}`);\n    }\n  };\n}\n\n// src/validations/mimeType/mimeType.ts\nfunction mimeType(requirement, message) {\n  return {\n    type: \"mime_type\",\n    expects: requirement.map((option) => `\"${option}\"`).join(\" | \"),\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (this.requirement.includes(input.type)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, mimeType, input, \"MIME type\");\n    }\n  };\n}\n\n// src/validations/minLength/minLength.ts\nfunction minLength(requirement, message) {\n  return {\n    type: \"min_length\",\n    expects: `>=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.length >= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, minLength, input, \"length\", `${input.length}`);\n    }\n  };\n}\n\n// src/validations/minSize/minSize.ts\nfunction minSize(requirement, message) {\n  return {\n    type: \"min_size\",\n    expects: `>=${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.size >= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, minSize, input, \"size\", `${input.size}`);\n    }\n  };\n}\n\n// src/validations/minValue/minValue.ts\nfunction minValue(requirement, message) {\n  return {\n    type: \"min_value\",\n    expects: `>=${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input >= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        minValue,\n        input,\n        \"value\",\n        input instanceof Date ? input.toJSON() : stringify(input)\n      );\n    }\n  };\n}\n\n// src/validations/multipleOf/multipleOf.ts\nfunction multipleOf(requirement, message) {\n  return {\n    type: \"multiple_of\",\n    expects: `%${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input % this.requirement === 0) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, multipleOf, input, \"multiple\", `${input}`);\n    }\n  };\n}\n\n// src/validations/notBytes/notBytes.ts\nfunction notBytes(requirement, message) {\n  return {\n    type: \"not_bytes\",\n    expects: `!${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      const length2 = new TextEncoder().encode(input).length;\n      if (length2 !== this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, notBytes, input, \"bytes\", `${length2}`);\n    }\n  };\n}\n\n// src/validations/notLength/notLength.ts\nfunction notLength(requirement, message) {\n  return {\n    type: \"not_length\",\n    expects: `!${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.length !== this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, notLength, input, \"length\", `${input.length}`);\n    }\n  };\n}\n\n// src/validations/notSize/notSize.ts\nfunction notSize(requirement, message) {\n  return {\n    type: \"not_size\",\n    expects: `!${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.size !== this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, notSize, input, \"size\", `${input.size}`);\n    }\n  };\n}\n\n// src/validations/notValue/notValue.ts\nfunction notValue(requirement, message) {\n  return {\n    type: \"not_value\",\n    expects: `!${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input < this.requirement || input > this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        notValue,\n        input,\n        \"value\",\n        input instanceof Date ? input.toJSON() : stringify(input)\n      );\n    }\n  };\n}\n\n// src/validations/octal/octal.ts\nfunction octal(message) {\n  return {\n    type: \"octal\",\n    expects: null,\n    async: false,\n    message,\n    requirement: OCTAL_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, octal, input, \"octal\");\n    }\n  };\n}\n\n// src/validations/regex/regex.ts\nfunction regex(requirement, message) {\n  return {\n    type: \"regex\",\n    expects: `${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, regex, input, \"format\");\n    }\n  };\n}\n\n// src/validations/safeInteger/safeInteger.ts\nfunction safeInteger(message) {\n  return {\n    type: \"safe_integer\",\n    expects: null,\n    async: false,\n    message,\n    requirement: Number.isSafeInteger,\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, safeInteger, input, \"safe integer\");\n    }\n  };\n}\n\n// src/validations/size/size.ts\nfunction size(requirement, message) {\n  return {\n    type: \"size\",\n    expects: `${requirement}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.size === this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, size, input, \"size\", `${input.size}`);\n    }\n  };\n}\n\n// src/validations/some/some.ts\nfunction some(requirement, message) {\n  return {\n    type: \"some\",\n    expects: null,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.some(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, some, input, \"input\");\n    }\n  };\n}\n\n// src/validations/startsWith/startsWith.ts\nfunction startsWith(requirement, message) {\n  return {\n    type: \"starts_with\",\n    expects: `\"${requirement}\"`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input.startsWith(this.requirement)) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        startsWith,\n        input,\n        \"start\",\n        `\"${input.slice(0, this.requirement.length)}\"`\n      );\n    }\n  };\n}\n\n// src/validations/ulid/ulid.ts\nfunction ulid(message) {\n  return {\n    type: \"ulid\",\n    expects: null,\n    async: false,\n    message,\n    requirement: ULID_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, ulid, input, \"ULID\");\n    }\n  };\n}\n\n// src/validations/url/url.ts\nfunction url(message) {\n  return {\n    type: \"url\",\n    expects: null,\n    async: false,\n    message,\n    requirement(input) {\n      try {\n        new URL(input);\n        return true;\n      } catch {\n        return false;\n      }\n    },\n    _parse(input) {\n      if (this.requirement(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, url, input, \"URL\");\n    }\n  };\n}\n\n// src/validations/uuid/uuid.ts\nfunction uuid(message) {\n  return {\n    type: \"uuid\",\n    expects: null,\n    async: false,\n    message,\n    requirement: UUID_REGEX,\n    _parse(input) {\n      if (this.requirement.test(input)) {\n        return actionOutput(input);\n      }\n      return actionIssue(this, uuid, input, \"UUID\");\n    }\n  };\n}\n\n// src/validations/value/value.ts\nfunction value(requirement, message) {\n  return {\n    type: \"value\",\n    expects: `${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      if (input <= this.requirement && input >= this.requirement) {\n        return actionOutput(input);\n      }\n      return actionIssue(\n        this,\n        value,\n        input,\n        \"value\",\n        input instanceof Date ? input.toJSON() : stringify(input)\n      );\n    }\n  };\n}\nexport {\n  BIC_REGEX,\n  BrandSymbol,\n  CUID2_REGEX,\n  DECIMAL_REGEX,\n  EMAIL_REGEX,\n  EMOJI_REGEX,\n  HEXADECIMAL_REGEX,\n  HEX_COLOR_REGEX,\n  IMEI_REGEX,\n  IPV4_REGEX,\n  IPV6_REGEX,\n  ISO_DATE_REGEX,\n  ISO_DATE_TIME_REGEX,\n  ISO_TIMESTAMP_REGEX,\n  ISO_TIME_REGEX,\n  ISO_TIME_SECOND_REGEX,\n  ISO_WEEK_REGEX,\n  MAC48_REGEX,\n  MAC64_REGEX,\n  OCTAL_REGEX,\n  ULID_REGEX,\n  UUID_REGEX,\n  ValiError,\n  actionIssue,\n  actionOutput,\n  any,\n  anyAsync,\n  array,\n  arrayAsync,\n  bic,\n  bigint,\n  bigintAsync,\n  blob,\n  blobAsync,\n  boolean,\n  booleanAsync,\n  brand,\n  bytes,\n  coerce,\n  coerceAsync,\n  creditCard,\n  cuid2,\n  custom,\n  customAsync,\n  date,\n  dateAsync,\n  decimal,\n  defaultArgs,\n  deleteGlobalConfig,\n  deleteGlobalMessage,\n  deleteSchemaMessage,\n  deleteSpecificMessage,\n  email,\n  emoji,\n  endsWith,\n  enumAsync,\n  enum_,\n  every,\n  excludes,\n  fallback,\n  fallbackAsync,\n  finite,\n  flatten,\n  forward,\n  forwardAsync,\n  getDefault,\n  getDefaultAsync,\n  getDefaults,\n  getDefaultsAsync,\n  getFallback,\n  getFallbackAsync,\n  getFallbacks,\n  getFallbacksAsync,\n  getGlobalConfig,\n  getGlobalMessage,\n  getSchemaMessage,\n  getSpecificMessage,\n  hash,\n  hexColor,\n  hexadecimal,\n  i18n,\n  imei,\n  includes,\n  instance,\n  instanceAsync,\n  integer,\n  intersect,\n  intersectAsync,\n  ip,\n  ipv4,\n  ipv6,\n  is,\n  isLuhnAlgo,\n  isOfType,\n  isoDate,\n  isoDateTime,\n  isoTime,\n  isoTimeSecond,\n  isoTimestamp,\n  isoWeek,\n  keyof,\n  lazy,\n  lazyAsync,\n  length,\n  literal,\n  literalAsync,\n  mac,\n  mac48,\n  mac64,\n  map,\n  mapAsync,\n  maxBytes,\n  maxLength,\n  maxSize,\n  maxValue,\n  merge,\n  mergeAsync,\n  mimeType,\n  minBytes,\n  minLength,\n  minSize,\n  minValue,\n  multipleOf,\n  nan,\n  nanAsync,\n  never,\n  neverAsync,\n  nonNullable,\n  nonNullableAsync,\n  nonNullish,\n  nonNullishAsync,\n  nonOptional,\n  nonOptionalAsync,\n  notBytes,\n  notLength,\n  notSize,\n  notValue,\n  nullAsync,\n  null_,\n  nullable,\n  nullableAsync,\n  nullish,\n  nullishAsync,\n  number,\n  numberAsync,\n  object,\n  objectAsync,\n  octal,\n  omit,\n  omitAsync,\n  optional,\n  optionalAsync,\n  parse,\n  parseAsync,\n  partial,\n  partialAsync,\n  pick,\n  pickAsync,\n  picklist,\n  picklistAsync,\n  pipeResult,\n  pipeResultAsync,\n  record,\n  recordAsync,\n  regex,\n  required,\n  requiredAsync,\n  restAndDefaultArgs,\n  safeInteger,\n  safeParse,\n  safeParseAsync,\n  schemaIssue,\n  schemaResult,\n  set,\n  setAsync,\n  setGlobalConfig,\n  setGlobalMessage,\n  setSchemaMessage,\n  setSpecificMessage,\n  size,\n  some,\n  special,\n  specialAsync,\n  startsWith,\n  string,\n  stringAsync,\n  stringify,\n  symbol,\n  symbolAsync,\n  toCustom,\n  toCustomAsync,\n  toLowerCase,\n  toMaxValue,\n  toMinValue,\n  toTrimmed,\n  toTrimmedEnd,\n  toTrimmedStart,\n  toUpperCase,\n  transform,\n  transformAsync,\n  tuple,\n  tupleAsync,\n  ulid,\n  undefinedAsync,\n  undefined_,\n  union,\n  unionAsync,\n  unknown,\n  unknownAsync,\n  unwrap,\n  url,\n  uuid,\n  value,\n  variant,\n  variantAsync,\n  voidAsync,\n  void_\n};\n","import{getPublishedId as t,studioPath as e}from\"@sanity/client/csm\";import{string as r,minLength as o,optional as s,object as n,record as a,unknown as c,is as i,safeParse as u,parse as p}from\"valibot\";function f(t){return\"object\"==typeof t&&null!==t&&!Array.isArray(t)}function l(t){return null!==t&&Array.isArray(t)}function d(t){let e=\"\";for(const r of t)\"string\"!=typeof r?\"number\"!=typeof r?l(r)?(e&&(e+=\":\"),e+=`${r.join(\",\")}}`):r._key&&(e&&(e+=\":\"),e+=`${r._key}`):(e&&(e+=\":\"),e+=`${r}`):(e&&(e+=\".\"),e+=r);return e}const b=/^([A-Za-z]+):([0-9]+)$/,y=/^([A-Za-z]+):([0-9]+),([0-9]+)$/,m=/^([A-Za-z]+):([a-z0-9]+)$/;function h(t){const e=[];for(const r of t.split(\".\")){const t=b.exec(r);if(t){e.push(t[1],Number(t[2]));continue}const o=y.exec(r);if(o){e.push(o[1],[Number(o[2]),Number(o[3])]);continue}const s=m.exec(r);s?e.push(s[1],{_key:s[2]}):e.push(r)}return e}const k=\"drafts.\",j=r([o(1)]),w=s(j),A=n({baseUrl:j,dataset:w,id:j,path:j,projectId:w,tool:w,type:w,workspace:w,isDraft:s(r())}),U=n({origin:j,href:j,data:s(a(r(),c()))});function $(t){return i(A,t)}function g(t){return i(U,t)}function x(r){const{id:o,path:s,baseUrl:n,tool:a,workspace:c,type:i}=r;return $(r)?[[\"id\",t(o)],[\"type\",i],[\"path\",d(e.fromString(s))],[\"base\",encodeURIComponent(n)],[\"workspace\",c],[\"tool\",a],[\"isDraft\",o.startsWith(k)]].filter((([,t])=>!!t)).map((t=>{const[e,r]=t;return!0===r?e:t.join(\"=\")})).join(\";\"):void 0}function z(t){const r=t.split(\";\").reduce(((t,r)=>{const[o,s]=r.split(\"=\");if(!o||r.includes(\"=\")&&!s)return t;switch(o){case\"id\":t.id=s;break;case\"type\":t.type=s;break;case\"path\":t.path=e.toString(h(s));break;case\"base\":t.baseUrl=decodeURIComponent(s);break;case\"tool\":t.tool=s;break;case\"workspace\":t.workspace=s;break;case\"projectId\":t.projectId=s;break;case\"dataset\":t.dataset=s;break;case\"isDraft\":t.isDraft=\"\"}return t}),{});if($(r))return r}function D(t){const e=u(A,t);if(e.success)return e.output;const r=u(U,t);if(r.success)try{const t=new URL(r.output.href,typeof document>\"u\"?\"https://example.com\":location.origin);return t.searchParams.size>0?p(A,Object.fromEntries(t.searchParams.entries())):r.output}catch(t){return console.error(\"Failed to parse sanity node\",t),r.output}}function I(t){if(\"object\"==typeof t&&null!==t)return D(t);try{return D(JSON.parse(t))}catch{return z(t)}}export{k as D,l as a,$ as b,g as c,z as d,x as e,I as f,f as i,d as p,h as u};//# sourceMappingURL=transformSanityNodeData.js.map\n","import{studioPath as t}from\"@sanity/client/csm\";import{e as r}from\"./_chunks-es/transformSanityNodeData.js\";import{p as e,u as n}from\"./_chunks-es/transformSanityNodeData.js\";function o(e){function n(r){return r?\"string\"==typeof r?t.fromString(r):r:[]}function a(e){if(!e.id)throw new Error(\"`id` is required to create a data attribute\");if(!e.type)throw new Error(\"`type` is required to create a data attribute\");if(!e.path||!e.path.length)throw new Error(\"`path` is required to create a data attribute\");const n={baseUrl:e.baseUrl||\"/\",workspace:e.workspace,tool:e.tool,type:e.type,id:e.id,path:\"string\"==typeof e.path?e.path:t.toString(e.path)};return r(n)}const i=t=>a({...e,path:[...n(e.path),...n(t)]});return i.toString=function(){return a(e)},i.combine=function(t){return o({...e,...t})},i.scope=function(t){return o({...e,path:[...n(e.path),...n(t)]})},i}function a(t,r){return`${t}-${\"string\"==typeof r?r:JSON.stringify(r)}`}const i=typeof window<\"u\"&&/Mac|iPod|iPhone|iPad/.test(window.navigator.platform),s={alt:\"altKey\",ctrl:\"ctrlKey\",mod:i?\"metaKey\":\"ctrlKey\",shift:\"shiftKey\"};function p(t,r){return t.every((t=>s[t]?r[s[t]]:r.key===t.toUpperCase()))}function u(t){return t.key===(i?\"Meta\":\"Ctrl\")}function c(t){return\"Alt\"===t.key}export{o as createDataAttribute,a as getQueryCacheKey,c as isAltKey,p as isHotkey,u as isModKey,e as pathToUrlString,n as urlStringToPath};//# sourceMappingURL=index.js.map\n","export function debounce<F extends (...args: Parameters<F>) => ReturnType<F>>(\n  fn: F,\n  timeout: number,\n): F {\n  let timer: ReturnType<typeof setTimeout>\n  return ((...args: Parameters<F>) => {\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      fn.apply(fn, args)\n    }, timeout)\n  }) as F\n}\n","import {createContext, type CSSProperties} from 'react'\n\nimport type {PanelElement, ResizerElement} from './types'\n\nexport const PanelsContext = createContext<{\n  activeResizer: string | null\n  drag: (id: string, event: MouseEvent) => void\n  getPanelStyle: (id: string) => CSSProperties\n  registerElement: (id: string, panel: PanelElement | ResizerElement) => void\n  startDragging: (id: string, event: MouseEvent) => void\n  stopDragging: () => void\n  unregisterElement: (id: string) => void\n} | null>(null)\n\nPanelsContext.displayName = 'PanelsContext'\n","import {type FunctionComponent, type PropsWithChildren, useContext, useLayoutEffect} from 'react'\nimport {styled} from 'styled-components'\n\nimport {PanelsContext} from './PanelsContext'\n\ninterface PanelProps extends PropsWithChildren {\n  defaultSize?: number | null\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  order?: number\n}\n\nconst Root = styled.div`\n  overflow: hidden;\n  flex-basis: 0;\n  flex-shrink: 1;\n`\n\nexport const Panel: FunctionComponent<PanelProps> = function ({\n  children,\n  defaultSize = null,\n  id,\n  minWidth,\n  maxWidth,\n  order = 0,\n}) {\n  const context = useContext(PanelsContext)\n\n  if (context === null) {\n    throw Error(`Panel components must be rendered within a PanelGroup container`)\n  }\n\n  const {getPanelStyle, registerElement, unregisterElement} = context\n\n  const style = getPanelStyle(id)\n\n  useLayoutEffect(() => {\n    registerElement(id, {\n      id,\n      type: 'panel',\n      defaultSize,\n      maxWidth: maxWidth ?? null,\n      minWidth: minWidth ?? 0,\n      order,\n    })\n\n    return () => {\n      unregisterElement(id)\n    }\n  }, [id, defaultSize, order, maxWidth, minWidth, registerElement, unregisterElement])\n\n  return <Root style={style}>{children}</Root>\n}\n","import {useMemo} from 'react'\n\nimport {debounce} from '../lib/debounce'\nimport type {PanelElement} from './types'\n\nconst itemKey = 'presentation/panels'\n\ntype StoredPanelsState = Record<string, number[]>\n\nconst getStoredItem = () => {\n  // @todo Validate\n  return JSON.parse(localStorage.getItem(itemKey) || '{}') as StoredPanelsState\n}\nconst setStoredItem = (data: StoredPanelsState) => {\n  localStorage.setItem(itemKey, JSON.stringify(data))\n}\n\nconst getKeyForPanels = (panels: PanelElement[]) => {\n  return panels.map((panel) => [panel.id, panel.order].join(':')).join(',')\n}\n\nexport function usePanelsStorage(): {\n  get: (panels: PanelElement[]) => number[] | undefined\n  set: (panels: PanelElement[], widths: number[]) => void\n  setDebounced: (panels: PanelElement[], widths: number[]) => void\n} {\n  return useMemo(() => {\n    const get = (panels: PanelElement[]) => {\n      const stored = getStoredItem()\n      const key = getKeyForPanels(panels)\n      return Array.isArray(stored[key]) && stored[key].some((val) => val === null)\n        ? undefined\n        : stored[key]\n    }\n\n    const set = (panels: PanelElement[], widths: number[]) => {\n      const stored = getStoredItem()\n      const key = getKeyForPanels(panels)\n      const data = {\n        ...stored,\n        [key]: widths,\n      }\n      setStoredItem(data)\n    }\n\n    const setDebounced = debounce(set, 100)\n    return {\n      get,\n      set,\n      setDebounced,\n    }\n  }, [])\n}\n","import type {ElementMap, InitialDragState, PanelElement, PanelsState, ResizerElement} from './types'\n\nfunction getNextWidth(panel: PanelElement, nextWidth: number, containerWidth: number) {\n  const {maxWidth: maxWidthPx, minWidth: minWidthPx} = panel\n  const maxWidth = maxWidthPx == null ? 100 : (maxWidthPx / containerWidth) * 100\n  const minWidth = (minWidthPx / containerWidth) * 100\n  return Math.min(maxWidth, Math.max(minWidth, nextWidth))\n}\n\nexport function getNextWidths(\n  delta: number,\n  containerWidth: number,\n  panelBefore: PanelElement,\n  panelAfter: PanelElement,\n  panelsState: PanelsState,\n  initialDragState: InitialDragState,\n): number[] {\n  const {panels, widths: prevWidths} = panelsState\n  const {widths: initialWidths} = initialDragState\n\n  const widths = initialWidths || prevWidths\n  const nextWidths = [...widths]\n\n  {\n    const pivotPanel = delta < 0 ? panelAfter : panelBefore\n    const index = panels.findIndex((panel) => panel.id === pivotPanel.id)\n    const width = widths[index]\n    const nextWidth = getNextWidth(pivotPanel, width + Math.abs(delta), containerWidth)\n    if (width === nextWidth) {\n      return widths\n    } else {\n      delta = delta < 0 ? width - nextWidth : nextWidth - width\n    }\n  }\n\n  let deltaApplied = 0\n  let pivotPanel = delta < 0 ? panelBefore : panelAfter\n  let index = panels.findIndex((panel) => panel.id === pivotPanel.id)\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const panel = panels[index]\n    const width = widths[index]\n\n    const deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied)\n\n    const nextWidth = getNextWidth(panel, width - deltaRemaining, containerWidth)\n\n    if (width !== nextWidth) {\n      deltaApplied += width - nextWidth\n      nextWidths[index] = nextWidth\n\n      if (\n        deltaApplied.toPrecision(10).localeCompare(Math.abs(delta).toPrecision(10), undefined, {\n          numeric: true,\n        }) >= 0\n      ) {\n        break\n      }\n    }\n\n    if (delta < 0) {\n      if (--index < 0) {\n        break\n      }\n    } else {\n      if (++index >= panels.length) {\n        break\n      }\n    }\n  }\n\n  if (deltaApplied === 0) {\n    return widths\n  }\n\n  pivotPanel = delta < 0 ? panelAfter : panelBefore\n  index = panels.findIndex((panel) => panel.id === pivotPanel.id)\n  nextWidths[index] = widths[index] + deltaApplied\n\n  return nextWidths\n}\n\nexport function getPanelWidth(panels: PanelElement[], id: string, widths: number[]): string {\n  if (panels.length === 1) return '100'\n\n  const index = panels.findIndex((panel) => panel.id === id)\n  const width = widths[index]\n\n  if (width == null) return '0'\n\n  return width.toPrecision(10)\n}\n\nexport function getOffset(\n  event: MouseEvent,\n  handleElement: HTMLDivElement,\n  initialOffset: number = 0,\n  initialHandleElementRect: DOMRect | null = null,\n): number {\n  const pointerOffset = event.clientX\n\n  const rect = initialHandleElementRect || handleElement.getBoundingClientRect()\n  const elementOffset = rect.left\n\n  return pointerOffset - elementOffset - initialOffset\n}\n\nexport function isPanel(element: PanelElement | ResizerElement): element is PanelElement {\n  return element.type === 'panel'\n}\n\nexport function isResizer(element: PanelElement | ResizerElement): element is ResizerElement {\n  return element.type === 'resizer'\n}\n\nexport function getSortedElements(elements: ElementMap): Array<PanelElement | ResizerElement> {\n  return Array.from(elements.values()).sort(({order: a}, {order: b}) => {\n    if (a == null && b == null) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n    return a - b\n  })\n}\n\nexport function validateWidths(\n  panels: PanelElement[],\n  widthsToValidate: number[],\n  containerWidth: number,\n): number[] {\n  // Clamp widths proportionally to total 100\n  const total = widthsToValidate.reduce((total, width) => total + width, 0)\n  const widths = [...widthsToValidate].map((width) => (width / total) * 100)\n\n  let remainingWidth = 0\n\n  for (let index = 0; index < panels.length; index++) {\n    const panel = panels[index]\n    const width = widths[index]\n    const nextWidth = getNextWidth(panel, width, containerWidth)\n    if (width != nextWidth) {\n      remainingWidth += width - nextWidth\n      widths[index] = nextWidth\n    }\n  }\n\n  if (remainingWidth.toFixed(3) !== '0.000') {\n    for (let index = 0; index < panels.length; index++) {\n      const panel = panels[index]\n\n      let {maxWidth, minWidth} = panel\n\n      minWidth = (minWidth / containerWidth) * 100\n      if (maxWidth != null) {\n        maxWidth = (maxWidth / containerWidth) * 100\n      }\n\n      const width = Math.min(\n        maxWidth != null ? maxWidth : 100,\n        Math.max(minWidth, widths[index] + remainingWidth),\n      )\n\n      if (width !== widths[index]) {\n        remainingWidth -= width - widths[index]\n        widths[index] = width\n\n        if (Math.abs(remainingWidth).toFixed(3) === '0.000') {\n          break\n        }\n      }\n    }\n  }\n\n  return widths\n}\n\nexport function getDefaultWidths(panels: PanelElement[]): number[] {\n  let panelsWithoutWidth = panels.length\n  let remainingWidthTotal = 100\n\n  const widthsWithNulls = panels.map((panel) => {\n    if (panel.defaultSize) {\n      remainingWidthTotal = remainingWidthTotal - panel.defaultSize\n      panelsWithoutWidth = panelsWithoutWidth - 1\n      return panel.defaultSize\n    }\n    return null\n  })\n\n  const defaultWidth = remainingWidthTotal / panelsWithoutWidth\n  const widths = widthsWithNulls.map((width) => {\n    if (width === null) return defaultWidth\n    return width\n  })\n\n  return widths\n}\n","// Slightly modified version of react-resizable-panels\n// https://github.com/bvaughn/react-resizable-panels/tree/main/packages/react-resizable-panels\n\nimport {\n  type CSSProperties,\n  type FunctionComponent,\n  type PropsWithChildren,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {styled} from 'styled-components'\n\nimport {PanelsContext} from './PanelsContext'\nimport type {ElementMap, InitialDragState, PanelElement, PanelsState, ResizerElement} from './types'\nimport {usePanelsStorage} from './usePanelsStorage'\nimport {\n  getDefaultWidths,\n  getNextWidths,\n  getOffset,\n  getPanelWidth,\n  getSortedElements,\n  isPanel,\n  isResizer,\n  validateWidths,\n} from './util'\n\nconst PanelsWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  overflow: hidden;\n  width: 100%;\n`\n\nexport const Panels: FunctionComponent<PropsWithChildren> = function ({children}) {\n  const panelsEl = useRef<HTMLDivElement | null>(null)\n\n  const [elements, setElements] = useState<ElementMap>(new Map())\n\n  const panels = useMemo(() => getSortedElements(elements).filter(isPanel), [elements])\n\n  const [widths, setWidths] = useState<number[]>([])\n  const [activeResizer, setActiveResizer] = useState<string | null>(null)\n\n  const panelsRef = useRef<PanelsState>({\n    elements,\n    panels,\n    widths,\n  })\n\n  const getPanelStyle = useCallback(\n    (id: string): CSSProperties => {\n      return {\n        flexGrow: getPanelWidth(panels, id, widths),\n        pointerEvents: activeResizer === null ? undefined : 'none',\n      }\n    },\n    [activeResizer, panels, widths],\n  )\n\n  const registerElement = useCallback((id: string, data: PanelElement | ResizerElement) => {\n    setElements((prev) => {\n      if (prev.has(id)) return prev\n      const next = new Map(prev)\n      next.set(id, data)\n      return next\n    })\n  }, [])\n  const unregisterElement = useCallback((id: string) => {\n    setElements((prev) => {\n      if (!prev.has(id)) return prev\n      const next = new Map(prev)\n      next.delete(id)\n      return next\n    })\n  }, [])\n\n  const dragRef = useRef<InitialDragState>({\n    containerWidth: window.innerWidth,\n    dragOffset: 0,\n    panelAfter: null,\n    panelBefore: null,\n    resizerIndex: -1,\n    resizerRect: null,\n    startX: 0,\n    widths: [],\n  })\n\n  const startDragging = useCallback(\n    (id: string, event: MouseEvent) => {\n      const elementsArr = getSortedElements(elements)\n      const index = elementsArr.findIndex((el) => el.id === id)\n\n      const resizer = elements.get(id)\n      if (!resizer || !isResizer(resizer)) return\n      const resizeElement = resizer.el.current\n      if (!resizeElement) return\n\n      dragRef.current = {\n        resizerIndex: index,\n        panelBefore: elementsArr.reduce(\n          (acc, el, i) => (isPanel(el) && i < index ? el : acc),\n          null as PanelElement | null,\n        ),\n        panelAfter: elementsArr.reduce(\n          (acc, el, i) => (acc === null && isPanel(el) && i > index ? el : acc),\n          null as PanelElement | null,\n        ),\n        containerWidth: window.innerWidth,\n        startX: event.pageX,\n        dragOffset: getOffset(event, resizeElement),\n        resizerRect: resizeElement.getBoundingClientRect(),\n        widths: panelsRef.current.widths,\n      }\n\n      setActiveResizer(id)\n    },\n    [elements],\n  )\n\n  const stopDragging = useCallback(() => {\n    setActiveResizer(null)\n  }, [])\n\n  const drag = useCallback(\n    (id: string, event: MouseEvent) => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      const {containerWidth, dragOffset, panelBefore, panelAfter, resizerRect} = dragRef.current\n\n      if (panelBefore == null || panelAfter == null) {\n        return\n      }\n\n      const resizer = elements.get(id)\n      if (!resizer || !isResizer(resizer)) return\n      const resizeElement = resizer.el.current\n      if (!resizeElement) return\n\n      const offset = getOffset(event, resizeElement, dragOffset, resizerRect)\n\n      if (offset === 0) {\n        return\n      }\n\n      const {widths: prevWidths} = panelsRef.current\n      const rect = panelsEl.current!.getBoundingClientRect()\n      const delta = (offset / rect.width) * 100\n\n      const nextWidths = getNextWidths(\n        delta,\n        containerWidth,\n        panelBefore,\n        panelAfter,\n        panelsRef.current,\n        dragRef.current,\n      )\n\n      const widthsChanged = prevWidths.some((prevWidth, i) => prevWidth !== nextWidths[i])\n\n      if (widthsChanged) {\n        setWidths(nextWidths)\n      }\n    },\n    [elements],\n  )\n\n  // For setting the panels state\n  useLayoutEffect(() => {\n    panelsRef.current.elements = elements\n    panelsRef.current.panels = panels\n    panelsRef.current.widths = widths\n  }, [elements, panels, widths])\n\n  const storage = usePanelsStorage()\n\n  // For setting default sizing when panels are updated\n  useLayoutEffect(() => {\n    const {widths} = panelsRef.current\n\n    if (widths.length === panels.length) {\n      return\n    }\n\n    const storedWidths = storage.get(panels)\n\n    if (storedWidths) {\n      const validatedStoredWidths = validateWidths(panels, storedWidths, window.innerWidth)\n      setWidths(validatedStoredWidths)\n      return\n    }\n\n    const defaultWidths = getDefaultWidths(panels)\n    setWidths(defaultWidths)\n  }, [storage, panels])\n\n  // For storing current widths in localStorage\n  useEffect(() => {\n    if (!widths.length) return\n    storage.setDebounced(panels, widths)\n  }, [storage, panels, widths])\n\n  useLayoutEffect(() => {\n    const resizeObserver = new ResizeObserver(() => {\n      const {panels, widths: prevWidths} = panelsRef.current\n\n      const nextWidths = validateWidths(panels, prevWidths, window.innerWidth)\n\n      const widthsChanged = prevWidths.some((prevWidth, i) => prevWidth !== nextWidths[i])\n      if (widthsChanged) {\n        setWidths(nextWidths)\n      }\n    })\n\n    resizeObserver.observe(panelsEl.current!)\n\n    return () => {\n      resizeObserver.disconnect()\n    }\n  }, [])\n\n  const context = useMemo(\n    () => ({\n      activeResizer,\n      drag,\n      getPanelStyle,\n      registerElement,\n      startDragging,\n      stopDragging,\n      unregisterElement,\n    }),\n    [\n      activeResizer,\n      drag,\n      getPanelStyle,\n      registerElement,\n      startDragging,\n      stopDragging,\n      unregisterElement,\n    ],\n  )\n\n  return (\n    <PanelsContext.Provider value={context}>\n      <PanelsWrapper ref={panelsEl}>{children}</PanelsWrapper>\n    </PanelsContext.Provider>\n  )\n}\n","import {Box, Button, Card, type CardProps, Container, Flex, Inline, Stack, Text} from '@sanity/ui'\nimport type {ReactElement, ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {presentationLocaleNamespace} from '../i18n'\n\nexport function ErrorCard(\n  props: {\n    children?: ReactNode\n    message: string\n    onRetry?: () => void\n    onContinueAnyway?: () => void\n  } & CardProps,\n): ReactElement {\n  const {children, message, onRetry, onContinueAnyway, ...restProps} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n\n  const retryButton = (\n    <Button fontSize={1} mode=\"ghost\" onClick={onRetry} text={t('error-card.retry-button.text')} />\n  )\n  const continueAnywayButton = (\n    <Button\n      fontSize={1}\n      mode=\"ghost\"\n      tone=\"critical\"\n      onClick={onContinueAnyway}\n      text={t('error-card.continue-button.text')}\n    />\n  )\n\n  return (\n    <Card height=\"fill\" {...restProps}>\n      <Flex align=\"center\" height=\"fill\" justify=\"center\">\n        <Container padding={4} sizing=\"border\" width={0}>\n          <Stack space={4}>\n            <Stack space={3}>\n              <Text size={1} weight=\"semibold\">\n                {t('error-card.title')}\n              </Text>\n              <Text muted size={1}>\n                {message}\n              </Text>\n            </Stack>\n\n            {children}\n\n            {onRetry && onContinueAnyway ? (\n              <Inline space={2}>\n                {retryButton}\n                {continueAnywayButton}\n              </Inline>\n            ) : onRetry ? (\n              <Box>{retryButton}</Box>\n            ) : onContinueAnyway ? (\n              <Box>{continueAnywayButton}</Box>\n            ) : null}\n          </Stack>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n","/* eslint-disable no-console */\n\nimport {forwardRef, type PropsWithChildren, type ReactElement, useCallback, useMemo} from 'react'\nimport {StateLink, useRouter} from 'sanity/router'\n\nimport {\n  type BackLinkProps,\n  getPublishedId,\n  PaneRouterContext,\n  type PaneRouterContextValue,\n  type ReferenceChildLinkProps,\n  useUnique,\n} from '../internals'\nimport type {PresentationParams, StructureDocumentPaneParams} from '../types'\nimport {usePresentationTool} from '../usePresentationTool'\n\nfunction encodeQueryString(params: Record<string, unknown> = {}): string {\n  const parts = Object.entries(params)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&')\n\n  return parts.length ? `?${parts}` : ''\n}\n\nfunction resolveQueryStringFromParams(nextParams: Record<string, string | undefined>) {\n  const allowed = [\n    'comment',\n    'inspect',\n    'instruction',\n    'pathKey',\n    'rev',\n    'since',\n    'template',\n    'prefersLatestPublished',\n    'view',\n  ] satisfies Array<keyof PresentationParams> as string[]\n\n  const safeNextParams = Object.entries(nextParams)\n    .filter(([key]) => allowed.includes(key))\n    .reduce((obj, [key, value]) => {\n      if (value == undefined) return obj\n      return {...obj, [key]: value}\n    }, {})\n\n  return encodeQueryString(safeNextParams)\n}\n\nconst BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: React.ForwardedRef<HTMLAnchorElement>,\n) {\n  const {params, structureParams} = usePresentationTool()\n\n  return (\n    <StateLink\n      {...props}\n      ref={ref}\n      state={{\n        type: undefined,\n        _searchParams: Object.entries({\n          ...structureParams,\n          perspective: params.perspective,\n          preview: params.preview,\n        }),\n      }}\n      title={undefined}\n    />\n  )\n})\n\nconst ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  props: ReferenceChildLinkProps & {previewUrl?: string},\n  ref: React.ForwardedRef<HTMLAnchorElement>,\n) {\n  const {\n    documentId,\n    documentType,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    parentRefPath,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    template,\n    previewUrl,\n    ...restProps\n  } = props\n  const {params} = usePresentationTool()\n\n  return (\n    <StateLink\n      {...restProps}\n      ref={ref}\n      state={{\n        id: documentId,\n        type: documentType,\n        _searchParams: Object.entries({\n          preview: previewUrl,\n          prefersLatestPublished: params.perspective === 'published' ? 'true' : undefined,\n        }),\n      }}\n      title={undefined}\n    />\n  )\n})\n\nexport function PresentationPaneRouterProvider(\n  props: PropsWithChildren<{\n    onStructureParams: (params: StructureDocumentPaneParams) => void\n    params: StructureDocumentPaneParams\n    previewUrl?: string\n    refs?: {_id: string; _type: string}[]\n  }>,\n): ReactElement {\n  const {children, onStructureParams, params, previewUrl, refs} = props\n\n  const {state: routerState, resolvePathFromState} = useRouter()\n\n  const routerSearchParams = useUnique(Object.fromEntries(routerState._searchParams || []))\n\n  const createPathWithParams: PaneRouterContextValue['createPathWithParams'] = useCallback(\n    (nextParams) => {\n      const path = resolvePathFromState(routerState)\n      const qs = resolveQueryStringFromParams({\n        ...routerSearchParams,\n        ...nextParams,\n      })\n      return `${path}${qs}`\n    },\n    [resolvePathFromState, routerSearchParams, routerState],\n  )\n\n  const context: PaneRouterContextValue = useMemo(() => {\n    return {\n      index: 0,\n      groupIndex: 0,\n      siblingIndex: 0,\n      payload: {},\n      params: params as any,\n      hasGroupSiblings: false,\n      groupLength: 1,\n      routerPanesState: [],\n      ChildLink: (childLinkProps) => {\n        const {childId, ...restProps} = childLinkProps\n        const ref = refs?.find((r) => r._id === childId || getPublishedId(r._id) === childId)\n        const {params} = usePresentationTool()\n\n        if (ref) {\n          return (\n            <StateLink\n              {...restProps}\n              state={{\n                id: childId,\n                type: ref._type,\n                _searchParams: Object.entries({\n                  preview: previewUrl,\n                  prefersLatestPublished: params.perspective === 'published' ? 'true' : undefined,\n                }),\n              }}\n            />\n          )\n        }\n\n        return <div {...restProps} />\n      },\n      BackLink,\n      ReferenceChildLink: (childLinkProps) => (\n        <ReferenceChildLink {...childLinkProps} previewUrl={previewUrl} />\n      ),\n      ParameterizedLink: () => <>ParameterizedLink</>,\n      closeCurrentAndAfter: () => {\n        console.warn('closeCurrentAndAfter')\n      },\n      handleEditReference: (options) => {\n        console.warn('handleEditReference', options)\n      },\n      replaceCurrent: (pane) => {\n        console.warn('replaceCurrent', pane)\n      },\n      closeCurrent: () => {\n        console.warn('closeCurrent')\n      },\n      duplicateCurrent: (pane) => {\n        console.warn('duplicateCurrent', pane)\n      },\n      setView: (viewId) => {\n        console.warn('setView', viewId)\n      },\n      setParams: (nextParams) => {\n        // eslint-disable-next-line no-warning-comments\n        // @todo set inspect param to undefined manually as param is missing from object when closing inspector\n        onStructureParams({\n          ...nextParams,\n          inspect: nextParams['inspect'] ?? undefined,\n        } as StructureDocumentPaneParams)\n      },\n      setPayload: (payload) => {\n        console.warn('setPayload', payload)\n      },\n      navigateIntent: (intentName, intentParams, options) => {\n        console.warn('navigateIntent', intentName, intentParams, options)\n      },\n      createPathWithParams,\n    }\n  }, [createPathWithParams, onStructureParams, params, previewUrl, refs])\n\n  return <PaneRouterContext.Provider value={context}>{children}</PaneRouterContext.Provider>\n}\n","import {Card, Code, ErrorBoundary, Flex, Label, Stack} from '@sanity/ui'\nimport {type ErrorInfo, type ReactElement, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {ErrorCard} from '../components/ErrorCard'\nimport {presentationLocaleNamespace} from '../i18n'\nimport {\n  DocumentListPane as StructureDocumentListPane,\n  getPublishedId,\n  PaneLayout,\n  type PaneNode,\n  StructureToolProvider,\n} from '../internals'\nimport type {MainDocumentState, StructureDocumentPaneParams} from '../types'\nimport {usePresentationTool} from '../usePresentationTool'\nimport {PresentationPaneRouterProvider} from './PresentationPaneRouterProvider'\n\nconst RootLayout = styled(PaneLayout)`\n  height: 100%;\n`\n\nconst Root = styled(Flex)`\n  & > div {\n    min-width: none !important;\n    max-width: none !important;\n  }\n`\n\nconst WrappedCode = styled(Code)`\n  white-space: pre-wrap;\n`\n\nexport function DocumentListPane(props: {\n  mainDocumentState?: MainDocumentState\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  previewUrl?: string\n  refs: {_id: string; _type: string}[]\n}): ReactElement {\n  const {mainDocumentState, onStructureParams, previewUrl, refs} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {devMode} = usePresentationTool()\n\n  const ids = useMemo(\n    () =>\n      refs\n        .filter((r) => getPublishedId(r._id) !== mainDocumentState?.document?._id)\n        .map((r) => r._id),\n    [mainDocumentState, refs],\n  )\n\n  const pane: Extract<PaneNode, {type: 'documentList'}> = useMemo(\n    () => ({\n      id: '$root',\n      options: {\n        filter: '_id in $ids',\n        params: {ids},\n        // defaultOrdering: [{field: '_updatedAt', direction: 'desc'}],\n      },\n      schemaTypeName: '',\n      title: t('document-list-pane.document-list.title'),\n      type: 'documentList',\n    }),\n    [ids, t],\n  )\n\n  const [errorParams, setErrorParams] = useState<{\n    info: ErrorInfo\n    error: Error\n  } | null>(null)\n\n  const handleRetry = useCallback(() => setErrorParams(null), [])\n\n  const [structureParams] = useState(() => ({}))\n\n  // Reset error state when `refs` value schanges\n  useEffect(() => setErrorParams(null), [refs])\n\n  if (errorParams) {\n    return (\n      <ErrorCard flex={1} message={t('document-list-pane.error.text')} onRetry={handleRetry}>\n        {devMode && (\n          // show runtime error message in dev mode\n          <Card overflow=\"auto\" padding={3} radius={2} tone=\"critical\">\n            <Stack space={3}>\n              <Label muted size={0}>\n                {t('presentation-error.label')}\n              </Label>\n              <WrappedCode size={1}>{errorParams.error.message}</WrappedCode>\n            </Stack>\n          </Card>\n        )}\n      </ErrorCard>\n    )\n  }\n\n  return (\n    <ErrorBoundary onCatch={setErrorParams}>\n      <RootLayout>\n        <StructureToolProvider>\n          <PresentationPaneRouterProvider\n            onStructureParams={onStructureParams}\n            params={structureParams}\n            previewUrl={previewUrl}\n            refs={refs}\n          >\n            <Root direction=\"column\" flex={1}>\n              <StructureDocumentListPane index={0} itemId=\"$root\" pane={pane} paneKey=\"$root\" />\n            </Root>\n          </PresentationPaneRouterProvider>\n        </StructureToolProvider>\n      </RootLayout>\n    </ErrorBoundary>\n  )\n}\n","import {Card, Code, ErrorBoundary, Label, Stack} from '@sanity/ui'\nimport {type ErrorInfo, type ReactElement, useCallback, useEffect, useMemo, useState} from 'react'\nimport {type Path, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {ErrorCard} from '../components/ErrorCard'\nimport {presentationLocaleNamespace} from '../i18n'\nimport {\n  decodeJsonParams,\n  DocumentPane as StructureDocumentPane,\n  type DocumentPaneNode,\n  PaneLayout,\n} from '../internals'\nimport type {StructureDocumentPaneParams} from '../types'\nimport {usePresentationTool} from '../usePresentationTool'\nimport {PresentationPaneRouterProvider} from './PresentationPaneRouterProvider'\n\nconst WrappedCode = styled(Code)`\n  white-space: pre-wrap;\n`\n\nexport function DocumentPane(props: {\n  documentId: string\n  documentType: string\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  params: StructureDocumentPaneParams\n  previewUrl?: string\n}): ReactElement {\n  const {documentId, documentType, onFocusPath, onStructureParams, params, previewUrl} = props\n  const {template, templateParams} = params\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {devMode} = usePresentationTool()\n\n  const paneDocumentNode: DocumentPaneNode = useMemo(\n    () => ({\n      id: documentId,\n      options: {\n        id: documentId,\n        type: documentType,\n        template,\n        templateParameters: decodeJsonParams(templateParams),\n      },\n      title: '',\n      type: 'document',\n    }),\n    [documentId, documentType, template, templateParams],\n  )\n\n  const [errorParams, setErrorParams] = useState<{\n    info: ErrorInfo\n    error: Error\n  } | null>(null)\n\n  const handleRetry = useCallback(() => setErrorParams(null), [])\n\n  // Reset error state when parameters change\n  useEffect(() => {\n    setErrorParams(null)\n  }, [documentId, documentType, params])\n\n  if (errorParams) {\n    return (\n      <ErrorCard flex={1} message={t('document-pane.error.text')} onRetry={handleRetry}>\n        {devMode && (\n          // show runtime error message in dev mode\n          <Card overflow=\"auto\" padding={3} radius={2} tone=\"critical\">\n            <Stack space={3}>\n              <Label muted size={0}>\n                {t('presentation-error.label')}\n              </Label>\n              <WrappedCode size={1}>{errorParams.error.message}</WrappedCode>\n            </Stack>\n          </Card>\n        )}\n      </ErrorCard>\n    )\n  }\n\n  return (\n    <ErrorBoundary onCatch={setErrorParams}>\n      <PaneLayout style={{height: '100%'}}>\n        <PresentationPaneRouterProvider\n          onStructureParams={onStructureParams}\n          params={params}\n          previewUrl={previewUrl}\n        >\n          <StructureDocumentPane\n            paneKey=\"document\"\n            index={1}\n            itemId=\"document\"\n            pane={paneDocumentNode}\n            onFocusPath={onFocusPath}\n          />\n        </PresentationPaneRouterProvider>\n      </PaneLayout>\n    </ErrorBoundary>\n  )\n}\n","import {type ReactElement} from 'react'\nimport {type Path} from 'sanity'\n\nimport {StructureToolProvider} from '../internals'\nimport type {StructureDocumentPaneParams} from '../types'\nimport {DocumentPane} from './DocumentPane'\n\nexport function DocumentPanel(props: {\n  documentId: string\n  documentType: string\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  previewUrl?: string\n  structureParams: StructureDocumentPaneParams\n}): ReactElement {\n  const {documentId, documentType, onFocusPath, onStructureParams, previewUrl, structureParams} =\n    props\n  return (\n    <StructureToolProvider>\n      <DocumentPane\n        documentId={documentId}\n        documentType={documentType}\n        onFocusPath={onFocusPath}\n        onStructureParams={onStructureParams}\n        params={structureParams}\n        previewUrl={previewUrl}\n      />\n    </StructureToolProvider>\n  )\n}\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {Badge, Box, Card, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactElement, useCallback} from 'react'\nimport {type Path, Translate, useSchema, useTranslation} from 'sanity'\nimport {StateLink} from 'sanity/router'\n\nimport {presentationLocaleNamespace} from '../i18n'\nimport {Preview} from '../internals'\nimport type {MainDocumentState, StructureDocumentPaneParams} from '../types'\nimport {DocumentListPane} from './DocumentListPane'\nimport {DocumentPanel} from './DocumentPanel'\n\nexport function ContentEditor(props: {\n  documentId?: string\n  documentType?: string\n  mainDocumentState?: MainDocumentState\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  previewUrl?: string\n  refs: {_id: string; _type: string}[]\n  structureParams: StructureDocumentPaneParams\n}): ReactElement {\n  const {\n    documentId,\n    documentType,\n    mainDocumentState,\n    onFocusPath,\n    onStructureParams,\n    previewUrl,\n    refs,\n    structureParams,\n  } = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const schema = useSchema()\n\n  const MainDocumentLink = useCallback(\n    (props: HTMLProps<HTMLAnchorElement>) => {\n      return (\n        <StateLink\n          {...props}\n          state={{\n            id: mainDocumentState!.document!._id,\n            type: mainDocumentState!.document!._type,\n            _searchParams: Object.entries({preview: previewUrl}),\n          }}\n        />\n      )\n    },\n    [mainDocumentState, previewUrl],\n  )\n\n  if (documentId && documentType) {\n    return (\n      <DocumentPanel\n        documentId={documentId}\n        documentType={documentType}\n        onFocusPath={onFocusPath}\n        onStructureParams={onStructureParams}\n        previewUrl={previewUrl}\n        structureParams={structureParams}\n      />\n    )\n  }\n\n  return (\n    <Flex direction=\"column\" flex={1} height=\"fill\">\n      {mainDocumentState && (\n        <Card padding={3} tone={mainDocumentState.document ? 'inherit' : 'caution'}>\n          {mainDocumentState.document ? (\n            <Card as={MainDocumentLink} data-as=\"a\" padding={0} radius={2}>\n              <Preview\n                schemaType={schema.get(mainDocumentState.document._type)!}\n                status={<Badge>{t('main-document.label')}</Badge>}\n                value={mainDocumentState.document}\n              />\n            </Card>\n          ) : (\n            <Card padding={2} radius={2} tone=\"inherit\">\n              <Flex gap={3}>\n                <Box flex=\"none\">\n                  <Text size={1}>\n                    <WarningOutlineIcon />\n                  </Text>\n                </Box>\n                <Box flex={1}>\n                  <Text size={1}>\n                    <Translate\n                      t={t}\n                      i18nKey=\"main-document.missing.text\"\n                      components={{Code: 'code'}}\n                      values={{path: mainDocumentState.path}}\n                    />\n                  </Text>\n                </Box>\n              </Flex>\n            </Card>\n          )}\n        </Card>\n      )}\n\n      <DocumentListPane\n        mainDocumentState={mainDocumentState}\n        onStructureParams={onStructureParams}\n        previewUrl={previewUrl}\n        refs={refs}\n      />\n    </Flex>\n  )\n}\n","import {\n  type FunctionComponent,\n  type MouseEvent as ReactMouseEvent,\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from 'react'\nimport {styled} from 'styled-components'\n\nimport {PanelsContext} from './PanelsContext'\nimport {usePanelId} from './usePanelId'\n\nconst Resizer = styled.div`\n  position: relative;\n`\nconst ResizerInner = styled.div<{\n  $disabled: boolean\n}>`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: -5px;\n  width: 9px;\n  z-index: 10;\n  cursor: ${({$disabled}) => ($disabled ? 'auto' : 'ew-resize')};\n\n  /* Border */\n  & > span:nth-child(1) {\n    display: block;\n    border-left: 1px solid var(--card-border-color);\n    position: absolute;\n    top: 0;\n    left: 4px;\n    bottom: 0;\n    transition: opacity 200ms;\n  }\n\n  ${({$disabled}) =>\n    !$disabled &&\n    `\n    /* Hover effect */\n    & > span:nth-child(2) {\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    @media (hover: hover) {\n      &:hover > span:nth-child(2) {\n        opacity: 0.2;\n      }\n    }\n  `}\n`\n\nexport const PanelResizer: FunctionComponent<{\n  id?: string\n  order: number\n  disabled?: boolean\n}> = function ({id: propId, order, disabled = false}) {\n  const el = useRef<HTMLDivElement>(null)\n\n  const context = useContext(PanelsContext)\n\n  if (context === null) {\n    throw Error(`Panel components must be rendered within a PanelGroup container`)\n  }\n\n  const id = usePanelId(propId)\n\n  const {activeResizer, drag, startDragging, stopDragging, registerElement, unregisterElement} =\n    context\n\n  const isDragging = activeResizer === id\n\n  if (context === null) {\n    throw Error(`Panel components must be rendered within a PanelGroup container`)\n  }\n\n  const onMouseDown = useCallback(\n    (event: ReactMouseEvent) => {\n      startDragging(id, event.nativeEvent)\n    },\n    [id, startDragging],\n  )\n\n  const onDrag = useCallback(\n    (e: MouseEvent) => {\n      drag(id, e)\n    },\n    [id, drag],\n  )\n\n  const onDragStop = useCallback(() => {\n    el.current!.blur()\n    stopDragging()\n  }, [stopDragging])\n\n  useEffect(() => {\n    if (!isDragging || disabled) return\n\n    window.addEventListener('mousemove', onDrag)\n    window.addEventListener('mouseup', onDragStop)\n\n    return () => {\n      window.removeEventListener('mousemove', onDrag)\n      window.removeEventListener('mouseup', onDragStop)\n    }\n  }, [disabled, isDragging, onDrag, onDragStop])\n\n  useLayoutEffect(() => {\n    registerElement(id, {id, order, type: 'resizer', el})\n\n    return () => {\n      unregisterElement(id)\n    }\n  }, [id, order, registerElement, unregisterElement])\n\n  return (\n    <Resizer onMouseDown={onMouseDown} ref={el}>\n      <ResizerInner $disabled={disabled}>\n        <span />\n        <span />\n      </ResizerInner>\n    </Resizer>\n  )\n}\n","import {useRef} from 'react'\nimport {v4 as uuid} from 'uuid'\n\nexport function usePanelId(id?: string): string {\n  const idRef = useRef(id || uuid())\n  return idRef.current\n}\n","import {\n  type Dispatch,\n  type FunctionComponent,\n  type PropsWithChildren,\n  type SetStateAction,\n} from 'react'\nimport type {Path, SanityDocument} from 'sanity'\n\nimport {ContentEditor} from './editor/ContentEditor'\nimport {type CommentIntentGetter, CommentsIntentProvider} from './internals'\nimport {DisplayedDocumentBroadcasterProvider} from './loader/DisplayedDocumentBroadcaster'\nimport {Panel} from './panels/Panel'\nimport {PanelResizer} from './panels/PanelResizer'\nimport type {MainDocumentState, PresentationParams, StructureDocumentPaneParams} from './types'\n\nexport interface PresentationContentProps {\n  mainDocumentState: MainDocumentState | undefined\n  params: PresentationParams\n  documentsOnPage: {_id: string; _type: string}[]\n  getCommentIntent: CommentIntentGetter\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  setDisplayedDocument: Dispatch<SetStateAction<Partial<SanityDocument> | null | undefined>>\n  structureParams: StructureDocumentPaneParams\n}\n\nconst PresentationContentWrapper: FunctionComponent<\n  PropsWithChildren<{\n    documentId?: string\n    getCommentIntent: CommentIntentGetter\n    setDisplayedDocument: Dispatch<SetStateAction<Partial<SanityDocument> | null | undefined>>\n  }>\n> = (props) => {\n  const {documentId, setDisplayedDocument, getCommentIntent} = props\n  return (\n    <>\n      <PanelResizer order={4} />\n      <Panel id=\"content\" minWidth={325} order={5}>\n        <DisplayedDocumentBroadcasterProvider\n          documentId={documentId}\n          setDisplayedDocument={setDisplayedDocument}\n        >\n          <CommentsIntentProvider getIntent={getCommentIntent}>\n            {props.children}\n          </CommentsIntentProvider>\n        </DisplayedDocumentBroadcasterProvider>\n      </Panel>\n    </>\n  )\n}\n\nexport const PresentationContent: FunctionComponent<PresentationContentProps> = (props) => {\n  const {\n    documentsOnPage,\n    getCommentIntent,\n    mainDocumentState,\n    onFocusPath,\n    onStructureParams,\n    params,\n    setDisplayedDocument,\n    structureParams,\n  } = props\n\n  return (\n    <PresentationContentWrapper\n      documentId={params.id}\n      getCommentIntent={getCommentIntent}\n      setDisplayedDocument={setDisplayedDocument}\n    >\n      <ContentEditor\n        documentId={params.id}\n        documentType={params.type}\n        mainDocumentState={mainDocumentState}\n        onFocusPath={onFocusPath}\n        onStructureParams={onStructureParams}\n        previewUrl={params.preview}\n        refs={documentsOnPage}\n        structureParams={structureParams}\n      />\n    </PresentationContentWrapper>\n  )\n}\n","import {type FunctionComponent, type PropsWithChildren, useCallback} from 'react'\n\nimport {\n  PresentationNavigateContext,\n  type PresentationNavigateContextValue,\n} from './PresentationNavigateContext'\nimport type {PresentationNavigate} from './types'\n\nexport const PresentationNavigateProvider: FunctionComponent<\n  PropsWithChildren<{\n    navigate: PresentationNavigate\n  }>\n> = function (props) {\n  const {children, navigate: _navigate} = props\n\n  const navigate = useCallback<PresentationNavigateContextValue>(\n    (preview, document = undefined) => {\n      _navigate(document || {}, preview ? {preview} : {})\n    },\n    [_navigate],\n  )\n\n  return (\n    <PresentationNavigateContext.Provider value={navigate}>\n      {children}\n    </PresentationNavigateContext.Provider>\n  )\n}\n","import {memo, useCallback, useMemo} from 'react'\n\nimport {Panel} from './panels/Panel'\nimport {PanelResizer} from './panels/PanelResizer'\nimport type {NavigatorOptions} from './types'\nimport {useLocalState} from './useLocalState'\n\n/** @internal */\nexport interface UsePresentationNavigatorProps {\n  unstable_navigator?: NavigatorOptions\n}\n\n/** @internal */\nexport interface UsePresentationNavigatorState {\n  navigatorEnabled: boolean\n  toggleNavigator: (() => void) | undefined\n}\n\n/** @internal */\nexport function usePresentationNavigator(\n  props: UsePresentationNavigatorProps,\n): [UsePresentationNavigatorState, () => JSX.Element] {\n  const {unstable_navigator} = props\n\n  const navigatorProvided = !!unstable_navigator?.component\n  const [_navigatorEnabled, setNavigatorEnabled] = useLocalState<boolean>(\n    'presentation/navigator',\n    navigatorProvided,\n  )\n  const navigatorEnabled = navigatorProvided ? _navigatorEnabled : false\n  const toggleNavigator = useMemo(() => {\n    if (!navigatorProvided) return undefined\n\n    return () => setNavigatorEnabled((enabled) => !enabled)\n  }, [navigatorProvided, setNavigatorEnabled])\n\n  const Component = useCallback(\n    function PresentationNavigator() {\n      return <>{navigatorEnabled && <Navigator {...unstable_navigator!} />}</>\n    },\n    [navigatorEnabled, unstable_navigator],\n  )\n\n  return [{navigatorEnabled, toggleNavigator}, Component]\n}\n\nfunction NavigatorComponent(props: NavigatorOptions) {\n  const {minWidth, maxWidth, component: NavigatorComponent} = props\n  const navigatorDisabled = minWidth != null && maxWidth != null && minWidth === maxWidth\n  return (\n    <>\n      <Panel id=\"navigator\" minWidth={minWidth} maxWidth={maxWidth} order={1}>\n        <NavigatorComponent />\n      </Panel>\n      <PanelResizer order={2} disabled={navigatorDisabled} />\n    </>\n  )\n}\nconst Navigator = memo(NavigatorComponent)\n","import {type Dispatch, type SetStateAction, useEffect, useState} from 'react'\n\nexport function useLocalState<T>(key: string, defaultValue: T): [T, Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() =>\n    JSON.parse(localStorage.getItem(key) ?? JSON.stringify(defaultValue)),\n  )\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value))\n  }, [key, value])\n\n  return [value, setValue]\n}\n","import {type FunctionComponent, type PropsWithChildren, useMemo} from 'react'\n\nimport {PresentationParamsContext} from './PresentationParamsContext'\nimport type {PresentationParams} from './types'\n\nexport const PresentationParamsProvider: FunctionComponent<\n  PropsWithChildren<{\n    params: PresentationParams\n  }>\n> = function (props) {\n  const {children, params} = props\n\n  const context = useMemo<PresentationParams>(() => params, [params])\n\n  return (\n    <PresentationParamsContext.Provider value={context}>\n      {children}\n    </PresentationParamsContext.Provider>\n  )\n}\n","import {type FunctionComponent, type PropsWithChildren, useMemo} from 'react'\n\nimport {PresentationContext, type PresentationContextValue} from './PresentationContext'\nimport type {PresentationNavigate, PresentationParams, StructureDocumentPaneParams} from './types'\n\nexport const PresentationProvider: FunctionComponent<\n  PropsWithChildren<{\n    devMode: boolean\n    name: string\n    navigate: PresentationNavigate\n    params: PresentationParams\n    structureParams: StructureDocumentPaneParams\n  }>\n> = function (props) {\n  const {children, devMode, name, navigate, params, structureParams} = props\n\n  const context = useMemo<PresentationContextValue>(\n    () => ({\n      devMode,\n      name,\n      navigate,\n      params,\n      structureParams,\n    }),\n    [devMode, name, navigate, params, structureParams],\n  )\n\n  return <PresentationContext.Provider value={context}>{children}</PresentationContext.Provider>\n}\n","import type {ClientPerspective} from '@sanity/client'\nimport type {Dispatch, Reducer} from 'react'\nimport {boolean, fallback, object, parse, picklist} from 'valibot'\n\nexport interface PresentationState {\n  mainDocument: boolean\n  iframe: {\n    status: 'loading' | 'loaded' | 'refreshing' | 'reloading'\n  }\n  /**\n   * The selected perspective that all previews should use\n   */\n  perspective: Extract<'published' | 'previewDrafts', ClientPerspective>\n  /**\n   * The viewport size of the preview iframe is currently hardcoded, using this enum to determine the size\n   */\n  viewport: 'desktop' | 'mobile'\n  visualEditing: {\n    overlaysEnabled: boolean\n  }\n}\n\nexport const ACTION_IFRAME_LOADED = 'ACTION_IFRAME_LOADED'\nexport const ACTION_IFRAME_REFRESH = 'ACTION_IFRAME_REFRESH'\nexport const ACTION_IFRAME_RELOAD = 'ACTION_IFRAME_RELOAD'\nexport const ACTION_PERSPECTIVE = 'ACTION_PERSPECTIVE'\nexport const ACTION_VIEWPORT = 'ACTION_VIEWPORT'\nexport const ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE = 'ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE'\n\ninterface IframeLoadedAction {\n  type: typeof ACTION_IFRAME_LOADED\n}\ninterface IframeRefreshAction {\n  type: typeof ACTION_IFRAME_REFRESH\n}\ninterface IframeReloadAction {\n  type: typeof ACTION_IFRAME_RELOAD\n}\ninterface PerspectiveAction {\n  type: typeof ACTION_PERSPECTIVE\n  perspective: PresentationState['perspective']\n}\ninterface ViewportAction {\n  type: typeof ACTION_VIEWPORT\n  viewport: PresentationState['viewport']\n}\ninterface VisualEditingOverlaysToggleAction {\n  type: typeof ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE\n  enabled: boolean\n}\n\ntype PresentationAction =\n  | IframeLoadedAction\n  | IframeRefreshAction\n  | IframeReloadAction\n  | PerspectiveAction\n  | ViewportAction\n  | VisualEditingOverlaysToggleAction\n\nexport const presentationReducer: Reducer<\n  Readonly<PresentationState>,\n  Readonly<PresentationAction>\n> = (state, action) => {\n  switch (action.type) {\n    case ACTION_IFRAME_LOADED:\n      return state.iframe.status === 'loaded'\n        ? state\n        : {\n            ...state,\n            iframe: {\n              ...state.iframe,\n              status: 'loaded',\n            },\n          }\n    case ACTION_IFRAME_REFRESH:\n      return state.iframe.status === 'refreshing'\n        ? state\n        : {\n            ...state,\n            iframe: {\n              ...state.iframe,\n              status: 'refreshing',\n            },\n          }\n    case ACTION_IFRAME_RELOAD:\n      return state.iframe.status === 'reloading'\n        ? state\n        : {\n            ...state,\n            iframe: {\n              ...state.iframe,\n              status: 'reloading',\n            },\n          }\n    case ACTION_PERSPECTIVE:\n      return {\n        ...state,\n        perspective: parse(perspectiveSchema, action.perspective),\n      }\n    case ACTION_VIEWPORT:\n      return {\n        ...state,\n        viewport: parse(viewportSchema, action.viewport),\n      }\n    case ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE:\n      return toggleVisualEditingOverlays(state, action)\n    default:\n      return state\n  }\n}\n\nconst toggleVisualEditingOverlays: Reducer<\n  Readonly<PresentationState>,\n  Readonly<VisualEditingOverlaysToggleAction>\n> = (state, action) => {\n  if (state.visualEditing.overlaysEnabled === action.enabled) return state\n  return {\n    ...state,\n    visualEditing: {\n      ...state.visualEditing,\n      overlaysEnabled: action.enabled,\n    },\n  }\n}\n\nconst mainDocumentSchema = fallback(boolean(), false)\n\nconst iframeStatusSchema = picklist(['loading', 'loaded', 'refreshing', 'reloading'])\nconst perspectiveSchema = fallback(\n  picklist(['published', 'previewDrafts'] satisfies PresentationState['perspective'][]),\n  'previewDrafts',\n)\nconst viewportSchema = fallback(\n  picklist(['desktop', 'mobile'] satisfies PresentationState['viewport'][]),\n  'desktop',\n)\nconst initStateSchema = object({\n  mainDocument: mainDocumentSchema,\n  iframe: object({\n    status: iframeStatusSchema,\n  }),\n  perspective: perspectiveSchema,\n  viewport: viewportSchema,\n  visualEditing: object({overlaysEnabled: boolean()}),\n})\n\nconst INITIAL_PRESENTATION_STATE = {\n  mainDocument: false,\n  iframe: {\n    status: 'loading',\n  },\n  perspective: 'previewDrafts',\n  viewport: 'desktop',\n  visualEditing: {\n    overlaysEnabled: false,\n  },\n} as const satisfies PresentationState\nexport function presentationReducerInit(\n  state: Readonly<\n    Partial<{\n      mainDocument: boolean\n      perspective: string\n      viewport: string\n    }>\n  >,\n): Readonly<PresentationState> {\n  return parse(initStateSchema, {...INITIAL_PRESENTATION_STATE, ...state})\n}\n\nexport type DispatchPresentationAction = Dispatch<Readonly<PresentationAction>>\n","import {motion} from 'framer-motion'\nimport {styled} from 'styled-components'\n\nexport const IFrame = motion(styled.iframe`\n  border: 0;\n  max-height: 100%;\n  width: 100%;\n  display: block;\n`)\n","import {ResetIcon} from '@sanity/icons'\nimport {TextInput, type TextInputClearButtonProps} from '@sanity/ui'\nimport {\n  type ChangeEvent,\n  type FunctionComponent,\n  type KeyboardEvent,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {presentationLocaleNamespace} from '../i18n'\nimport {useActiveWorkspace} from '../internals'\n\nexport const PreviewLocationInput: FunctionComponent<{\n  fontSize?: number\n  onChange: (value: string) => void\n  origin: string\n  padding?: number\n  prefix?: ReactNode\n  suffix?: ReactNode\n  value: string\n}> = function (props) {\n  const {fontSize = 1, onChange, origin, padding = 3, prefix, suffix, value} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {basePath = '/'} = useActiveWorkspace()?.activeWorkspace || {}\n\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const [sessionValue, setSessionValue] = useState<string | undefined>(undefined)\n  const [customValidity, setCustomValidity] = useState<string | undefined>(undefined)\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setSessionValue(event.currentTarget.value)\n  }, [])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter') {\n        if (sessionValue === undefined) {\n          return\n        }\n\n        const absoluteValue =\n          sessionValue.startsWith('/') || sessionValue === ''\n            ? `${origin}${sessionValue}`\n            : sessionValue\n\n        if (!absoluteValue.startsWith(origin + '/') && absoluteValue !== origin) {\n          setCustomValidity(t('preview-location-input.error', {origin, context: 'missing-origin'}))\n          return\n        }\n        // `origin` is an empty string '' if the Studio is embedded, and that's when we need to protect against recursion\n        if (!origin && (absoluteValue.startsWith(`${basePath}/`) || absoluteValue === basePath)) {\n          setCustomValidity(\n            t('preview-location-input.error', {basePath, context: 'same-base-path'}),\n          )\n          return\n        }\n\n        const nextValue = absoluteValue === origin ? origin + '/' : absoluteValue\n\n        setCustomValidity(undefined)\n        setSessionValue(undefined)\n\n        onChange(nextValue.slice(origin.length))\n\n        inputRef.current?.blur()\n      }\n\n      if (event.key === 'Escape') {\n        setCustomValidity(undefined)\n        setSessionValue(undefined)\n      }\n    },\n    [basePath, onChange, origin, sessionValue, t],\n  )\n\n  const handleBlur = useCallback(() => {\n    setCustomValidity(undefined)\n    setSessionValue(undefined)\n  }, [])\n\n  useEffect(() => {\n    setCustomValidity(undefined)\n    setSessionValue(undefined)\n  }, [origin, value])\n\n  const resetButton: TextInputClearButtonProps = useMemo(() => ({icon: ResetIcon}), [])\n\n  return (\n    <>\n      <TextInput\n        clearButton={customValidity ? resetButton : undefined}\n        customValidity={customValidity}\n        fontSize={fontSize}\n        onBlur={handleBlur}\n        onClear={() => {\n          setCustomValidity(undefined)\n          setSessionValue(origin + value)\n        }}\n        onChange={handleChange}\n        onKeyDownCapture={handleKeyDown}\n        padding={padding}\n        prefix={prefix}\n        style={{zIndex: 1}}\n        radius={2}\n        ref={inputRef}\n        space={padding}\n        suffix={suffix}\n        value={sessionValue === undefined ? `${origin}${value}` : sessionValue}\n      />\n    </>\n  )\n}\n","import {CopyIcon, LaunchIcon} from '@sanity/icons'\nimport {createPreviewSecret} from '@sanity/preview-url-secret/create-secret'\nimport {\n  hasSecretSearchParams,\n  setSecretSearchParams,\n} from '@sanity/preview-url-secret/without-secret-search-params'\nimport {MenuItem, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {useClient, useCurrentUser, useTranslation} from 'sanity'\n\nimport {API_VERSION} from '../constants'\nimport {presentationLocaleNamespace} from '../i18n'\nimport type {PreviewFrameProps} from './PreviewFrame'\n\n/** @internal */\nexport function ShareUrlMenuItems(\n  props: Pick<PreviewFrameProps, 'initialUrl' | 'openPopup'> & {\n    previewLocationOrigin: string\n    previewLocationRoute: string\n  },\n): React.ReactNode {\n  const {initialUrl, openPopup, previewLocationOrigin, previewLocationRoute} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n\n  const handleOpenPopup = useCallback(\n    (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n      event.preventDefault()\n      openPopup(event.currentTarget.href)\n    },\n    [openPopup],\n  )\n\n  return (\n    <>\n      <CopyUrlMenuButton\n        initialUrl={initialUrl}\n        previewLocationOrigin={previewLocationOrigin}\n        previewLocationRoute={previewLocationRoute}\n      />\n      <MenuItem\n        icon={LaunchIcon}\n        text={t('share-url.menu-item.open.text')}\n        as=\"a\"\n        href={`${previewLocationOrigin}${previewLocationRoute}`}\n        // @ts-expect-error the `as=\"a\"` prop isn't enough to change the type of event.target from <div> to <a>\n        onClick={handleOpenPopup}\n        rel=\"opener\"\n        target=\"_blank\"\n      />\n    </>\n  )\n}\n\nfunction CopyUrlMenuButton(\n  props: Pick<PreviewFrameProps, 'initialUrl'> & {\n    previewLocationOrigin: string\n    previewLocationRoute: string\n  },\n) {\n  const {initialUrl, previewLocationOrigin, previewLocationRoute} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {push: pushToast} = useToast()\n  const client = useClient({apiVersion: API_VERSION})\n  const currentUser = useCurrentUser()\n  const [disabled, setDisabled] = useState(false)\n\n  return (\n    <MenuItem\n      disabled={disabled}\n      onClick={() => {\n        if (!navigator?.clipboard) {\n          pushToast({\n            closable: true,\n            status: 'error',\n            title: t('share-url.clipboard.status', {context: 'unsupported'}),\n          })\n          return false\n        }\n        setDisabled(true)\n\n        let id: string | undefined = undefined\n        let url = `${previewLocationOrigin}${previewLocationRoute}`\n        const onFinally = () => {\n          pushToast({\n            id,\n            closable: true,\n            status: 'success',\n            title: t('share-url.clipboard.status', {context: 'success'}),\n          })\n          setDisabled(false)\n        }\n        const onError = (error: Error) => {\n          pushToast({\n            closable: true,\n            status: 'error',\n            title: t('share-url.clipboard.status', {context: 'failed'}),\n            description: error.message || error.toString(),\n          })\n          setDisabled(false)\n        }\n        if (hasSecretSearchParams(initialUrl) && typeof ClipboardItem !== 'undefined') {\n          const type = 'text/plain'\n          const resolvePreviewUrl = async () => {\n            id = pushToast({\n              closable: true,\n              title: t('share-url.clipboard.status', {context: 'copying'}),\n            })\n            const previewUrlSecret = await createPreviewSecret(\n              client,\n              '@sanity/presentation',\n              typeof window === 'undefined' ? '' : location.href,\n              currentUser?.id,\n            )\n\n            const newUrl = setSecretSearchParams(\n              initialUrl,\n              previewUrlSecret.secret,\n              previewLocationRoute,\n            )\n            url = newUrl.toString()\n            return new Blob([url], {type})\n          }\n\n          // Try to save to clipboard then save it in the state if worked\n          const item = new ClipboardItem({\n            [type]: resolvePreviewUrl(),\n          })\n          navigator.clipboard.write([item]).then(onFinally).catch(onError)\n        } else {\n          navigator.clipboard.writeText(url).then(onFinally).catch(onError)\n        }\n        return\n      }}\n      text={t('share-url.menu-item.copy.text')}\n      icon={CopyIcon}\n    />\n  )\n}\n","import type {ChannelStatus} from '@repo/channels'\nimport {\n  CheckmarkIcon,\n  ChevronDownIcon,\n  DesktopIcon,\n  EditIcon,\n  MobileDeviceIcon,\n  PanelLeftIcon,\n  PublishIcon,\n  RefreshIcon,\n  ShareIcon,\n} from '@sanity/icons'\nimport {withoutSecretSearchParams} from '@sanity/preview-url-secret/without-secret-search-params'\nimport {\n  Box,\n  Button,\n  type ButtonTone,\n  Card,\n  Code,\n  Flex,\n  Label,\n  Menu,\n  MenuButton,\n  MenuItem,\n  Spinner,\n  Stack,\n  Switch,\n  Text,\n  Tooltip,\n  TooltipDelayGroupProvider,\n  usePrefersReducedMotion,\n} from '@sanity/ui'\nimport {AnimatePresence, motion, MotionConfig} from 'framer-motion'\nimport {\n  type ComponentType,\n  createElement,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {Hotkeys, useTranslation} from 'sanity'\n\nimport {ErrorCard} from '../components/ErrorCard'\nimport {MAX_TIME_TO_OVERLAYS_CONNECTION} from '../constants'\nimport {presentationLocaleNamespace} from '../i18n'\nimport {\n  ACTION_IFRAME_LOADED,\n  ACTION_IFRAME_RELOAD,\n  ACTION_PERSPECTIVE,\n  ACTION_VIEWPORT,\n  type DispatchPresentationAction,\n  type PresentationState,\n} from '../reducers/presentationReducer'\nimport type {PresentationParams} from '../types'\nimport {usePresentationTool} from '../usePresentationTool'\nimport {IFrame} from './IFrame'\nimport {PreviewLocationInput} from './PreviewLocationInput'\nimport {ShareUrlMenuItems} from './ShareUrlMenuItems'\n\nconst MotionFlex = motion(Flex)\n\nconst PERSPECTIVE_TITLE_KEY: Record<PresentationState['perspective'], string> = {\n  previewDrafts: 'preview-frame.perspective.previewDrafts.title',\n  published: 'preview-frame.perspective.published.title',\n}\n\nconst PERSPECTIVE_TONES: Record<PresentationState['perspective'], ButtonTone> = {\n  previewDrafts: 'caution',\n  published: 'positive',\n}\n\nconst PERSPECTIVE_ICONS: Record<PresentationState['perspective'], ComponentType> = {\n  previewDrafts: EditIcon,\n  published: PublishIcon,\n}\n\nexport interface PreviewFrameProps\n  extends Pick<PresentationState, 'iframe' | 'perspective' | 'viewport' | 'visualEditing'> {\n  dispatch: DispatchPresentationAction\n  initialUrl: URL\n  loadersConnection: ChannelStatus\n  navigatorEnabled: boolean\n  onPathChange: (nextPath: string) => void\n  onRefresh: (fallback: () => void) => void\n  openPopup: (url: string) => void\n  overlaysConnection: ChannelStatus\n  params: PresentationParams\n  targetOrigin: string\n  toggleNavigator?: () => void\n  toggleOverlay: () => void\n}\n\nexport const PreviewFrame = forwardRef<HTMLIFrameElement, PreviewFrameProps>(\n  function PreviewFrame(props, ref) {\n    const {\n      dispatch,\n      iframe,\n      initialUrl,\n      loadersConnection,\n      navigatorEnabled,\n      onPathChange,\n      onRefresh,\n      openPopup,\n      overlaysConnection,\n      params,\n      perspective,\n      targetOrigin,\n      toggleNavigator,\n      toggleOverlay,\n      viewport,\n      visualEditing: {overlaysEnabled},\n    } = props\n\n    const {t} = useTranslation(presentationLocaleNamespace)\n    const {devMode} = usePresentationTool()\n    const prefersReducedMotion = usePrefersReducedMotion()\n\n    const setDesktopMode = useCallback(\n      () => dispatch({type: ACTION_VIEWPORT, viewport: 'desktop'}),\n      [dispatch],\n    )\n    const setMobileMode = useCallback(\n      () => dispatch({type: ACTION_VIEWPORT, viewport: 'mobile'}),\n      [dispatch],\n    )\n    const loading = iframe.status === 'loading' || iframe.status === 'reloading'\n    const [timedOut, setTimedOut] = useState(false)\n    const refreshing = iframe.status === 'refreshing'\n    const [somethingIsWrong, setSomethingIsWrong] = useState(false)\n    const iframeIsBusy = loading || refreshing || overlaysConnection === 'connecting'\n\n    const previewLocationOrigin = useMemo(() => {\n      return targetOrigin === location.origin ? '' : targetOrigin\n    }, [targetOrigin])\n\n    const handleRefresh = useCallback(() => {\n      onRefresh(() => {\n        if (typeof ref === 'function' || !ref?.current) {\n          return\n        }\n        dispatch({type: ACTION_IFRAME_RELOAD})\n        // Funky way to reload an iframe without CORS issues\n        // eslint-disable-next-line no-self-assign\n        // ref.current.src = ref.current.src\n        ref.current.src = `${targetOrigin}${params.preview || '/'}`\n      })\n    }, [dispatch, onRefresh, params.preview, targetOrigin, ref])\n    const handleRetry = useCallback(() => {\n      if (typeof ref === 'function' || !ref?.current) {\n        return\n      }\n\n      ref.current.src = initialUrl.toString()\n\n      dispatch({type: ACTION_IFRAME_RELOAD})\n    }, [dispatch, ref, initialUrl])\n    const handleContinueAnyway = useCallback(() => {\n      setContinueAnyway(true)\n    }, [])\n\n    const [continueAnyway, setContinueAnyway] = useState(false)\n    const [showOverlaysConnectionStatus, setShowOverlaysConnectionState] = useState(false)\n    useEffect(() => {\n      if (loading || refreshing) {\n        return\n      }\n\n      if (overlaysConnection === 'connecting' || overlaysConnection === 'reconnecting') {\n        const timeout = setTimeout(() => {\n          setShowOverlaysConnectionState(true)\n        }, 1000)\n        return () => clearTimeout(timeout)\n      }\n      return\n    }, [overlaysConnection, loading, refreshing])\n\n    useEffect(() => {\n      if (loading || refreshing || !showOverlaysConnectionStatus) {\n        return\n      }\n      if (overlaysConnection === 'connected') {\n        setSomethingIsWrong(false)\n        setShowOverlaysConnectionState(false)\n        setTimedOut(false)\n        setContinueAnyway(false)\n      }\n      if (overlaysConnection === 'connecting') {\n        const timeout = setTimeout(() => {\n          setTimedOut(true)\n          // eslint-disable-next-line no-console\n          console.error(\n            `Unable to connect to visual editing. Make sure you've setup '@sanity/visual-editing' correctly`,\n          )\n        }, MAX_TIME_TO_OVERLAYS_CONNECTION)\n        return () => clearTimeout(timeout)\n      }\n      if (overlaysConnection === 'reconnecting') {\n        const timeout = setTimeout(() => {\n          setTimedOut(true)\n          setSomethingIsWrong(true)\n        }, MAX_TIME_TO_OVERLAYS_CONNECTION)\n        return () => clearTimeout(timeout)\n      }\n      if (overlaysConnection === 'disconnected') {\n        setSomethingIsWrong(true)\n      }\n      return\n    }, [loading, overlaysConnection, refreshing, showOverlaysConnectionStatus])\n\n    const previewLocationRoute = useMemo(() => {\n      const previewUrl = new URL(params.preview || '/', targetOrigin)\n      const {pathname, search} = withoutSecretSearchParams(previewUrl)\n\n      return `${pathname}${search}`\n    }, [params.preview, targetOrigin])\n\n    const onIFrameLoad = useCallback(() => {\n      dispatch({type: ACTION_IFRAME_LOADED})\n    }, [dispatch])\n\n    /**\n     * Ensure that clicking outside of menus and dialogs will close as focus shifts to the iframe\n     */\n    useEffect(() => {\n      if (typeof ref === 'function' || !ref?.current) {\n        return\n      }\n      const instance = ref.current\n      function handleBlur() {\n        if (instance !== document.activeElement) {\n          return\n        }\n\n        instance.dispatchEvent(new MouseEvent('mousedown', {bubbles: true, cancelable: true}))\n      }\n      window.addEventListener('blur', handleBlur)\n      return () => {\n        window.removeEventListener('blur', handleBlur)\n      }\n    }, [ref])\n\n    return (\n      <MotionConfig transition={prefersReducedMotion ? {duration: 0} : undefined}>\n        <TooltipDelayGroupProvider delay={1000}>\n          <Card flex=\"none\" padding={2} shadow={1} style={{position: 'relative'}}>\n            <Flex align=\"center\" style={{minHeight: 0}}>\n              {toggleNavigator && (\n                <Box flex=\"none\" marginRight={1} padding={1}>\n                  <Tooltip\n                    animate\n                    content={\n                      <Text size={1}>{t('preview-frame.navigator.toggle-button.tooltip')}</Text>\n                    }\n                    fallbackPlacements={['bottom-start']}\n                    padding={2}\n                    placement=\"bottom\"\n                    portal\n                  >\n                    <Button\n                      aria-label={t('preview-frame.navigator.toggle-button.aria-label')}\n                      fontSize={1}\n                      icon={PanelLeftIcon}\n                      mode=\"bleed\"\n                      onClick={toggleNavigator}\n                      padding={2}\n                      selected={navigatorEnabled}\n                    />\n                  </Tooltip>\n                </Box>\n              )}\n\n              <Tooltip\n                animate\n                content={\n                  <Flex align=\"center\" style={{whiteSpace: 'nowrap'}}>\n                    <Box padding={1}>\n                      <Text size={1}>\n                        {t('preview-frame.overlay.toggle-button.tooltip', {\n                          context: overlaysEnabled ? 'disable' : 'enable',\n                        })}\n                      </Text>\n                    </Box>\n                    <Box paddingY={1}>\n                      <Hotkeys keys={['Alt']} style={{marginTop: -4, marginBottom: -4}} />\n                    </Box>\n                  </Flex>\n                }\n                fallbackPlacements={['bottom-start']}\n                padding={1}\n                placement=\"bottom\"\n                portal\n              >\n                <Card\n                  as=\"label\"\n                  flex=\"none\"\n                  marginRight={1}\n                  padding={3}\n                  style={{\n                    lineHeight: 0,\n                    borderRadius: 999,\n                    userSelect: 'none',\n                  }}\n                  tone={overlaysEnabled ? 'transparent' : undefined}\n                >\n                  <Flex align=\"center\" gap={3}>\n                    <div style={{margin: -4}}>\n                      <Switch\n                        checked={overlaysEnabled}\n                        onChange={toggleOverlay}\n                        disabled={iframe.status === 'loading' || overlaysConnection !== 'connected'}\n                      />\n                    </div>\n                    <Box>\n                      <Text muted={!overlaysEnabled} size={1} weight=\"medium\">\n                        {t('preview-frame.overlay.toggle-button.text')}\n                      </Text>\n                    </Box>\n                  </Flex>\n                </Card>\n              </Tooltip>\n\n              <Box flex={1} marginX={1}>\n                <PreviewLocationInput\n                  prefix={\n                    <Box padding={1}>\n                      <Tooltip\n                        animate\n                        content={\n                          <Text size={1}>\n                            {iframe.status === 'loaded'\n                              ? t('preview-frame.refresh-button.tooltip')\n                              : t('preview-frame.status', {context: iframe.status})}\n                          </Text>\n                        }\n                        fallbackPlacements={['bottom-start']}\n                        padding={2}\n                        placement=\"bottom\"\n                        portal\n                      >\n                        <Button\n                          aria-label={t('preview-frame.refresh-button.aria-label')}\n                          fontSize={1}\n                          icon={RefreshIcon}\n                          mode=\"bleed\"\n                          loading={iframe.status === 'reloading' || iframe.status === 'refreshing'}\n                          onClick={handleRefresh}\n                          padding={2}\n                        />\n                      </Tooltip>\n                    </Box>\n                  }\n                  onChange={onPathChange}\n                  origin={previewLocationOrigin}\n                  suffix={\n                    <Box padding={1}>\n                      <MenuButton\n                        button={\n                          <Button\n                            fontSize={1}\n                            iconRight={ShareIcon}\n                            mode=\"bleed\"\n                            padding={2}\n                            space={2}\n                          />\n                        }\n                        id=\"location-menu\"\n                        menu={\n                          <Menu>\n                            <ShareUrlMenuItems\n                              initialUrl={initialUrl}\n                              openPopup={openPopup}\n                              previewLocationOrigin={previewLocationOrigin}\n                              previewLocationRoute={previewLocationRoute}\n                            />\n                          </Menu>\n                        }\n                        popover={{\n                          animate: true,\n                          constrainSize: true,\n                          placement: 'bottom',\n                          portal: true,\n                        }}\n                      />\n                    </Box>\n                  }\n                  value={previewLocationRoute}\n                />\n              </Box>\n\n              <Flex align=\"center\" flex=\"none\" gap={1} padding={1}>\n                <MenuButton\n                  button={\n                    <Button\n                      fontSize={1}\n                      iconRight={ChevronDownIcon}\n                      mode=\"bleed\"\n                      padding={2}\n                      space={2}\n                      text={t(\n                        PERSPECTIVE_TITLE_KEY[\n                          loadersConnection === 'connected' ? perspective : 'previewDrafts'\n                        ],\n                      )}\n                      loading={loadersConnection === 'reconnecting' && iframe.status !== 'loaded'}\n                      disabled={loadersConnection !== 'connected'}\n                    />\n                  }\n                  id=\"perspective-menu\"\n                  menu={\n                    <Menu style={{maxWidth: 240}}>\n                      <MenuItem\n                        fontSize={1}\n                        onClick={() =>\n                          dispatch({\n                            type: ACTION_PERSPECTIVE,\n                            perspective: 'previewDrafts',\n                          })\n                        }\n                        padding={3}\n                        pressed={perspective === 'previewDrafts'}\n                        tone={PERSPECTIVE_TONES.previewDrafts}\n                      >\n                        <Flex align=\"flex-start\" gap={3}>\n                          <Box flex=\"none\">\n                            <Text size={1}>{createElement(PERSPECTIVE_ICONS.previewDrafts)}</Text>\n                          </Box>\n                          <Stack flex={1} space={2}>\n                            <Text size={1} weight=\"medium\">\n                              {t(PERSPECTIVE_TITLE_KEY['previewDrafts'])}\n                            </Text>\n                            <Text muted size={1}>\n                              {t('preview-frame.perspective.previewDrafts.text')}\n                            </Text>\n                          </Stack>\n                          <Box flex=\"none\">\n                            <Text\n                              muted\n                              size={1}\n                              style={{\n                                opacity: perspective === 'previewDrafts' ? 1 : 0,\n                              }}\n                            >\n                              <CheckmarkIcon />\n                            </Text>\n                          </Box>\n                        </Flex>\n                      </MenuItem>\n                      <MenuItem\n                        fontSize={1}\n                        onClick={() =>\n                          dispatch({\n                            type: ACTION_PERSPECTIVE,\n                            perspective: 'published',\n                          })\n                        }\n                        padding={3}\n                        pressed={perspective === 'published'}\n                        tone={PERSPECTIVE_TONES.published}\n                      >\n                        <Flex align=\"flex-start\" gap={3}>\n                          <Box flex=\"none\">\n                            <Text size={1}>{createElement(PERSPECTIVE_ICONS.published)}</Text>\n                          </Box>\n                          <Stack flex={1} space={2}>\n                            <Text size={1} weight=\"medium\">\n                              {t(PERSPECTIVE_TITLE_KEY['published'])}\n                            </Text>\n                            <Text muted size={1}>\n                              {t('preview-frame.perspective.published.text')}\n                            </Text>\n                          </Stack>\n                          <Box flex=\"none\">\n                            <Text\n                              muted\n                              size={1}\n                              style={{\n                                opacity: perspective === 'published' ? 1 : 0,\n                              }}\n                            >\n                              <CheckmarkIcon />\n                            </Text>\n                          </Box>\n                        </Flex>\n                      </MenuItem>\n                    </Menu>\n                  }\n                  popover={{\n                    animate: true,\n                    constrainSize: true,\n                    placement: 'bottom',\n                    portal: true,\n                  }}\n                />\n              </Flex>\n\n              <Flex align=\"center\" flex=\"none\" gap={1} padding={1}>\n                <Tooltip\n                  animate\n                  content={<Text size={1}>{t('preview-frame.viewport-full-button.tooltip')}</Text>}\n                  fallbackPlacements={['bottom-start']}\n                  padding={2}\n                  placement=\"bottom\"\n                  portal\n                >\n                  <Button\n                    aria-label={t('preview-frame.viewport-full-button.aria-label')}\n                    fontSize={1}\n                    icon={DesktopIcon}\n                    mode=\"bleed\"\n                    onClick={setDesktopMode}\n                    padding={2}\n                    selected={viewport === 'desktop'}\n                  />\n                </Tooltip>\n                <Tooltip\n                  animate\n                  content={\n                    <Text size={1}>{t('preview-frame.viewport-narrow-button.tooltip')}</Text>\n                  }\n                  padding={2}\n                  placement=\"bottom\"\n                  portal\n                >\n                  <Button\n                    aria-label={t('preview-frame.viewport-narrow-button.aria-label')}\n                    fontSize={1}\n                    icon={MobileDeviceIcon}\n                    mode=\"bleed\"\n                    onClick={setMobileMode}\n                    padding={2}\n                    selected={viewport === 'mobile'}\n                  />\n                </Tooltip>\n              </Flex>\n            </Flex>\n          </Card>\n\n          <Card flex={1} tone=\"transparent\">\n            <Flex\n              align=\"center\"\n              height=\"fill\"\n              justify=\"center\"\n              padding={viewport === 'desktop' ? 0 : 2}\n              sizing=\"border\"\n              style={{\n                position: 'relative',\n                cursor: iframeIsBusy ? 'wait' : undefined,\n              }}\n            >\n              <AnimatePresence>\n                {!somethingIsWrong &&\n                !loading &&\n                !refreshing &&\n                showOverlaysConnectionStatus &&\n                !continueAnyway ? (\n                  <MotionFlex\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={spinnerVariants}\n                    justify=\"center\"\n                    align=\"center\"\n                    style={{\n                      inset: '0',\n                      position: 'absolute',\n                      backdropFilter: timedOut\n                        ? 'blur(16px) saturate(0.5) grayscale(0.5)'\n                        : 'blur(2px)',\n                      ['transition' as string]: 'backdrop-filter 0.2s ease-in-out',\n                      // @TODO Because of Safari we have to do this\n                      WebkitBackdropFilter: timedOut\n                        ? 'blur(16px) saturate(0.5) grayscale(0.5)'\n                        : 'blur(2px)',\n                      WebkitTransition: '-webkit-backdrop-filter 0.2s ease-in-out',\n                      zIndex: 1,\n                    }}\n                  >\n                    <Flex\n                      style={{...sizes[viewport]}}\n                      justify=\"center\"\n                      align=\"center\"\n                      direction=\"column\"\n                      gap={4}\n                    >\n                      {timedOut && (\n                        <Button\n                          disabled\n                          fontSize={1}\n                          mode=\"ghost\"\n                          text={t('preview-frame.continue-button.text')}\n                          style={{opacity: 0}}\n                        />\n                      )}\n                      <Card\n                        radius={2}\n                        tone={timedOut ? 'caution' : 'inherit'}\n                        padding={4}\n                        shadow={1}\n                      >\n                        <Flex justify=\"center\" align=\"center\" direction=\"column\" gap={4}>\n                          <Spinner muted />\n                          <Text muted size={1}>\n                            {timedOut\n                              ? t('preview-frame.status', {context: 'timeout'})\n                              : t('preview-frame.status', {context: 'connecting'})}\n                          </Text>\n                        </Flex>\n                      </Card>\n                      {timedOut && (\n                        <Button\n                          fontSize={1}\n                          // mode=\"ghost\"\n                          tone=\"critical\"\n                          onClick={handleContinueAnyway}\n                          text={t('preview-frame.continue-button.text')}\n                        />\n                      )}\n                    </Flex>\n                  </MotionFlex>\n                ) : (loading ||\n                    (overlaysConnection === 'connecting' && iframe.status !== 'refreshing')) &&\n                  !continueAnyway ? (\n                  <MotionFlex\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={spinnerVariants}\n                    justify=\"center\"\n                    align=\"center\"\n                    style={{\n                      inset: '0',\n                      position: 'absolute',\n                      // boxShadow: '0 0 0 1px var(--card-shadow-outline-color)',\n                    }}\n                  >\n                    <Flex\n                      style={{...sizes[viewport]}}\n                      justify=\"center\"\n                      align=\"center\"\n                      direction=\"column\"\n                      gap={4}\n                    >\n                      <Spinner muted />\n                      <Text muted size={1}>\n                        {t('preview-frame.status', {context: 'loading'})}\n                      </Text>\n                    </Flex>\n                  </MotionFlex>\n                ) : somethingIsWrong && !continueAnyway ? (\n                  <MotionFlex\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={errorVariants}\n                    justify=\"center\"\n                    align=\"center\"\n                    style={{\n                      background: 'var(--card-bg-color)',\n                      inset: '0',\n                      position: 'absolute',\n                      borderTop: '1px solid transparent',\n                      boxShadow: '0 0 0 1px var(--card-border-color)',\n                    }}\n                  >\n                    <ErrorCard\n                      flex={1}\n                      message={t('preview-frame.connection.error.text')}\n                      onRetry={handleRetry}\n                      onContinueAnyway={handleContinueAnyway}\n                    >\n                      {devMode && (\n                        <>\n                          {overlaysConnection !== 'connected' && (\n                            <Card padding={3} radius={2} tone=\"critical\">\n                              <Stack space={3}>\n                                <Label muted size={0}>\n                                  {t('preview-frame.overlay.connection-status.label')}\n                                </Label>\n                                <Code size={1}>\n                                  {t('channel.status', {context: overlaysConnection})}\n                                </Code>\n                              </Stack>\n                            </Card>\n                          )}\n\n                          {loadersConnection !== 'connected' && (\n                            <Card padding={3} radius={2} tone=\"critical\">\n                              <Stack space={3}>\n                                <Label muted size={0}>\n                                  {t('preview-frame.loader.connection-status.label')}\n                                </Label>\n                                <Code size={1}>\n                                  {t('channel.status', {context: loadersConnection})}\n                                </Code>\n                              </Stack>\n                            </Card>\n                          )}\n                        </>\n                      )}\n                    </ErrorCard>\n                  </MotionFlex>\n                ) : null}\n              </AnimatePresence>\n              <IFrame\n                ref={ref}\n                style={{\n                  pointerEvents:\n                    (loading ||\n                      (overlaysConnection === 'connecting' && iframe.status !== 'refreshing')) &&\n                    !continueAnyway\n                      ? 'none'\n                      : 'auto',\n                  boxShadow: '0 0 0 1px var(--card-border-color)',\n                  borderTop: '1px solid transparent',\n                }}\n                src={initialUrl.toString()}\n                initial={['background']}\n                variants={iframeVariants}\n                animate={[\n                  (loading ||\n                    (overlaysConnection === 'connecting' && iframe.status !== 'refreshing')) &&\n                  !continueAnyway\n                    ? 'background'\n                    : 'active',\n                  loading ? 'reloading' : 'idle',\n                  viewport,\n                  showOverlaysConnectionStatus && !continueAnyway ? 'timedOut' : '',\n                ]}\n                onLoad={onIFrameLoad}\n              />\n            </Flex>\n          </Card>\n        </TooltipDelayGroupProvider>\n      </MotionConfig>\n    )\n  },\n)\n\nconst sizes = {\n  desktop: {\n    width: '100%',\n    height: '100%',\n  },\n  mobile: {\n    width: 375,\n    height: 650,\n  },\n}\n\nconst spinnerVariants = {\n  initial: {opacity: 1},\n  animate: {opacity: [0, 0, 1]},\n  exit: {opacity: [1, 0, 0]},\n}\n\nconst errorVariants = {\n  initial: {opacity: 1},\n  animate: {opacity: [0, 0, 1]},\n  exit: {opacity: [1, 0, 0]},\n}\n\nconst iframeVariants = {\n  desktop: {\n    ...sizes.desktop,\n    boxShadow: '0 0 0 0px var(--card-border-color)',\n  },\n  mobile: {\n    ...sizes.mobile,\n    boxShadow: '0 0 0 1px var(--card-border-color)',\n  },\n  background: {\n    opacity: 0,\n    scale: 1,\n  },\n  idle: {\n    scale: 1,\n  },\n  reloading: {\n    scale: [1, 1, 1, 0.98],\n  },\n  active: {\n    opacity: [0, 0, 1],\n    scale: 1,\n  },\n  timedOut: {\n    opacity: [0, 0, 1],\n  },\n}\n","import type {ClientPerspective} from '@sanity/client'\nimport isEqual from 'fast-deep-equal'\nimport {type MutableRefObject, useCallback, useMemo, useRef, useState} from 'react'\n\nimport type {PresentationState} from './reducers/presentationReducer'\nimport type {FrameState} from './types'\n\nexport type DocumentOnPage = {\n  _id: string\n  _type: string\n}\n\ntype DocumentCache = Record<string, DocumentOnPage>\ntype KeyedDocumentCache = Record<string, DocumentCache>\n\nlet warnedAboutCrossDatasetReference = false\n\nexport function useDocumentsOnPage(\n  perspective: PresentationState['perspective'],\n  frameStateRef: MutableRefObject<FrameState>,\n): [\n  DocumentOnPage[],\n  (key: string, perspective: PresentationState['perspective'], state: DocumentOnPage[]) => void,\n] {\n  if (perspective !== 'published' && perspective !== 'previewDrafts') {\n    throw new Error(`Invalid perspective: ${perspective}`)\n  }\n\n  const [published, setPublished] = useState<KeyedDocumentCache>({})\n  const [previewDrafts, setPreviewDrafts] = useState<KeyedDocumentCache>({})\n\n  // Used to compare the frame url with its value when the cache was last updated\n  // If the url has changed, the entire cache is replaced\n  const urlRef = useRef<string | undefined>('')\n\n  const setDocumentsOnPage = useCallback(\n    (key: string, perspective: ClientPerspective, sourceDocuments: DocumentOnPage[] = []) => {\n      const documents = sourceDocuments.filter((sourceDocument) => {\n        if ('_projectId' in sourceDocument && sourceDocument._projectId) {\n          // @TODO Handle cross dataset references\n          if (!warnedAboutCrossDatasetReference) {\n            // eslint-disable-next-line no-console\n            console.warn(\n              'Cross dataset references are not supported yet, ignoring source document',\n              sourceDocument,\n            )\n            warnedAboutCrossDatasetReference = true\n          }\n          return false\n        }\n        return sourceDocument\n      })\n\n      const setCache = perspective === 'published' ? setPublished : setPreviewDrafts\n\n      setCache((cache) => {\n        // Create the `next` documents, dedupe by `_id`\n        const next: Record<string, DocumentOnPage> = {}\n        for (const document of documents) {\n          next[document._id] = document\n        }\n\n        // If the frame url has changed, replace the entire cache with the next documents\n        if (urlRef.current !== frameStateRef.current.url) {\n          urlRef.current = frameStateRef.current.url\n          return {[key]: next}\n        }\n\n        // If the keyed cache has changed, return the entire cache and replace the keyed part\n        const prev = cache[key]\n        if (!isEqual(prev, next)) {\n          return {...cache, [key]: next}\n        }\n\n        // Otherwise return the entire cache as is\n        return cache\n      })\n    },\n    [frameStateRef],\n  )\n\n  const documentsOnPage = useMemo(() => {\n    const keyedCache = perspective === 'published' ? published : previewDrafts\n    const uniqueDocuments = Object.values(keyedCache).reduce((acc, cache) => {\n      Object.values(cache).forEach((doc) => {\n        acc[doc._id] = doc\n      })\n      return acc\n    }, {})\n\n    return Object.values(uniqueDocuments)\n  }, [perspective, previewDrafts, published])\n\n  return [documentsOnPage, setDocumentsOnPage]\n}\n","import type {ResponseQueryOptions} from '@sanity/client'\nimport {match, type Path} from 'path-to-regexp'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {useClient} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {API_VERSION} from './constants'\nimport {useDocumentStore} from './internals'\nimport type {\n  DocumentResolver,\n  DocumentResolverContext,\n  MainDocument,\n  MainDocumentState,\n  PresentationNavigate,\n  PreviewUrlOption,\n} from './types'\n\n// Helper function to \"unwrap\" a result when it is either explicitly provided or\n// returned as the result of a passed function\nfunction fnOrObj<T, U>(arg: T | ((ctx: U) => T), context: U): T {\n  return arg instanceof Function ? arg(context) : arg\n}\n\nfunction getQueryFromResult(\n  resolver: DocumentResolver,\n  context: DocumentResolverContext,\n): string | undefined {\n  if (resolver.resolve) {\n    const filter = resolver.resolve(context)?.filter\n    return filter ? `*[${filter}][0]{_id, _type}` : undefined\n  }\n\n  if ('type' in resolver) {\n    return `*[_type == \"${resolver.type}\"][0]{_id, _type}`\n  }\n\n  return `*[${fnOrObj(resolver.filter, context)}][0]{_id, _type}`\n}\n\nfunction getParamsFromResult(\n  resolver: DocumentResolver,\n  context: DocumentResolverContext,\n): Record<string, string> {\n  if (resolver.resolve) {\n    return resolver.resolve(context)?.params ?? context.params\n  }\n\n  if ('type' in resolver) {\n    return {}\n  }\n\n  return fnOrObj(resolver.params, context) ?? context.params\n}\n\nexport function getRouteContext(route: Path, url: URL): DocumentResolverContext | undefined {\n  const routes = Array.isArray(route) ? route : [route]\n\n  for (route of routes) {\n    let origin: DocumentResolverContext['origin'] = undefined\n    let path = route\n\n    // Handle absolute URLs\n    if (typeof route === 'string') {\n      try {\n        const absolute = new URL(route)\n        origin = absolute.origin\n        path = absolute.pathname\n      } catch {\n        // Ignore, as we assume a relative path\n      }\n    }\n\n    // If an origin has been explicitly provided, check that it matches\n    if (origin && url.origin !== origin) continue\n\n    try {\n      const matcher = match<Record<string, string>>(path, {decode: decodeURIComponent})\n      const result = matcher(url.pathname)\n      if (result) {\n        const {params, path} = result\n        return {origin, params, path}\n      }\n    } catch (e) {\n      throw new Error(`\"${route}\" is not a valid route pattern`)\n    }\n  }\n  return undefined\n}\n\nexport function useMainDocument(props: {\n  navigate?: PresentationNavigate\n  path?: string\n  previewUrl?: PreviewUrlOption\n  resolvers?: DocumentResolver[]\n}): MainDocumentState | undefined {\n  const {navigate, resolvers = [], path, previewUrl} = props\n\n  const {state: routerState} = useRouter()\n  const documentStore = useDocumentStore()\n  const client = useClient({apiVersion: API_VERSION})\n\n  const [mainDocumentState, setMainDocumentState] = useState<MainDocumentState | undefined>(\n    undefined,\n  )\n  const mainDocumentIdRef = useRef<string | undefined>(undefined)\n\n  const url = useMemo(() => {\n    const relativeUrl =\n      path || routerState._searchParams?.find(([key]) => key === 'preview')?.[1] || ''\n\n    const base =\n      typeof previewUrl === 'string'\n        ? previewUrl\n        : typeof previewUrl === 'object'\n          ? previewUrl?.origin || location.origin\n          : location.origin\n\n    return new URL(relativeUrl, base)\n  }, [path, previewUrl, routerState._searchParams])\n\n  const clearState = useCallback(() => {\n    setMainDocumentState(undefined)\n    mainDocumentIdRef.current = undefined\n  }, [])\n\n  useEffect(() => {\n    if (resolvers.length && url) {\n      let result:\n        | {\n            context: DocumentResolverContext\n            resolver: DocumentResolver\n          }\n        | undefined\n\n      for (const resolver of resolvers) {\n        const context = getRouteContext(resolver.route, url)\n        if (context) {\n          result = {context, resolver}\n          break\n        }\n      }\n\n      if (result) {\n        const query = getQueryFromResult(result.resolver, result.context)\n        const params = getParamsFromResult(result.resolver, result.context)\n\n        if (query) {\n          const controller = new AbortController()\n          const options: ResponseQueryOptions = {\n            perspective: 'previewDrafts',\n            signal: controller.signal,\n          }\n\n          client\n            .fetch<MainDocument | undefined>(query, params, options)\n            .then((doc) => {\n              if (!doc || mainDocumentIdRef.current !== doc._id) {\n                setMainDocumentState({\n                  document: doc,\n                  path: url.pathname,\n                })\n                navigate?.({\n                  id: doc?._id,\n                  type: doc?._type,\n                })\n                mainDocumentIdRef.current = doc?._id\n              }\n            })\n            .catch((e) => {\n              if (e instanceof Error && e.name === 'AbortError') return\n              setMainDocumentState({document: undefined, path: url.pathname})\n              mainDocumentIdRef.current = undefined\n            })\n          return () => {\n            controller.abort()\n          }\n        }\n      }\n    }\n    clearState()\n    return undefined\n  }, [client, clearState, documentStore, navigate, resolvers, url])\n\n  return mainDocumentState\n}\n","import {urlStringToPath} from '@repo/visual-editing-helpers'\nimport {studioPath} from '@sanity/client/csm'\n\nimport type {PresentationStateParams} from '../types'\n\nexport function parseId(rawId: string | undefined): string | undefined {\n  if (rawId === undefined) {\n    return undefined\n  }\n\n  const segments = decodeURIComponent(rawId)?.split('.')\n\n  if (segments[0] === 'drafts') {\n    segments.shift()\n  }\n\n  return segments.join('.')\n}\n\nexport function parsePath(rawPath: string | undefined): string | undefined {\n  if (rawPath === undefined) {\n    return undefined\n  }\n\n  return studioPath.toString(urlStringToPath(decodeURIComponent(rawPath)))\n}\n\nexport function parseRouterState(state: PresentationStateParams): PresentationStateParams {\n  return {\n    id: parseId(state.id),\n    path: parsePath(state.path),\n    type: state.type,\n  }\n}\n","import {type MutableRefObject, useCallback, useEffect, useMemo, useRef} from 'react'\nimport type {RouterContextValue, RouterState, SearchParam} from 'sanity/router'\n\nimport {getPublishedId} from './internals'\nimport {parseRouterState} from './lib/parse'\nimport type {\n  FrameState,\n  PresentationNavigate,\n  PresentationParams,\n  PresentationSearchParams,\n  PresentationStateParams,\n  StructureDocumentPaneParams,\n} from './types'\n\nfunction pruneObject<T extends RouterState | PresentationParams>(obj: T): T {\n  return Object.fromEntries(\n    Object.entries(obj).filter(\n      ([, value]) => value !== undefined && value !== '' && value !== null,\n    ),\n  ) as T\n}\n\nexport function useParams({\n  initialPreviewUrl,\n  routerNavigate,\n  routerState,\n  routerSearchParams,\n  frameStateRef,\n}: {\n  initialPreviewUrl: URL\n  routerNavigate: RouterContextValue['navigate']\n  routerState: RouterState & PresentationStateParams\n  routerSearchParams: {\n    [k: string]: string\n  }\n  frameStateRef: MutableRefObject<FrameState>\n}): {\n  navigate: PresentationNavigate\n  params: PresentationParams\n  structureParams: StructureDocumentPaneParams\n} {\n  const params = useMemo<PresentationParams>(() => {\n    const {id, path, type} = parseRouterState(routerState)\n\n    return {\n      id,\n      type,\n      path,\n      preview:\n        routerSearchParams['preview'] || `${initialPreviewUrl.pathname}${initialPreviewUrl.search}`,\n      perspective: routerSearchParams['perspective'],\n      viewport: routerSearchParams['viewport'],\n      inspect: routerSearchParams['inspect'],\n      rev: routerSearchParams['rev'],\n      prefersLatestPublished: routerSearchParams['prefersLatestPublished'],\n      since: routerSearchParams['since'],\n      template: routerSearchParams['template'],\n      templateParams: routerSearchParams['templateParams'],\n      view: routerSearchParams['view'],\n      // assist\n      pathKey: routerSearchParams['pathKey'],\n      instruction: routerSearchParams['instruction'],\n      // comments\n      comment: routerSearchParams['comment'],\n    }\n  }, [routerState, routerSearchParams, initialPreviewUrl])\n\n  const structureParams = useMemo<StructureDocumentPaneParams>(() => {\n    const pruned = pruneObject({\n      inspect: params.inspect,\n      path: params.path,\n      rev: params.rev,\n      prefersLatestPublished: params.prefersLatestPublished,\n      since: params.since,\n      template: params.template,\n      templateParams: params.templateParams,\n      view: params.view,\n      // assist\n      pathKey: params.pathKey,\n      instruction: params.instruction,\n      // comments\n      comment: params.comment,\n    })\n    return pruned\n  }, [\n    params.comment,\n    params.inspect,\n    params.instruction,\n    params.path,\n    params.pathKey,\n    params.prefersLatestPublished,\n    params.rev,\n    params.since,\n    params.template,\n    params.templateParams,\n    params.view,\n  ])\n\n  const routerStateRef = useRef(routerState)\n\n  useEffect(() => {\n    routerStateRef.current = routerState\n  }, [routerState])\n\n  const navigate = useCallback<PresentationNavigate>(\n    (nextState, nextSearchState = {}, forceReplace) => {\n      // Force navigation to use published IDs only\n      if (nextState.id) nextState.id = getPublishedId(nextState.id)\n\n      // Extract type, id and path as 'routerState'\n      const {_searchParams: routerSearchParams, ...routerState} = routerStateRef.current\n\n      // Convert array of search params to an object\n      const routerSearchState = (routerSearchParams || []).reduce(\n        (acc, [key, value]) => ((acc[key as keyof PresentationSearchParams] = value), acc),\n        {} as PresentationSearchParams,\n      )\n\n      // Merge routerState and incoming state\n      const state: RouterState = pruneObject({\n        ...routerState,\n        ...nextState,\n      })\n\n      // Merge routerSearchState and incoming searchState\n      const searchState = pruneObject({\n        ...routerSearchState,\n        ...nextSearchState,\n      })\n\n      // If the document has changed, clear the template and templateParams\n      if (routerState.id !== state['id']) {\n        delete searchState.template\n        delete searchState.templateParams\n      }\n\n      state._searchParams = Object.entries(searchState).reduce(\n        (acc, [key, value]) => [...acc, [key, value]],\n        [] as SearchParam[],\n      )\n\n      const replace = forceReplace ?? searchState.preview === frameStateRef.current.url\n\n      routerNavigate(state, {replace})\n    },\n    [routerNavigate, frameStateRef],\n  )\n\n  return {\n    structureParams,\n    navigate,\n    params,\n  }\n}\n","import {createPreviewSecret} from '@sanity/preview-url-secret/create-secret'\nimport {definePreviewUrl} from '@sanity/preview-url-secret/define-preview-url'\nimport {startTransition, useEffect, useMemo, useRef, useState} from 'react'\nimport {type SanityClient, useClient, useCurrentUser} from 'sanity'\nimport {suspend} from 'suspend-react'\n\nimport {API_VERSION} from './constants'\nimport {useActiveWorkspace} from './internals'\nimport type {PreviewUrlOption} from './types'\n\nexport function usePreviewUrl(\n  previewUrl: PreviewUrlOption,\n  toolName: string,\n  previewSearchParam: string | null,\n): URL {\n  const client = useClient({apiVersion: API_VERSION})\n  const workspace = useActiveWorkspace()\n  const basePath = workspace?.activeWorkspace?.basePath || '/'\n  const workspaceName = workspace?.activeWorkspace?.name || 'default'\n  const deps = useSuspendCacheKeys(toolName, basePath, workspaceName, previewSearchParam)\n  const previewUrlSecret = usePreviewUrlSecret(\n    typeof previewUrl === 'object' || typeof previewUrl === 'function',\n    deps,\n  )\n\n  return suspend(async () => {\n    if (typeof previewUrl === 'string') {\n      const resolvedUrl = new URL(previewUrl, location.origin)\n      let resultUrl = resolvedUrl\n      try {\n        if (previewSearchParam) {\n          const restoredUrl = new URL(previewSearchParam, resolvedUrl)\n          if (restoredUrl.origin === resolvedUrl.origin) {\n            resultUrl = restoredUrl\n          }\n        } else if (document.referrer) {\n          const referrerUrl = new URL(document.referrer)\n          if (referrerUrl.origin === resolvedUrl.origin) {\n            resultUrl = referrerUrl\n          }\n        }\n      } catch {\n        // ignore\n      }\n      // Prevent infinite recursion\n      if (\n        location.origin === resultUrl.origin &&\n        (resultUrl.pathname.startsWith(`${basePath}/`) || resultUrl.pathname === basePath)\n      ) {\n        return resolvedUrl\n      }\n      return resultUrl\n    }\n    const resolvePreviewUrl =\n      typeof previewUrl === 'object' ? definePreviewUrl<SanityClient>(previewUrl) : previewUrl\n    const resolvedUrl = await resolvePreviewUrl({\n      client,\n      previewUrlSecret: previewUrlSecret!,\n      previewSearchParam,\n      referrer: typeof document === 'undefined' ? null : document.referrer,\n      studioBasePath: basePath,\n    })\n    return new URL(resolvedUrl, location.origin)\n  }, [...deps, previewUrlSecret]) satisfies URL\n}\n\n// https://github.com/pmndrs/suspend-react?tab=readme-ov-file#making-cache-keys-unique\nconst resolveUUID = Symbol()\n\nfunction useSuspendCacheKeys(\n  toolName: string,\n  basePath: string,\n  workspaceName: string,\n  previewSearchParam: string | null,\n) {\n  // Allow busting the cache when the Presentation Tool is reloaded, without causing it to suspend on every render that changes the `preview` parameter\n  const [cachedPreviewSearchParam, setCachedPreviewSearchParam] = useState(\n    () => previewSearchParam || '',\n  )\n  const timeoutRef = useRef(0)\n  useEffect(() => {\n    if (cachedPreviewSearchParam && previewSearchParam) {\n      // Handle resets, like when the Presentation Tool is clicked in the navbar\n      window.clearTimeout(timeoutRef.current)\n      return () => {\n        timeoutRef.current = window.setTimeout(() => {\n          setCachedPreviewSearchParam('')\n        }, 100)\n      }\n    }\n    return\n  }, [cachedPreviewSearchParam, previewSearchParam])\n\n  const currentUser = useCurrentUser()\n  return useMemo(\n    () => [\n      // Cache based on a few specific conditions\n      '@sanity/presentation',\n      basePath,\n      workspaceName,\n      toolName,\n      currentUser?.id,\n      resolveUUID,\n      cachedPreviewSearchParam,\n    ],\n    [basePath, currentUser?.id, toolName, workspaceName, cachedPreviewSearchParam],\n  )\n}\n\nfunction usePreviewUrlSecret(enabled: boolean, deps: (string | symbol | undefined)[]) {\n  const client = useClient({apiVersion: API_VERSION})\n  const currentUser = useCurrentUser()\n  const [secretLastExpiredAt, setSecretLastExpiredAt] = useState<string>('')\n\n  const previewUrlSecret = enabled\n    ? suspend(async () => {\n        return await createPreviewSecret(\n          client,\n          '@sanity/presentation',\n          typeof window === 'undefined' ? '' : location.href,\n          currentUser?.id,\n        )\n      }, [...deps, secretLastExpiredAt])\n    : null\n\n  useEffect(() => {\n    if (!previewUrlSecret) return\n    const timeout = setTimeout(() => {\n      startTransition(() => setSecretLastExpiredAt(previewUrlSecret.expiresAt.toString()))\n    }, previewUrlSecret.expiresAt.getTime() - Date.now())\n    return () => clearTimeout(timeout)\n  }, [previewUrlSecret])\n\n  return previewUrlSecret?.secret || null\n}\n","import {type ChannelsController, type ChannelStatus, createChannelsController} from '@repo/channels'\nimport {\n  getQueryCacheKey,\n  isAltKey,\n  isHotkey,\n  type LoaderMsg,\n  type OverlayMsg,\n  type PresentationMsg,\n  type PreviewKitMsg,\n  type VisualEditingConnectionIds,\n  type VisualEditingMsg,\n} from '@repo/visual-editing-helpers'\nimport {studioPath} from '@sanity/client/csm'\nimport {BoundaryElementProvider, Flex} from '@sanity/ui'\nimport {\n  lazy,\n  type ReactElement,\n  Suspense,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react'\nimport {type Path, type SanityDocument, type Tool, useDataset, useProjectId} from 'sanity'\nimport {type RouterContextValue, useRouter} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  DEFAULT_TOOL_NAME,\n  EDIT_INTENT_MODE,\n  MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n} from './constants'\nimport {type CommentIntentGetter, useUnique, useWorkspace} from './internals'\nimport {debounce} from './lib/debounce'\nimport {Panel} from './panels/Panel'\nimport {Panels} from './panels/Panels'\nimport {PresentationContent} from './PresentationContent'\nimport {PresentationNavigateProvider} from './PresentationNavigateProvider'\nimport {usePresentationNavigator} from './PresentationNavigator'\nimport {PresentationParamsProvider} from './PresentationParamsProvider'\nimport {PresentationProvider} from './PresentationProvider'\nimport {PreviewFrame} from './preview/PreviewFrame'\nimport {\n  ACTION_IFRAME_LOADED,\n  ACTION_IFRAME_REFRESH,\n  ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE,\n  presentationReducer,\n  presentationReducerInit,\n} from './reducers/presentationReducer'\nimport type {\n  FrameState,\n  LiveQueriesState,\n  LiveQueriesStateValue,\n  PresentationNavigate,\n  PresentationPluginOptions,\n  PresentationStateParams,\n  StructureDocumentPaneParams,\n} from './types'\nimport {useDocumentsOnPage} from './useDocumentsOnPage'\nimport {useMainDocument} from './useMainDocument'\nimport {useParams} from './useParams'\nimport {usePreviewUrl} from './usePreviewUrl'\n\nconst LoaderQueries = lazy(() => import('./loader/LoaderQueries'))\nconst PostMessageRefreshMutations = lazy(() => import('./editor/PostMessageRefreshMutations'))\n\nconst Container = styled(Flex)`\n  overflow-x: auto;\n`\n\nexport default function PresentationTool(props: {\n  tool: Tool<PresentationPluginOptions>\n}): ReactElement {\n  const {previewUrl: _previewUrl, components} = props.tool.options ?? {}\n  const name = props.tool.name || DEFAULT_TOOL_NAME\n  const {unstable_navigator} = components || {}\n\n  const {navigate: routerNavigate, state: routerState} = useRouter() as RouterContextValue & {\n    state: PresentationStateParams\n  }\n  const routerSearchParams = useUnique(Object.fromEntries(routerState._searchParams || []))\n\n  const initialPreviewUrl = usePreviewUrl(\n    _previewUrl || '/',\n    name,\n    routerSearchParams['preview'] || null,\n  )\n\n  const [devMode] = useState(() => {\n    const option = props.tool.options?.devMode\n\n    if (typeof option === 'function') return option()\n    if (typeof option === 'boolean') return option\n\n    return typeof window !== 'undefined' && window.location.hostname === 'localhost'\n  })\n\n  const targetOrigin = useMemo(() => {\n    return initialPreviewUrl.origin\n  }, [initialPreviewUrl.origin])\n\n  const iframeRef = useRef<HTMLIFrameElement>(null)\n\n  const [channel, setChannel] =\n    useState<ChannelsController<VisualEditingConnectionIds, PresentationMsg | LoaderMsg>>()\n\n  const [liveQueries, setLiveQueries] = useState<LiveQueriesState>({})\n\n  const frameStateRef = useRef<FrameState>({\n    title: undefined,\n    url: undefined,\n  })\n\n  const {\n    navigate: _navigate,\n    params,\n    structureParams,\n  } = useParams({\n    initialPreviewUrl,\n    routerNavigate,\n    routerState,\n    routerSearchParams,\n    frameStateRef,\n  })\n\n  // Most navigation events should be debounced, so use this unless explicitly needed\n  const navigate = useMemo(() => debounce<PresentationNavigate>(_navigate, 50), [_navigate])\n\n  const [state, dispatch] = useReducer(\n    presentationReducer,\n    {\n      perspective: params.perspective,\n      viewport: params.viewport,\n    },\n    presentationReducerInit,\n  )\n\n  const [documentsOnPage, setDocumentsOnPage] = useDocumentsOnPage(state.perspective, frameStateRef)\n\n  const projectId = useProjectId()\n  const dataset = useDataset()\n\n  const mainDocumentState = useMainDocument({\n    resolvers: props.tool.options?.resolve?.mainDocuments,\n    previewUrl: props.tool.options?.previewUrl,\n    path: params.preview,\n    // Prevent flash of content by using immediate navigation\n    navigate: _navigate,\n  })\n\n  // Update the perspective and viewport when the param changes\n  useEffect(() => {\n    if (state.perspective !== params.perspective || state.viewport !== params.viewport) {\n      navigate(\n        {},\n        {\n          perspective: state.perspective === 'previewDrafts' ? undefined : state.perspective,\n          viewport: state.viewport === 'desktop' ? undefined : state.viewport,\n        },\n      )\n    }\n  }, [\n    params.perspective,\n    state.perspective,\n    navigate,\n    state.viewport,\n    params.viewport,\n    params.rev,\n    params.prefersLatestPublished,\n  ])\n\n  const [overlaysConnection, setOverlaysConnection] = useState<ChannelStatus>('connecting')\n  const [loadersConnection, setLoadersConnection] = useState<ChannelStatus>('connecting')\n  const [previewKitConnection, setPreviewKitConnection] = useState<ChannelStatus>('connecting')\n\n  const [popups] = useState<Set<Window>>(() => new Set())\n  const handleOpenPopup = useCallback(\n    (url: string) => {\n      const source = window.open(url, '_blank')\n      if (source) {\n        popups.add(source)\n      }\n    },\n    [popups],\n  )\n\n  useEffect(() => {\n    if (popups.size && channel) {\n      // loop popups and call channel.addSource\n      for (const source of popups) {\n        if (source && 'closed' in source && !source.closed) {\n          channel.addSource(source)\n        }\n      }\n    }\n  }, [channel, popups, popups.size])\n\n  // This workaround can be removed once the need to set prefersLatestPublished is no longer there\n  const perspectiveRef = useRef(state.perspective)\n  useEffect(() => {\n    perspectiveRef.current = state.perspective\n  }, [state.perspective])\n\n  useEffect(() => {\n    const target = iframeRef.current?.contentWindow\n\n    if (!target) return\n\n    const nextChannel = createChannelsController<\n      VisualEditingConnectionIds,\n      PresentationMsg | LoaderMsg,\n      LoaderMsg | OverlayMsg | VisualEditingMsg | PreviewKitMsg\n    >({\n      id: 'presentation',\n      target,\n      targetOrigin,\n      connectTo: [\n        {\n          id: 'overlays',\n          heartbeat: true,\n          onStatusUpdate: setOverlaysConnection,\n          onEvent(type, data) {\n            if ((type === 'visual-editing/focus' || type === 'overlay/focus') && 'id' in data) {\n              navigate(\n                {\n                  type: data.type,\n                  id: data.id,\n                  path: data.path,\n                },\n                {\n                  prefersLatestPublished:\n                    'isDraft' in data || perspectiveRef.current === 'previewDrafts'\n                      ? undefined\n                      : 'true',\n                },\n              )\n            } else if (type === 'visual-editing/navigate' || type === 'overlay/navigate') {\n              const {title, url} = data\n              if (frameStateRef.current.url !== url) {\n                navigate({}, {preview: url})\n              }\n              frameStateRef.current = {title, url}\n            } else if (type === 'visual-editing/meta') {\n              frameStateRef.current.title = data.title\n            } else if (type === 'visual-editing/toggle' || type === 'overlay/toggle') {\n              dispatch({\n                type: ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE,\n                enabled: data.enabled,\n              })\n            } else if (type === 'visual-editing/documents') {\n              setDocumentsOnPage(\n                'visual-editing',\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                data.perspective as unknown as any,\n                data.documents,\n              )\n            } else if (type === 'visual-editing/refreshing' && data.source === 'manual') {\n              clearTimeout(refreshRef.current)\n            } else if (type === 'visual-editing/refreshing' && data.source === 'mutation') {\n              dispatch({type: ACTION_IFRAME_REFRESH})\n            } else if (type === 'visual-editing/refreshed') {\n              dispatch({type: ACTION_IFRAME_LOADED})\n            }\n          },\n        },\n        {\n          id: 'loaders',\n          heartbeat: true,\n          onStatusUpdate: setLoadersConnection,\n          onEvent(type, data) {\n            if (\n              type === 'loader/documents' &&\n              data.projectId === projectId &&\n              data.dataset === dataset\n            ) {\n              setDocumentsOnPage(\n                'loaders',\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                data.perspective as unknown as any,\n                data.documents,\n              )\n            } else if (\n              type === 'loader/query-listen' &&\n              data.projectId === projectId &&\n              data.dataset === dataset\n            ) {\n              if (\n                typeof data.heartbeat === 'number' &&\n                data.heartbeat < MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL\n              ) {\n                throw new Error(\n                  `Loader query listen heartbeat interval must be at least ${MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL}ms`,\n                )\n              }\n              setLiveQueries((prev) => ({\n                ...prev,\n                [getQueryCacheKey(data.query, data.params)]: {\n                  perspective: data.perspective,\n                  query: data.query,\n                  params: data.params,\n                  receivedAt: Date.now(),\n                  heartbeat: data.heartbeat ?? false,\n                } satisfies LiveQueriesStateValue,\n              }))\n            }\n          },\n        },\n        {\n          id: 'preview-kit',\n          heartbeat: true,\n          onStatusUpdate: setPreviewKitConnection,\n          onEvent(type, data) {\n            if (\n              type === 'preview-kit/documents' &&\n              data.projectId === projectId &&\n              data.dataset === dataset\n            ) {\n              setDocumentsOnPage(\n                'preview-kit',\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                data.perspective as unknown as any,\n                data.documents,\n              )\n            }\n          },\n        },\n      ],\n    })\n    setChannel(nextChannel)\n\n    return () => {\n      nextChannel.destroy()\n      setChannel(undefined)\n    }\n  }, [dataset, projectId, setDocumentsOnPage, navigate, targetOrigin])\n\n  useEffect(() => {\n    const interval = setInterval(\n      () =>\n        setLiveQueries((liveQueries) => {\n          if (Object.keys(liveQueries).length < 1) {\n            return liveQueries\n          }\n\n          const now = Date.now()\n          const hasAnyExpired = Object.values(liveQueries).some(\n            (liveQuery) =>\n              liveQuery.heartbeat !== false && now > liveQuery.receivedAt + liveQuery.heartbeat,\n          )\n          if (!hasAnyExpired) {\n            return liveQueries\n          }\n          const next = {} as LiveQueriesState\n          for (const [key, value] of Object.entries(liveQueries)) {\n            if (value.heartbeat !== false && now > value.receivedAt + value.heartbeat) {\n              continue\n            }\n            next[key] = value\n          }\n          return next\n        }),\n      MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n    )\n    return () => clearInterval(interval)\n  }, [])\n\n  const handleFocusPath = useCallback(\n    (nextPath: Path) => {\n      // Don’t need to explicitly set the id here because it was either already set via postMessage or is the same if navigating in the document pane\n      navigate({path: studioPath.toString(nextPath)}, {}, true)\n    },\n    [navigate],\n  )\n\n  const handlePreviewPath = useCallback(\n    (nextPath: string) => {\n      const url = new URL(nextPath, initialPreviewUrl.origin)\n      const preview = url.pathname + url.search\n      if (url.origin === initialPreviewUrl.origin && preview !== params.preview) {\n        navigate({}, {preview})\n      }\n    },\n    [initialPreviewUrl, params, navigate],\n  )\n\n  const handleStructureParams = useCallback(\n    (structureParams: StructureDocumentPaneParams) => {\n      navigate({}, structureParams)\n    },\n    [navigate],\n  )\n\n  // Dispatch a perspective message when the perspective changes\n  useEffect(() => {\n    channel?.send('overlays', 'presentation/perspective', {\n      perspective: state.perspective,\n    })\n  }, [channel, state.perspective])\n\n  // Dispatch a focus or blur message when the id or path change\n  useEffect(() => {\n    if (params.id && params.path) {\n      channel?.send('overlays', 'presentation/focus', {\n        id: params.id,\n        path: params.path,\n      })\n    } else {\n      channel?.send('overlays', 'presentation/blur', undefined)\n    }\n  }, [channel, params.id, params.path])\n\n  // Handle opening the published document when previewing published\n  useEffect(() => {\n    if (\n      state.perspective === 'published' &&\n      params.id &&\n      !params.rev &&\n      !params.prefersLatestPublished\n    ) {\n      navigate({}, {prefersLatestPublished: 'true'})\n    }\n  }, [navigate, params.id, params.prefersLatestPublished, params.rev, state.perspective])\n\n  // Dispatch a navigation message when the preview param changes\n  useEffect(() => {\n    if (\n      frameStateRef.current.url &&\n      params.preview &&\n      frameStateRef.current.url !== params.preview\n    ) {\n      frameStateRef.current.url = params.preview\n      if (overlaysConnection !== 'connected' && iframeRef.current) {\n        iframeRef.current.src = `${targetOrigin}${params.preview}`\n      } else {\n        channel?.send('overlays', 'presentation/navigate', {\n          url: params.preview,\n          type: 'replace',\n        })\n      }\n    }\n  }, [channel, overlaysConnection, targetOrigin, params.preview])\n\n  const toggleOverlay = useCallback(\n    () => channel?.send('overlays', 'presentation/toggleOverlay', undefined),\n    [channel],\n  )\n\n  const [displayedDocument, setDisplayedDocument] = useState<\n    Partial<SanityDocument> | null | undefined\n  >(null)\n\n  useEffect(() => {\n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (isAltKey(e)) {\n        toggleOverlay()\n      }\n    }\n    const handleKeydown = (e: KeyboardEvent) => {\n      if (isAltKey(e)) {\n        toggleOverlay()\n      }\n\n      if (isHotkey(['mod', '\\\\'], e)) {\n        toggleOverlay()\n      }\n    }\n    window.addEventListener('keydown', handleKeydown)\n    window.addEventListener('keyup', handleKeyUp)\n    return () => {\n      window.removeEventListener('keydown', handleKeydown)\n      window.removeEventListener('keyup', handleKeyUp)\n    }\n  }, [toggleOverlay])\n\n  const [boundaryElement, setBoundaryElement] = useState<HTMLDivElement | null>(null)\n\n  const [{navigatorEnabled, toggleNavigator}, PresentationNavigator] = usePresentationNavigator({\n    unstable_navigator,\n  })\n\n  // Handle edge case where the `&rev=` parameter gets \"stuck\"\n  const idRef = useRef<string | undefined>(params.id)\n  useEffect(() => {\n    if (params.rev && idRef.current && params.id !== idRef.current) {\n      navigate({}, {rev: undefined})\n    }\n    idRef.current = params.id\n  })\n\n  const refreshRef = useRef<number>()\n  const handleRefresh = useCallback(\n    (fallback: () => void) => {\n      dispatch({type: ACTION_IFRAME_REFRESH})\n      if (channel) {\n        // We only wait 300ms for the iframe to ack the refresh request before running the fallback logic\n        refreshRef.current = window.setTimeout(fallback, 300)\n        channel.send('overlays', 'presentation/refresh', {\n          source: 'manual',\n          livePreviewEnabled:\n            previewKitConnection === 'connected' || loadersConnection === 'connected',\n        })\n        return\n      }\n      fallback()\n    },\n    [channel, loadersConnection, previewKitConnection],\n  )\n\n  const workspace = useWorkspace()\n\n  const getCommentIntent = useCallback<CommentIntentGetter>(\n    ({id, type, path}) => {\n      if (frameStateRef.current.url) {\n        return {\n          title: frameStateRef.current.title || frameStateRef.current.url,\n          name: 'edit',\n          params: {\n            id,\n            path,\n            type,\n            inspect: COMMENTS_INSPECTOR_NAME,\n            workspace: workspace.name,\n            mode: EDIT_INTENT_MODE,\n            preview: params.preview,\n          },\n        }\n      }\n      return undefined\n    },\n    [params.preview, workspace.name],\n  )\n\n  return (\n    <>\n      <PresentationProvider\n        devMode={devMode}\n        name={name}\n        navigate={navigate}\n        params={params}\n        structureParams={structureParams}\n      >\n        <PresentationNavigateProvider navigate={navigate}>\n          <PresentationParamsProvider params={params}>\n            <Container height=\"fill\">\n              <Panels>\n                <PresentationNavigator />\n                <Panel\n                  id=\"preview\"\n                  minWidth={325}\n                  defaultSize={navigatorEnabled ? 50 : 75}\n                  order={3}\n                >\n                  <Flex direction=\"column\" flex={1} height=\"fill\" ref={setBoundaryElement}>\n                    <BoundaryElementProvider element={boundaryElement}>\n                      <PreviewFrame\n                        dispatch={dispatch}\n                        iframe={state.iframe}\n                        initialUrl={initialPreviewUrl}\n                        loadersConnection={loadersConnection}\n                        navigatorEnabled={navigatorEnabled}\n                        onPathChange={handlePreviewPath}\n                        onRefresh={handleRefresh}\n                        openPopup={handleOpenPopup}\n                        overlaysConnection={overlaysConnection}\n                        params={params}\n                        perspective={state.perspective}\n                        ref={iframeRef}\n                        targetOrigin={targetOrigin}\n                        toggleNavigator={toggleNavigator}\n                        toggleOverlay={toggleOverlay}\n                        viewport={state.viewport}\n                        visualEditing={state.visualEditing}\n                      />\n                    </BoundaryElementProvider>\n                  </Flex>\n                </Panel>\n                <PresentationContent\n                  mainDocumentState={mainDocumentState}\n                  params={params}\n                  documentsOnPage={documentsOnPage}\n                  getCommentIntent={getCommentIntent}\n                  onFocusPath={handleFocusPath}\n                  onStructureParams={handleStructureParams}\n                  setDisplayedDocument={setDisplayedDocument}\n                  structureParams={structureParams}\n                />\n              </Panels>\n            </Container>\n          </PresentationParamsProvider>\n        </PresentationNavigateProvider>\n      </PresentationProvider>\n      {channel && (\n        <Suspense>\n          <LoaderQueries\n            channel={channel}\n            liveQueries={liveQueries}\n            perspective={state.perspective}\n            liveDocument={displayedDocument}\n            documentsOnPage={documentsOnPage}\n          />\n        </Suspense>\n      )}\n      {channel && params.id && params.type && (\n        <Suspense>\n          <PostMessageRefreshMutations\n            channel={channel}\n            id={params.id}\n            type={params.type}\n            loadersConnection={loadersConnection}\n            previewKitConnection={previewKitConnection}\n          />\n        </Suspense>\n      )}\n    </>\n  )\n}\n"],"names":["jsx","jsxs","Fragment","studioPath","Button","Card","Flex","Container$1","Stack","Text","Inline","Box","Code","Label","ErrorBoundary","Badge","TextInput","MenuItem","useToast","usePrefersReducedMotion","TooltipDelayGroupProvider","Tooltip","Switch","MenuButton","Menu","Spinner","BoundaryElementProvider","createContext","useContext","useLayoutEffect","useMemo","useRef","useState","useCallback","useEffect","forwardRef","memo","createElement","startTransition","useReducer","Suspense","lazy","useTranslation","useUnique","getPublishedId","useSchema","Preview","Translate","CommentsIntentProvider","useActiveWorkspace","useClient","useCurrentUser","Hotkeys","useDocumentStore","useProjectId","useDataset","useWorkspace","StateLink","useRouter","decodeJsonParams","styled","presentationLocaleNamespace","usePresentationTool","PresentationNavigateContext","PresentationParamsContext","PresentationContext","API_VERSION","MAX_TIME_TO_OVERLAYS_CONNECTION","MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL","COMMENTS_INSPECTOR_NAME","EDIT_INTENT_MODE","DEFAULT_TOOL_NAME","WarningOutlineIcon","ResetIcon","LaunchIcon","CopyIcon","PanelLeftIcon","RefreshIcon","ShareIcon","ChevronDownIcon","CheckmarkIcon","DesktopIcon","MobileDeviceIcon","EditIcon","PublishIcon","PaneRouterContext","PaneLayout","StructureToolProvider","DocumentListPane$1","DocumentPane$1","DisplayedDocumentBroadcasterProvider","hasSecretSearchParams","setSecretSearchParams","withoutSecretSearchParams","motion","MotionConfig","AnimatePresence","createPreviewSecret","isEqual","match","definePreviewUrl","suspend","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","Error","byteToHex","i","push","toString","slice","native","randomUUID","v4","options","buf","offset","rnds","random","arr","unsafeStringify","RESPONSE_TIMEOUT","HEARTBEAT_INTERVAL","HANDSHAKE_INTERVAL","HANDSHAKE_MSG_TYPES","isHandshakeMessage","type","some","t","isLegacyHandshakeMessage","data","Array","isArray","every","key","startsWith","createChannelsControllerInternal","config","target","channels","connectTo","map","buffer","id","handler","handshakeHandler","status","interval","heartbeat","stopHandshake","channel","window","clearInterval","e","find","from","setChannelStatus","sendHandshake","messageHandler","_a","_b","_c","connectionId","args","onEvent","call","send","responseTo","handleEvents","console","error","origin","domain","to","includes","targetOrigin","isValidMessageEvent","stopHeartbeat","next","onStatusUpdate","uuid","setInterval","startHandshake","heartbeatInverval","startHeartbeat","toFlush","splice","length","forEach","flush","msg","postMessage","expectResponse","maxWait","setTimeout","removeEventListener","transact","warn","eventData","clearTimeout","addEventListener","destroy","store","store2","store3","store4","ValiError","constructor","issues","super","message","__publicField","this","name","defaultArgs","arg1","arg2","i18n","schema","context","reference","issue","_d","_e","lang","get","getSpecificMessage","getGlobalMessage","schemaResult","typed","output","stringify","input","Object","getPrototypeOf","pipeIssue","received","schemaIssue2","reason","expected","expects","label","requirement","path","abortEarly","abortPipeEarly","skipPipe","pipeResult","pipe","action","result","_parse","actionIssue2","schemaIssue","other","fallback","fallback2","info","getFallback","boolean","async","object","entries","arg3","arg4","rest","error2","pipe2","restAndDefaultArgs","cachedEntries","value2","pathItem","value","unshift","picklist","join","parse","getGlobalConfig","b","y","m","a","r","JSON","s","alt","ctrl","mod","test","navigator","platform","shift","c","debounce","fn","timeout","timer","apply","PanelsContext","displayName","Root","div","Panel","children","defaultSize","minWidth","maxWidth","order","getPanelStyle","registerElement","unregisterElement","style","itemKey","getStoredItem","localStorage","getItem","getKeyForPanels","panels","panel","usePanelsStorage","set","widths","stored","setItem","setStoredItem","val","setDebounced","getNextWidth","nextWidth","containerWidth","maxWidthPx","minWidthPx","Math","min","max","getPanelWidth","width","findIndex","toPrecision","getOffset","event","handleElement","initialOffset","initialHandleElementRect","clientX","getBoundingClientRect","left","isPanel","element","isResizer","getSortedElements","elements","values","sort","validateWidths","widthsToValidate","total","reduce","remainingWidth","index","toFixed","abs","PanelsWrapper","Panels","panelsEl","setElements","Map","filter","setWidths","activeResizer","setActiveResizer","panelsRef","flexGrow","pointerEvents","prev","has","delete","dragRef","innerWidth","dragOffset","panelAfter","panelBefore","resizerIndex","resizerRect","startX","startDragging","elementsArr","el","resizer","resizeElement","current","acc","pageX","stopDragging","drag","preventDefault","stopPropagation","prevWidths","nextWidths","delta","panelsState","initialDragState","initialWidths","pivotPanel","deltaApplied","localeCompare","numeric","getNextWidths","prevWidth","storage","storedWidths","validatedStoredWidths","defaultWidths","panelsWithoutWidth","remainingWidthTotal","widthsWithNulls","defaultWidth","getDefaultWidths","resizeObserver","ResizeObserver","observe","disconnect","Provider","ref","ErrorCard","props","onRetry","onContinueAnyway","restProps","retryButton","fontSize","mode","onClick","text","continueAnywayButton","tone","height","align","justify","Container","padding","sizing","space","size","weight","muted","resolveQueryStringFromParams","nextParams","allowed","params","parts","encodeQueryString","obj","BackLink","structureParams","state","_searchParams","perspective","preview","title","ReferenceChildLink","documentId","documentType","parentRefPath","template","previewUrl","prefersLatestPublished","PresentationPaneRouterProvider","onStructureParams","refs","routerState","resolvePathFromState","routerSearchParams","fromEntries","createPathWithParams","groupIndex","siblingIndex","payload","hasGroupSiblings","groupLength","routerPanesState","ChildLink","childLinkProps","childId","_id","_type","ParameterizedLink","closeCurrentAndAfter","handleEditReference","replaceCurrent","pane","closeCurrent","duplicateCurrent","setView","viewId","setParams","inspect","setPayload","navigateIntent","intentName","intentParams","RootLayout","WrappedCode","DocumentListPane","mainDocumentState","devMode","ids","document","schemaTypeName","errorParams","setErrorParams","handleRetry","flex","overflow","radius","onCatch","direction","StructureDocumentListPane","itemId","paneKey","DocumentPane","onFocusPath","templateParams","paneDocumentNode","templateParameters","StructureDocumentPane","DocumentPanel","ContentEditor","MainDocumentLink","as","schemaType","gap","i18nKey","components","Resizer","ResizerInner","$disabled","PanelResizer","propId","disabled","usePanelId","isDragging","onMouseDown","nativeEvent","onDrag","onDragStop","blur","PresentationContentWrapper","setDisplayedDocument","getCommentIntent","getIntent","PresentationContent","documentsOnPage","PresentationNavigateProvider","navigate","_navigate","usePresentationNavigator","unstable_navigator","navigatorProvided","component","_navigatorEnabled","setNavigatorEnabled","defaultValue","setValue","useLocalState","navigatorEnabled","toggleNavigator","enabled","Component","Navigator","NavigatorComponent","navigatorDisabled","PresentationParamsProvider","PresentationProvider","ACTION_IFRAME_LOADED","ACTION_IFRAME_REFRESH","ACTION_IFRAME_RELOAD","ACTION_PERSPECTIVE","ACTION_VIEWPORT","ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE","presentationReducer","iframe","perspectiveSchema","viewport","viewportSchema","toggleVisualEditingOverlays","visualEditing","overlaysEnabled","mainDocumentSchema","iframeStatusSchema","initStateSchema","mainDocument","INITIAL_PRESENTATION_STATE","presentationReducerInit","IFrame","PreviewLocationInput","onChange","prefix","suffix","basePath","activeWorkspace","inputRef","sessionValue","setSessionValue","customValidity","setCustomValidity","handleChange","currentTarget","handleKeyDown","absoluteValue","nextValue","handleBlur","resetButton","icon","clearButton","onBlur","onClear","onKeyDownCapture","zIndex","ShareUrlMenuItems","initialUrl","openPopup","previewLocationOrigin","previewLocationRoute","handleOpenPopup","href","CopyUrlMenuButton","rel","pushToast","client","apiVersion","currentUser","setDisabled","clipboard","closable","url","onFinally","onError","description","ClipboardItem","resolvePreviewUrl","previewUrlSecret","location","secret","Blob","item","write","then","catch","writeText","MotionFlex","PERSPECTIVE_TITLE_KEY","previewDrafts","published","PERSPECTIVE_TONES","PERSPECTIVE_ICONS","PreviewFrame","dispatch","loadersConnection","onPathChange","onRefresh","overlaysConnection","toggleOverlay","prefersReducedMotion","setDesktopMode","setMobileMode","loading","timedOut","setTimedOut","refreshing","somethingIsWrong","setSomethingIsWrong","iframeIsBusy","handleRefresh","src","handleContinueAnyway","setContinueAnyway","continueAnyway","showOverlaysConnectionStatus","setShowOverlaysConnectionState","URL","pathname","search","onIFrameLoad","instance","activeElement","dispatchEvent","MouseEvent","bubbles","cancelable","transition","duration","delay","shadow","position","minHeight","marginRight","animate","content","fallbackPlacements","placement","portal","selected","whiteSpace","paddingY","keys","marginTop","marginBottom","lineHeight","borderRadius","userSelect","margin","checked","marginX","button","iconRight","menu","popover","constrainSize","pressed","opacity","cursor","initial","exit","variants","spinnerVariants","inset","sizes","errorVariants","background","borderTop","boxShadow","backdropFilter","WebkitBackdropFilter","WebkitTransition","iframeVariants","onLoad","desktop","mobile","scale","idle","reloading","active","warnedAboutCrossDatasetReference","fnOrObj","arg","Function","getRouteContext","route","routes","absolute","decode","decodeURIComponent","useMainDocument","resolvers","documentStore","setMainDocumentState","mainDocumentIdRef","relativeUrl","base","clearState","resolver","query","resolve","getQueryFromResult","controller","AbortController","signal","fetch","doc","abort","parseId","rawId","segments","split","parsePath","rawPath","exec","e2","Number","o","_key","urlStringToPath","pruneObject","useParams","initialPreviewUrl","routerNavigate","frameStateRef","rev","since","view","pathKey","instruction","comment","routerStateRef","nextState","nextSearchState","forceReplace","routerSearchState","searchState","replace","usePreviewUrl","toolName","previewSearchParam","workspace","workspaceName","deps","cachedPreviewSearchParam","setCachedPreviewSearchParam","timeoutRef","resolveUUID","useSuspendCacheKeys","secretLastExpiredAt","setSecretLastExpiredAt","expiresAt","getTime","Date","now","usePreviewUrlSecret","resolvedUrl","resultUrl","restoredUrl","referrer","referrerUrl","studioBasePath","Symbol","LoaderQueries","import","PostMessageRefreshMutations","PresentationTool","_previewUrl","tool","option","hostname","iframeRef","setChannel","liveQueries","setLiveQueries","setDocumentsOnPage","setPublished","setPreviewDrafts","urlRef","sourceDocuments","documents","sourceDocument","_projectId","cache","uniqueDocuments","useDocumentsOnPage","projectId","dataset","mainDocuments","setOverlaysConnection","setLoadersConnection","previewKitConnection","setPreviewKitConnection","popups","Set","source","open","add","closed","addSource","perspectiveRef","contentWindow","nextChannel","sources","sendToSource","WeakMap","destroySource","prevConnectTo","createChannelsController","refreshRef","getQueryCacheKey","receivedAt","liveQuery","handleFocusPath","nextPath","handlePreviewPath","handleStructureParams","displayedDocument","handleKeyUp","handleKeydown","toUpperCase","boundaryElement","setBoundaryElement","PresentationNavigator","idRef","livePreviewEnabled","liveDocument"],"mappings":"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","x_google_ignoreList":[0,1,2,3,7]}